// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             (unknown)
// source: heimdallv2/checkpoint/query.proto

package checkpoint

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	Query_GetCheckpointParams_FullMethodName     = "/heimdallv2.checkpoint.Query/GetCheckpointParams"
	Query_GetCheckpointOverview_FullMethodName   = "/heimdallv2.checkpoint.Query/GetCheckpointOverview"
	Query_GetAckCount_FullMethodName             = "/heimdallv2.checkpoint.Query/GetAckCount"
	Query_GetCheckpointLatest_FullMethodName     = "/heimdallv2.checkpoint.Query/GetCheckpointLatest"
	Query_GetCheckpointBuffer_FullMethodName     = "/heimdallv2.checkpoint.Query/GetCheckpointBuffer"
	Query_GetLastNoAck_FullMethodName            = "/heimdallv2.checkpoint.Query/GetLastNoAck"
	Query_GetNextCheckpoint_FullMethodName       = "/heimdallv2.checkpoint.Query/GetNextCheckpoint"
	Query_GetCheckpointList_FullMethodName       = "/heimdallv2.checkpoint.Query/GetCheckpointList"
	Query_GetCheckpointSignatures_FullMethodName = "/heimdallv2.checkpoint.Query/GetCheckpointSignatures"
	Query_GetCheckpoint_FullMethodName           = "/heimdallv2.checkpoint.Query/GetCheckpoint"
)

// QueryClient is the client API for Query service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type QueryClient interface {
	// GetCheckpointParams queries for the x/checkpoint params
	GetCheckpointParams(ctx context.Context, in *QueryParamsRequest, opts ...grpc.CallOption) (*QueryParamsResponse, error)
	// GetChekpointOverview queries for the checkpoint overview
	GetCheckpointOverview(ctx context.Context, in *QueryCheckpointOverviewRequest, opts ...grpc.CallOption) (*QueryCheckpointOverviewResponse, error)
	// GetAckCount queries for the ack count
	GetAckCount(ctx context.Context, in *QueryAckCountRequest, opts ...grpc.CallOption) (*QueryAckCountResponse, error)
	// GetCheckpointLatest queries for the latest checkpoint
	GetCheckpointLatest(ctx context.Context, in *QueryCheckpointLatestRequest, opts ...grpc.CallOption) (*QueryCheckpointLatestResponse, error)
	// GetCheckpointBuffer queries for the checkpoint in the buffer
	GetCheckpointBuffer(ctx context.Context, in *QueryCheckpointBufferRequest, opts ...grpc.CallOption) (*QueryCheckpointBufferResponse, error)
	// GetLastNoAck queries for the last last-no-ack
	GetLastNoAck(ctx context.Context, in *QueryLastNoAckRequest, opts ...grpc.CallOption) (*QueryLastNoAckResponse, error)
	// GetNextCheckpoint queries for the next checkpoint
	GetNextCheckpoint(ctx context.Context, in *QueryNextCheckpointRequest, opts ...grpc.CallOption) (*QueryNextCheckpointResponse, error)
	// GetCheckpointList queries for the list of checkpoints
	GetCheckpointList(ctx context.Context, in *QueryCheckpointListRequest, opts ...grpc.CallOption) (*QueryCheckpointListResponse, error)
	// GetCheckpointSignatures queries signatures for latest checkpoint
	GetCheckpointSignatures(ctx context.Context, in *QueryCheckpointSignaturesRequest, opts ...grpc.CallOption) (*QueryCheckpointSignaturesResponse, error)
	// GetCheckpoint queries for the checkpoint based on the number
	GetCheckpoint(ctx context.Context, in *QueryCheckpointRequest, opts ...grpc.CallOption) (*QueryCheckpointResponse, error)
}

type queryClient struct {
	cc grpc.ClientConnInterface
}

func NewQueryClient(cc grpc.ClientConnInterface) QueryClient {
	return &queryClient{cc}
}

func (c *queryClient) GetCheckpointParams(ctx context.Context, in *QueryParamsRequest, opts ...grpc.CallOption) (*QueryParamsResponse, error) {
	out := new(QueryParamsResponse)
	err := c.cc.Invoke(ctx, Query_GetCheckpointParams_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) GetCheckpointOverview(ctx context.Context, in *QueryCheckpointOverviewRequest, opts ...grpc.CallOption) (*QueryCheckpointOverviewResponse, error) {
	out := new(QueryCheckpointOverviewResponse)
	err := c.cc.Invoke(ctx, Query_GetCheckpointOverview_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) GetAckCount(ctx context.Context, in *QueryAckCountRequest, opts ...grpc.CallOption) (*QueryAckCountResponse, error) {
	out := new(QueryAckCountResponse)
	err := c.cc.Invoke(ctx, Query_GetAckCount_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) GetCheckpointLatest(ctx context.Context, in *QueryCheckpointLatestRequest, opts ...grpc.CallOption) (*QueryCheckpointLatestResponse, error) {
	out := new(QueryCheckpointLatestResponse)
	err := c.cc.Invoke(ctx, Query_GetCheckpointLatest_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) GetCheckpointBuffer(ctx context.Context, in *QueryCheckpointBufferRequest, opts ...grpc.CallOption) (*QueryCheckpointBufferResponse, error) {
	out := new(QueryCheckpointBufferResponse)
	err := c.cc.Invoke(ctx, Query_GetCheckpointBuffer_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) GetLastNoAck(ctx context.Context, in *QueryLastNoAckRequest, opts ...grpc.CallOption) (*QueryLastNoAckResponse, error) {
	out := new(QueryLastNoAckResponse)
	err := c.cc.Invoke(ctx, Query_GetLastNoAck_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) GetNextCheckpoint(ctx context.Context, in *QueryNextCheckpointRequest, opts ...grpc.CallOption) (*QueryNextCheckpointResponse, error) {
	out := new(QueryNextCheckpointResponse)
	err := c.cc.Invoke(ctx, Query_GetNextCheckpoint_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) GetCheckpointList(ctx context.Context, in *QueryCheckpointListRequest, opts ...grpc.CallOption) (*QueryCheckpointListResponse, error) {
	out := new(QueryCheckpointListResponse)
	err := c.cc.Invoke(ctx, Query_GetCheckpointList_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) GetCheckpointSignatures(ctx context.Context, in *QueryCheckpointSignaturesRequest, opts ...grpc.CallOption) (*QueryCheckpointSignaturesResponse, error) {
	out := new(QueryCheckpointSignaturesResponse)
	err := c.cc.Invoke(ctx, Query_GetCheckpointSignatures_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) GetCheckpoint(ctx context.Context, in *QueryCheckpointRequest, opts ...grpc.CallOption) (*QueryCheckpointResponse, error) {
	out := new(QueryCheckpointResponse)
	err := c.cc.Invoke(ctx, Query_GetCheckpoint_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// QueryServer is the server API for Query service.
// All implementations must embed UnimplementedQueryServer
// for forward compatibility
type QueryServer interface {
	// GetCheckpointParams queries for the x/checkpoint params
	GetCheckpointParams(context.Context, *QueryParamsRequest) (*QueryParamsResponse, error)
	// GetChekpointOverview queries for the checkpoint overview
	GetCheckpointOverview(context.Context, *QueryCheckpointOverviewRequest) (*QueryCheckpointOverviewResponse, error)
	// GetAckCount queries for the ack count
	GetAckCount(context.Context, *QueryAckCountRequest) (*QueryAckCountResponse, error)
	// GetCheckpointLatest queries for the latest checkpoint
	GetCheckpointLatest(context.Context, *QueryCheckpointLatestRequest) (*QueryCheckpointLatestResponse, error)
	// GetCheckpointBuffer queries for the checkpoint in the buffer
	GetCheckpointBuffer(context.Context, *QueryCheckpointBufferRequest) (*QueryCheckpointBufferResponse, error)
	// GetLastNoAck queries for the last last-no-ack
	GetLastNoAck(context.Context, *QueryLastNoAckRequest) (*QueryLastNoAckResponse, error)
	// GetNextCheckpoint queries for the next checkpoint
	GetNextCheckpoint(context.Context, *QueryNextCheckpointRequest) (*QueryNextCheckpointResponse, error)
	// GetCheckpointList queries for the list of checkpoints
	GetCheckpointList(context.Context, *QueryCheckpointListRequest) (*QueryCheckpointListResponse, error)
	// GetCheckpointSignatures queries signatures for latest checkpoint
	GetCheckpointSignatures(context.Context, *QueryCheckpointSignaturesRequest) (*QueryCheckpointSignaturesResponse, error)
	// GetCheckpoint queries for the checkpoint based on the number
	GetCheckpoint(context.Context, *QueryCheckpointRequest) (*QueryCheckpointResponse, error)
	mustEmbedUnimplementedQueryServer()
}

// UnimplementedQueryServer must be embedded to have forward compatible implementations.
type UnimplementedQueryServer struct {
}

func (UnimplementedQueryServer) GetCheckpointParams(context.Context, *QueryParamsRequest) (*QueryParamsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCheckpointParams not implemented")
}
func (UnimplementedQueryServer) GetCheckpointOverview(context.Context, *QueryCheckpointOverviewRequest) (*QueryCheckpointOverviewResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCheckpointOverview not implemented")
}
func (UnimplementedQueryServer) GetAckCount(context.Context, *QueryAckCountRequest) (*QueryAckCountResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAckCount not implemented")
}
func (UnimplementedQueryServer) GetCheckpointLatest(context.Context, *QueryCheckpointLatestRequest) (*QueryCheckpointLatestResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCheckpointLatest not implemented")
}
func (UnimplementedQueryServer) GetCheckpointBuffer(context.Context, *QueryCheckpointBufferRequest) (*QueryCheckpointBufferResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCheckpointBuffer not implemented")
}
func (UnimplementedQueryServer) GetLastNoAck(context.Context, *QueryLastNoAckRequest) (*QueryLastNoAckResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetLastNoAck not implemented")
}
func (UnimplementedQueryServer) GetNextCheckpoint(context.Context, *QueryNextCheckpointRequest) (*QueryNextCheckpointResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetNextCheckpoint not implemented")
}
func (UnimplementedQueryServer) GetCheckpointList(context.Context, *QueryCheckpointListRequest) (*QueryCheckpointListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCheckpointList not implemented")
}
func (UnimplementedQueryServer) GetCheckpointSignatures(context.Context, *QueryCheckpointSignaturesRequest) (*QueryCheckpointSignaturesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCheckpointSignatures not implemented")
}
func (UnimplementedQueryServer) GetCheckpoint(context.Context, *QueryCheckpointRequest) (*QueryCheckpointResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCheckpoint not implemented")
}
func (UnimplementedQueryServer) mustEmbedUnimplementedQueryServer() {}

// UnsafeQueryServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to QueryServer will
// result in compilation errors.
type UnsafeQueryServer interface {
	mustEmbedUnimplementedQueryServer()
}

func RegisterQueryServer(s grpc.ServiceRegistrar, srv QueryServer) {
	s.RegisterService(&Query_ServiceDesc, srv)
}

func _Query_GetCheckpointParams_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryParamsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).GetCheckpointParams(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Query_GetCheckpointParams_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).GetCheckpointParams(ctx, req.(*QueryParamsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_GetCheckpointOverview_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryCheckpointOverviewRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).GetCheckpointOverview(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Query_GetCheckpointOverview_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).GetCheckpointOverview(ctx, req.(*QueryCheckpointOverviewRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_GetAckCount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryAckCountRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).GetAckCount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Query_GetAckCount_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).GetAckCount(ctx, req.(*QueryAckCountRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_GetCheckpointLatest_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryCheckpointLatestRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).GetCheckpointLatest(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Query_GetCheckpointLatest_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).GetCheckpointLatest(ctx, req.(*QueryCheckpointLatestRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_GetCheckpointBuffer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryCheckpointBufferRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).GetCheckpointBuffer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Query_GetCheckpointBuffer_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).GetCheckpointBuffer(ctx, req.(*QueryCheckpointBufferRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_GetLastNoAck_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryLastNoAckRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).GetLastNoAck(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Query_GetLastNoAck_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).GetLastNoAck(ctx, req.(*QueryLastNoAckRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_GetNextCheckpoint_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryNextCheckpointRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).GetNextCheckpoint(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Query_GetNextCheckpoint_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).GetNextCheckpoint(ctx, req.(*QueryNextCheckpointRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_GetCheckpointList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryCheckpointListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).GetCheckpointList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Query_GetCheckpointList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).GetCheckpointList(ctx, req.(*QueryCheckpointListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_GetCheckpointSignatures_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryCheckpointSignaturesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).GetCheckpointSignatures(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Query_GetCheckpointSignatures_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).GetCheckpointSignatures(ctx, req.(*QueryCheckpointSignaturesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_GetCheckpoint_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryCheckpointRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).GetCheckpoint(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Query_GetCheckpoint_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).GetCheckpoint(ctx, req.(*QueryCheckpointRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Query_ServiceDesc is the grpc.ServiceDesc for Query service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Query_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "heimdallv2.checkpoint.Query",
	HandlerType: (*QueryServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetCheckpointParams",
			Handler:    _Query_GetCheckpointParams_Handler,
		},
		{
			MethodName: "GetCheckpointOverview",
			Handler:    _Query_GetCheckpointOverview_Handler,
		},
		{
			MethodName: "GetAckCount",
			Handler:    _Query_GetAckCount_Handler,
		},
		{
			MethodName: "GetCheckpointLatest",
			Handler:    _Query_GetCheckpointLatest_Handler,
		},
		{
			MethodName: "GetCheckpointBuffer",
			Handler:    _Query_GetCheckpointBuffer_Handler,
		},
		{
			MethodName: "GetLastNoAck",
			Handler:    _Query_GetLastNoAck_Handler,
		},
		{
			MethodName: "GetNextCheckpoint",
			Handler:    _Query_GetNextCheckpoint_Handler,
		},
		{
			MethodName: "GetCheckpointList",
			Handler:    _Query_GetCheckpointList_Handler,
		},
		{
			MethodName: "GetCheckpointSignatures",
			Handler:    _Query_GetCheckpointSignatures_Handler,
		},
		{
			MethodName: "GetCheckpoint",
			Handler:    _Query_GetCheckpoint_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "heimdallv2/checkpoint/query.proto",
}
