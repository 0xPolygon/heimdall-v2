// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             (unknown)
// source: heimdallv2/checkpoint/v1/query.proto

package checkpointv1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	Query_Params_FullMethodName           = "/heimdallv2.checkpoint.v1.Query/Params"
	Query_AckCount_FullMethodName         = "/heimdallv2.checkpoint.v1.Query/AckCount"
	Query_Checkpoint_FullMethodName       = "/heimdallv2.checkpoint.v1.Query/Checkpoint"
	Query_CheckpointLatest_FullMethodName = "/heimdallv2.checkpoint.v1.Query/CheckpointLatest"
	Query_CheckpointBuffer_FullMethodName = "/heimdallv2.checkpoint.v1.Query/CheckpointBuffer"
	Query_LastNoAck_FullMethodName        = "/heimdallv2.checkpoint.v1.Query/LastNoAck"
	Query_NextCheckpoint_FullMethodName   = "/heimdallv2.checkpoint.v1.Query/NextCheckpoint"
	Query_CurrentProposer_FullMethodName  = "/heimdallv2.checkpoint.v1.Query/CurrentProposer"
	Query_Proposer_FullMethodName         = "/heimdallv2.checkpoint.v1.Query/Proposer"
)

// QueryClient is the client API for Query service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type QueryClient interface {
	// Validators queries all validators that match the given status.
	//
	// When called from another module, this query might consume a high amount of
	// gas if the pagination field is incorrectly set.
	Params(ctx context.Context, in *QueryParamsRequest, opts ...grpc.CallOption) (*QueryParamsResponse, error)
	// AckCount queries for the ack count
	AckCount(ctx context.Context, in *QueryAckCountRequest, opts ...grpc.CallOption) (*QueryAckCountResponse, error)
	// Checkpoint queries for the checkpoint based on the number
	Checkpoint(ctx context.Context, in *QueryCheckpointRequest, opts ...grpc.CallOption) (*QueryCheckpointResponse, error)
	// CheckpointLatest queries for the latest checkpoint
	CheckpointLatest(ctx context.Context, in *QueryCheckpointLatestRequest, opts ...grpc.CallOption) (*QueryCheckpointLatestResponse, error)
	// CheckpointBuffer queries for the checkpoint in the buffer
	CheckpointBuffer(ctx context.Context, in *QueryCheckpointBufferRequest, opts ...grpc.CallOption) (*QueryCheckpointBufferResponse, error)
	// LastNoAck query for the last last-no-ack
	LastNoAck(ctx context.Context, in *QueryLastNoAckRequest, opts ...grpc.CallOption) (*QueryLastNoAckResponse, error)
	// NextCheckpoint query for the next checkpoint
	NextCheckpoint(ctx context.Context, in *QueryNextCheckpointRequest, opts ...grpc.CallOption) (*QueryNextCheckpointResponse, error)
	// CurrentProposer queries validator info for the current proposer
	CurrentProposer(ctx context.Context, in *QueryCurrentProposerRequest, opts ...grpc.CallOption) (*QueryCurrentProposerResponse, error)
	// Proposer queries for the proposer
	Proposer(ctx context.Context, in *QueryProposerRequest, opts ...grpc.CallOption) (*QueryProposerResponse, error)
}

type queryClient struct {
	cc grpc.ClientConnInterface
}

func NewQueryClient(cc grpc.ClientConnInterface) QueryClient {
	return &queryClient{cc}
}

func (c *queryClient) Params(ctx context.Context, in *QueryParamsRequest, opts ...grpc.CallOption) (*QueryParamsResponse, error) {
	out := new(QueryParamsResponse)
	err := c.cc.Invoke(ctx, Query_Params_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) AckCount(ctx context.Context, in *QueryAckCountRequest, opts ...grpc.CallOption) (*QueryAckCountResponse, error) {
	out := new(QueryAckCountResponse)
	err := c.cc.Invoke(ctx, Query_AckCount_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) Checkpoint(ctx context.Context, in *QueryCheckpointRequest, opts ...grpc.CallOption) (*QueryCheckpointResponse, error) {
	out := new(QueryCheckpointResponse)
	err := c.cc.Invoke(ctx, Query_Checkpoint_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) CheckpointLatest(ctx context.Context, in *QueryCheckpointLatestRequest, opts ...grpc.CallOption) (*QueryCheckpointLatestResponse, error) {
	out := new(QueryCheckpointLatestResponse)
	err := c.cc.Invoke(ctx, Query_CheckpointLatest_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) CheckpointBuffer(ctx context.Context, in *QueryCheckpointBufferRequest, opts ...grpc.CallOption) (*QueryCheckpointBufferResponse, error) {
	out := new(QueryCheckpointBufferResponse)
	err := c.cc.Invoke(ctx, Query_CheckpointBuffer_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) LastNoAck(ctx context.Context, in *QueryLastNoAckRequest, opts ...grpc.CallOption) (*QueryLastNoAckResponse, error) {
	out := new(QueryLastNoAckResponse)
	err := c.cc.Invoke(ctx, Query_LastNoAck_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) NextCheckpoint(ctx context.Context, in *QueryNextCheckpointRequest, opts ...grpc.CallOption) (*QueryNextCheckpointResponse, error) {
	out := new(QueryNextCheckpointResponse)
	err := c.cc.Invoke(ctx, Query_NextCheckpoint_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) CurrentProposer(ctx context.Context, in *QueryCurrentProposerRequest, opts ...grpc.CallOption) (*QueryCurrentProposerResponse, error) {
	out := new(QueryCurrentProposerResponse)
	err := c.cc.Invoke(ctx, Query_CurrentProposer_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) Proposer(ctx context.Context, in *QueryProposerRequest, opts ...grpc.CallOption) (*QueryProposerResponse, error) {
	out := new(QueryProposerResponse)
	err := c.cc.Invoke(ctx, Query_Proposer_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// QueryServer is the server API for Query service.
// All implementations must embed UnimplementedQueryServer
// for forward compatibility
type QueryServer interface {
	// Validators queries all validators that match the given status.
	//
	// When called from another module, this query might consume a high amount of
	// gas if the pagination field is incorrectly set.
	Params(context.Context, *QueryParamsRequest) (*QueryParamsResponse, error)
	// AckCount queries for the ack count
	AckCount(context.Context, *QueryAckCountRequest) (*QueryAckCountResponse, error)
	// Checkpoint queries for the checkpoint based on the number
	Checkpoint(context.Context, *QueryCheckpointRequest) (*QueryCheckpointResponse, error)
	// CheckpointLatest queries for the latest checkpoint
	CheckpointLatest(context.Context, *QueryCheckpointLatestRequest) (*QueryCheckpointLatestResponse, error)
	// CheckpointBuffer queries for the checkpoint in the buffer
	CheckpointBuffer(context.Context, *QueryCheckpointBufferRequest) (*QueryCheckpointBufferResponse, error)
	// LastNoAck query for the last last-no-ack
	LastNoAck(context.Context, *QueryLastNoAckRequest) (*QueryLastNoAckResponse, error)
	// NextCheckpoint query for the next checkpoint
	NextCheckpoint(context.Context, *QueryNextCheckpointRequest) (*QueryNextCheckpointResponse, error)
	// CurrentProposer queries validator info for the current proposer
	CurrentProposer(context.Context, *QueryCurrentProposerRequest) (*QueryCurrentProposerResponse, error)
	// Proposer queries for the proposer
	Proposer(context.Context, *QueryProposerRequest) (*QueryProposerResponse, error)
	mustEmbedUnimplementedQueryServer()
}

// UnimplementedQueryServer must be embedded to have forward compatible implementations.
type UnimplementedQueryServer struct {
}

func (UnimplementedQueryServer) Params(context.Context, *QueryParamsRequest) (*QueryParamsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Params not implemented")
}
func (UnimplementedQueryServer) AckCount(context.Context, *QueryAckCountRequest) (*QueryAckCountResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AckCount not implemented")
}
func (UnimplementedQueryServer) Checkpoint(context.Context, *QueryCheckpointRequest) (*QueryCheckpointResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Checkpoint not implemented")
}
func (UnimplementedQueryServer) CheckpointLatest(context.Context, *QueryCheckpointLatestRequest) (*QueryCheckpointLatestResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CheckpointLatest not implemented")
}
func (UnimplementedQueryServer) CheckpointBuffer(context.Context, *QueryCheckpointBufferRequest) (*QueryCheckpointBufferResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CheckpointBuffer not implemented")
}
func (UnimplementedQueryServer) LastNoAck(context.Context, *QueryLastNoAckRequest) (*QueryLastNoAckResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LastNoAck not implemented")
}
func (UnimplementedQueryServer) NextCheckpoint(context.Context, *QueryNextCheckpointRequest) (*QueryNextCheckpointResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method NextCheckpoint not implemented")
}
func (UnimplementedQueryServer) CurrentProposer(context.Context, *QueryCurrentProposerRequest) (*QueryCurrentProposerResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CurrentProposer not implemented")
}
func (UnimplementedQueryServer) Proposer(context.Context, *QueryProposerRequest) (*QueryProposerResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Proposer not implemented")
}
func (UnimplementedQueryServer) mustEmbedUnimplementedQueryServer() {}

// UnsafeQueryServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to QueryServer will
// result in compilation errors.
type UnsafeQueryServer interface {
	mustEmbedUnimplementedQueryServer()
}

func RegisterQueryServer(s grpc.ServiceRegistrar, srv QueryServer) {
	s.RegisterService(&Query_ServiceDesc, srv)
}

func _Query_Params_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryParamsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).Params(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Query_Params_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).Params(ctx, req.(*QueryParamsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_AckCount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryAckCountRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).AckCount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Query_AckCount_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).AckCount(ctx, req.(*QueryAckCountRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_Checkpoint_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryCheckpointRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).Checkpoint(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Query_Checkpoint_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).Checkpoint(ctx, req.(*QueryCheckpointRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_CheckpointLatest_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryCheckpointLatestRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).CheckpointLatest(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Query_CheckpointLatest_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).CheckpointLatest(ctx, req.(*QueryCheckpointLatestRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_CheckpointBuffer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryCheckpointBufferRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).CheckpointBuffer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Query_CheckpointBuffer_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).CheckpointBuffer(ctx, req.(*QueryCheckpointBufferRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_LastNoAck_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryLastNoAckRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).LastNoAck(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Query_LastNoAck_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).LastNoAck(ctx, req.(*QueryLastNoAckRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_NextCheckpoint_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryNextCheckpointRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).NextCheckpoint(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Query_NextCheckpoint_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).NextCheckpoint(ctx, req.(*QueryNextCheckpointRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_CurrentProposer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryCurrentProposerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).CurrentProposer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Query_CurrentProposer_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).CurrentProposer(ctx, req.(*QueryCurrentProposerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_Proposer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryProposerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).Proposer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Query_Proposer_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).Proposer(ctx, req.(*QueryProposerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Query_ServiceDesc is the grpc.ServiceDesc for Query service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Query_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "heimdallv2.checkpoint.v1.Query",
	HandlerType: (*QueryServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Params",
			Handler:    _Query_Params_Handler,
		},
		{
			MethodName: "AckCount",
			Handler:    _Query_AckCount_Handler,
		},
		{
			MethodName: "Checkpoint",
			Handler:    _Query_Checkpoint_Handler,
		},
		{
			MethodName: "CheckpointLatest",
			Handler:    _Query_CheckpointLatest_Handler,
		},
		{
			MethodName: "CheckpointBuffer",
			Handler:    _Query_CheckpointBuffer_Handler,
		},
		{
			MethodName: "LastNoAck",
			Handler:    _Query_LastNoAck_Handler,
		},
		{
			MethodName: "NextCheckpoint",
			Handler:    _Query_NextCheckpoint_Handler,
		},
		{
			MethodName: "CurrentProposer",
			Handler:    _Query_CurrentProposer_Handler,
		},
		{
			MethodName: "Proposer",
			Handler:    _Query_Proposer_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "heimdallv2/checkpoint/v1/query.proto",
}
