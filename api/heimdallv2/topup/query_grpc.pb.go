// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             (unknown)
// source: heimdallv2/topup/query.proto

package topup

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	Query_TopupTxStatus_FullMethodName            = "/heimdallv2.topup.Query/TopupTxStatus"
	Query_DividendAccountByAddress_FullMethodName = "/heimdallv2.topup.Query/DividendAccountByAddress"
	Query_DividendAccountRoot_FullMethodName      = "/heimdallv2.topup.Query/DividendAccountRoot"
	Query_VerifyAccountProof_FullMethodName       = "/heimdallv2.topup.Query/VerifyAccountProof"
	Query_DividendAccountProof_FullMethodName     = "/heimdallv2.topup.Query/DividendAccountProof"
)

// QueryClient is the client API for Query service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type QueryClient interface {
	// TopupTxStatus queries for a specific topup tx to check its status (old
	// means already submitted)
	TopupTxStatus(ctx context.Context, in *QuerySequenceParams, opts ...grpc.CallOption) (*QuerySequenceParamsResponse, error)
	// DividendAccountByAddress queries for a specific DividendAccount by its
	// address
	DividendAccountByAddress(ctx context.Context, in *QueryDividendAccountParams, opts ...grpc.CallOption) (*QueryDividendAccountParamsResponse, error)
	// DividendAccountRoot queries for the dividend account of the genesis root
	// hash
	DividendAccountRoot(ctx context.Context, in *QueryDividendAccountRootParams, opts ...grpc.CallOption) (*QueryDividendAccountRootResponse, error)
	// VerifyAccountProof queries for the dividend account of the genesis root
	// hash
	VerifyAccountProof(ctx context.Context, in *QueryVerifyAccountProofParams, opts ...grpc.CallOption) (*QueryVerifyAccountProofResponse, error)
	// DividendAccountProof queries for the dividend account proof of a given
	// address
	DividendAccountProof(ctx context.Context, in *QueryDividendAccountProofParams, opts ...grpc.CallOption) (*QueryDividendAccountProofResponse, error)
}

type queryClient struct {
	cc grpc.ClientConnInterface
}

func NewQueryClient(cc grpc.ClientConnInterface) QueryClient {
	return &queryClient{cc}
}

func (c *queryClient) TopupTxStatus(ctx context.Context, in *QuerySequenceParams, opts ...grpc.CallOption) (*QuerySequenceParamsResponse, error) {
	out := new(QuerySequenceParamsResponse)
	err := c.cc.Invoke(ctx, Query_TopupTxStatus_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) DividendAccountByAddress(ctx context.Context, in *QueryDividendAccountParams, opts ...grpc.CallOption) (*QueryDividendAccountParamsResponse, error) {
	out := new(QueryDividendAccountParamsResponse)
	err := c.cc.Invoke(ctx, Query_DividendAccountByAddress_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) DividendAccountRoot(ctx context.Context, in *QueryDividendAccountRootParams, opts ...grpc.CallOption) (*QueryDividendAccountRootResponse, error) {
	out := new(QueryDividendAccountRootResponse)
	err := c.cc.Invoke(ctx, Query_DividendAccountRoot_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) VerifyAccountProof(ctx context.Context, in *QueryVerifyAccountProofParams, opts ...grpc.CallOption) (*QueryVerifyAccountProofResponse, error) {
	out := new(QueryVerifyAccountProofResponse)
	err := c.cc.Invoke(ctx, Query_VerifyAccountProof_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) DividendAccountProof(ctx context.Context, in *QueryDividendAccountProofParams, opts ...grpc.CallOption) (*QueryDividendAccountProofResponse, error) {
	out := new(QueryDividendAccountProofResponse)
	err := c.cc.Invoke(ctx, Query_DividendAccountProof_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// QueryServer is the server API for Query service.
// All implementations must embed UnimplementedQueryServer
// for forward compatibility
type QueryServer interface {
	// TopupTxStatus queries for a specific topup tx to check its status (old
	// means already submitted)
	TopupTxStatus(context.Context, *QuerySequenceParams) (*QuerySequenceParamsResponse, error)
	// DividendAccountByAddress queries for a specific DividendAccount by its
	// address
	DividendAccountByAddress(context.Context, *QueryDividendAccountParams) (*QueryDividendAccountParamsResponse, error)
	// DividendAccountRoot queries for the dividend account of the genesis root
	// hash
	DividendAccountRoot(context.Context, *QueryDividendAccountRootParams) (*QueryDividendAccountRootResponse, error)
	// VerifyAccountProof queries for the dividend account of the genesis root
	// hash
	VerifyAccountProof(context.Context, *QueryVerifyAccountProofParams) (*QueryVerifyAccountProofResponse, error)
	// DividendAccountProof queries for the dividend account proof of a given
	// address
	DividendAccountProof(context.Context, *QueryDividendAccountProofParams) (*QueryDividendAccountProofResponse, error)
	mustEmbedUnimplementedQueryServer()
}

// UnimplementedQueryServer must be embedded to have forward compatible implementations.
type UnimplementedQueryServer struct {
}

func (UnimplementedQueryServer) TopupTxStatus(context.Context, *QuerySequenceParams) (*QuerySequenceParamsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TopupTxStatus not implemented")
}
func (UnimplementedQueryServer) DividendAccountByAddress(context.Context, *QueryDividendAccountParams) (*QueryDividendAccountParamsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DividendAccountByAddress not implemented")
}
func (UnimplementedQueryServer) DividendAccountRoot(context.Context, *QueryDividendAccountRootParams) (*QueryDividendAccountRootResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DividendAccountRoot not implemented")
}
func (UnimplementedQueryServer) VerifyAccountProof(context.Context, *QueryVerifyAccountProofParams) (*QueryVerifyAccountProofResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method VerifyAccountProof not implemented")
}
func (UnimplementedQueryServer) DividendAccountProof(context.Context, *QueryDividendAccountProofParams) (*QueryDividendAccountProofResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DividendAccountProof not implemented")
}
func (UnimplementedQueryServer) mustEmbedUnimplementedQueryServer() {}

// UnsafeQueryServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to QueryServer will
// result in compilation errors.
type UnsafeQueryServer interface {
	mustEmbedUnimplementedQueryServer()
}

func RegisterQueryServer(s grpc.ServiceRegistrar, srv QueryServer) {
	s.RegisterService(&Query_ServiceDesc, srv)
}

func _Query_TopupTxStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QuerySequenceParams)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).TopupTxStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Query_TopupTxStatus_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).TopupTxStatus(ctx, req.(*QuerySequenceParams))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_DividendAccountByAddress_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryDividendAccountParams)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).DividendAccountByAddress(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Query_DividendAccountByAddress_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).DividendAccountByAddress(ctx, req.(*QueryDividendAccountParams))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_DividendAccountRoot_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryDividendAccountRootParams)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).DividendAccountRoot(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Query_DividendAccountRoot_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).DividendAccountRoot(ctx, req.(*QueryDividendAccountRootParams))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_VerifyAccountProof_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryVerifyAccountProofParams)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).VerifyAccountProof(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Query_VerifyAccountProof_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).VerifyAccountProof(ctx, req.(*QueryVerifyAccountProofParams))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_DividendAccountProof_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryDividendAccountProofParams)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).DividendAccountProof(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Query_DividendAccountProof_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).DividendAccountProof(ctx, req.(*QueryDividendAccountProofParams))
	}
	return interceptor(ctx, in, info, handler)
}

// Query_ServiceDesc is the grpc.ServiceDesc for Query service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Query_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "heimdallv2.topup.Query",
	HandlerType: (*QueryServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "TopupTxStatus",
			Handler:    _Query_TopupTxStatus_Handler,
		},
		{
			MethodName: "DividendAccountByAddress",
			Handler:    _Query_DividendAccountByAddress_Handler,
		},
		{
			MethodName: "DividendAccountRoot",
			Handler:    _Query_DividendAccountRoot_Handler,
		},
		{
			MethodName: "VerifyAccountProof",
			Handler:    _Query_VerifyAccountProof_Handler,
		},
		{
			MethodName: "DividendAccountProof",
			Handler:    _Query_DividendAccountProof_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "heimdallv2/topup/query.proto",
}
