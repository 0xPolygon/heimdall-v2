// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             (unknown)
// source: heimdallv2/stake/query.proto

package stake

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	Query_GetCurrentValidatorSet_FullMethodName      = "/heimdallv2.stake.Query/GetCurrentValidatorSet"
	Query_GetSignerByAddress_FullMethodName          = "/heimdallv2.stake.Query/GetSignerByAddress"
	Query_GetValidatorById_FullMethodName            = "/heimdallv2.stake.Query/GetValidatorById"
	Query_GetValidatorStatusByAddress_FullMethodName = "/heimdallv2.stake.Query/GetValidatorStatusByAddress"
	Query_GetTotalPower_FullMethodName               = "/heimdallv2.stake.Query/GetTotalPower"
	Query_IsStakeTxOld_FullMethodName                = "/heimdallv2.stake.Query/IsStakeTxOld"
	Query_GetProposersByTimes_FullMethodName         = "/heimdallv2.stake.Query/GetProposersByTimes"
	Query_GetCurrentProposer_FullMethodName          = "/heimdallv2.stake.Query/GetCurrentProposer"
)

// QueryClient is the client API for Query service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type QueryClient interface {
	// GetCurrentValidatorSet queries for the current validator set
	GetCurrentValidatorSet(ctx context.Context, in *QueryCurrentValidatorSetRequest, opts ...grpc.CallOption) (*QueryCurrentValidatorSetResponse, error)
	// GetSignerByAddress queries validator info for a given validator address
	GetSignerByAddress(ctx context.Context, in *QuerySignerRequest, opts ...grpc.CallOption) (*QuerySignerResponse, error)
	// GetValidatorById queries validator info for a given validator id
	GetValidatorById(ctx context.Context, in *QueryValidatorRequest, opts ...grpc.CallOption) (*QueryValidatorResponse, error)
	// GetValidatorStatusByAddress queries validator status for given validator
	// val_address
	GetValidatorStatusByAddress(ctx context.Context, in *QueryValidatorStatusRequest, opts ...grpc.CallOption) (*QueryValidatorStatusResponse, error)
	// GetTotalPower queries the total power of a validator set
	GetTotalPower(ctx context.Context, in *QueryTotalPowerRequest, opts ...grpc.CallOption) (*QueryTotalPowerResponse, error)
	// IsStakeTxOld queries for the staking sequence
	IsStakeTxOld(ctx context.Context, in *QueryStakeIsOldTxRequest, opts ...grpc.CallOption) (*QueryStakeIsOldTxResponse, error)
	// GetProposersByTimes queries for the proposers by Tendermint iterations
	GetProposersByTimes(ctx context.Context, in *QueryProposersRequest, opts ...grpc.CallOption) (*QueryProposersResponse, error)
	// GetCurrentProposer queries validator info for the current proposer
	GetCurrentProposer(ctx context.Context, in *QueryCurrentProposerRequest, opts ...grpc.CallOption) (*QueryCurrentProposerResponse, error)
}

type queryClient struct {
	cc grpc.ClientConnInterface
}

func NewQueryClient(cc grpc.ClientConnInterface) QueryClient {
	return &queryClient{cc}
}

func (c *queryClient) GetCurrentValidatorSet(ctx context.Context, in *QueryCurrentValidatorSetRequest, opts ...grpc.CallOption) (*QueryCurrentValidatorSetResponse, error) {
	out := new(QueryCurrentValidatorSetResponse)
	err := c.cc.Invoke(ctx, Query_GetCurrentValidatorSet_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) GetSignerByAddress(ctx context.Context, in *QuerySignerRequest, opts ...grpc.CallOption) (*QuerySignerResponse, error) {
	out := new(QuerySignerResponse)
	err := c.cc.Invoke(ctx, Query_GetSignerByAddress_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) GetValidatorById(ctx context.Context, in *QueryValidatorRequest, opts ...grpc.CallOption) (*QueryValidatorResponse, error) {
	out := new(QueryValidatorResponse)
	err := c.cc.Invoke(ctx, Query_GetValidatorById_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) GetValidatorStatusByAddress(ctx context.Context, in *QueryValidatorStatusRequest, opts ...grpc.CallOption) (*QueryValidatorStatusResponse, error) {
	out := new(QueryValidatorStatusResponse)
	err := c.cc.Invoke(ctx, Query_GetValidatorStatusByAddress_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) GetTotalPower(ctx context.Context, in *QueryTotalPowerRequest, opts ...grpc.CallOption) (*QueryTotalPowerResponse, error) {
	out := new(QueryTotalPowerResponse)
	err := c.cc.Invoke(ctx, Query_GetTotalPower_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) IsStakeTxOld(ctx context.Context, in *QueryStakeIsOldTxRequest, opts ...grpc.CallOption) (*QueryStakeIsOldTxResponse, error) {
	out := new(QueryStakeIsOldTxResponse)
	err := c.cc.Invoke(ctx, Query_IsStakeTxOld_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) GetProposersByTimes(ctx context.Context, in *QueryProposersRequest, opts ...grpc.CallOption) (*QueryProposersResponse, error) {
	out := new(QueryProposersResponse)
	err := c.cc.Invoke(ctx, Query_GetProposersByTimes_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) GetCurrentProposer(ctx context.Context, in *QueryCurrentProposerRequest, opts ...grpc.CallOption) (*QueryCurrentProposerResponse, error) {
	out := new(QueryCurrentProposerResponse)
	err := c.cc.Invoke(ctx, Query_GetCurrentProposer_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// QueryServer is the server API for Query service.
// All implementations must embed UnimplementedQueryServer
// for forward compatibility
type QueryServer interface {
	// GetCurrentValidatorSet queries for the current validator set
	GetCurrentValidatorSet(context.Context, *QueryCurrentValidatorSetRequest) (*QueryCurrentValidatorSetResponse, error)
	// GetSignerByAddress queries validator info for a given validator address
	GetSignerByAddress(context.Context, *QuerySignerRequest) (*QuerySignerResponse, error)
	// GetValidatorById queries validator info for a given validator id
	GetValidatorById(context.Context, *QueryValidatorRequest) (*QueryValidatorResponse, error)
	// GetValidatorStatusByAddress queries validator status for given validator
	// val_address
	GetValidatorStatusByAddress(context.Context, *QueryValidatorStatusRequest) (*QueryValidatorStatusResponse, error)
	// GetTotalPower queries the total power of a validator set
	GetTotalPower(context.Context, *QueryTotalPowerRequest) (*QueryTotalPowerResponse, error)
	// IsStakeTxOld queries for the staking sequence
	IsStakeTxOld(context.Context, *QueryStakeIsOldTxRequest) (*QueryStakeIsOldTxResponse, error)
	// GetProposersByTimes queries for the proposers by Tendermint iterations
	GetProposersByTimes(context.Context, *QueryProposersRequest) (*QueryProposersResponse, error)
	// GetCurrentProposer queries validator info for the current proposer
	GetCurrentProposer(context.Context, *QueryCurrentProposerRequest) (*QueryCurrentProposerResponse, error)
	mustEmbedUnimplementedQueryServer()
}

// UnimplementedQueryServer must be embedded to have forward compatible implementations.
type UnimplementedQueryServer struct {
}

func (UnimplementedQueryServer) GetCurrentValidatorSet(context.Context, *QueryCurrentValidatorSetRequest) (*QueryCurrentValidatorSetResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCurrentValidatorSet not implemented")
}
func (UnimplementedQueryServer) GetSignerByAddress(context.Context, *QuerySignerRequest) (*QuerySignerResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSignerByAddress not implemented")
}
func (UnimplementedQueryServer) GetValidatorById(context.Context, *QueryValidatorRequest) (*QueryValidatorResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetValidatorById not implemented")
}
func (UnimplementedQueryServer) GetValidatorStatusByAddress(context.Context, *QueryValidatorStatusRequest) (*QueryValidatorStatusResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetValidatorStatusByAddress not implemented")
}
func (UnimplementedQueryServer) GetTotalPower(context.Context, *QueryTotalPowerRequest) (*QueryTotalPowerResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTotalPower not implemented")
}
func (UnimplementedQueryServer) IsStakeTxOld(context.Context, *QueryStakeIsOldTxRequest) (*QueryStakeIsOldTxResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method IsStakeTxOld not implemented")
}
func (UnimplementedQueryServer) GetProposersByTimes(context.Context, *QueryProposersRequest) (*QueryProposersResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetProposersByTimes not implemented")
}
func (UnimplementedQueryServer) GetCurrentProposer(context.Context, *QueryCurrentProposerRequest) (*QueryCurrentProposerResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCurrentProposer not implemented")
}
func (UnimplementedQueryServer) mustEmbedUnimplementedQueryServer() {}

// UnsafeQueryServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to QueryServer will
// result in compilation errors.
type UnsafeQueryServer interface {
	mustEmbedUnimplementedQueryServer()
}

func RegisterQueryServer(s grpc.ServiceRegistrar, srv QueryServer) {
	s.RegisterService(&Query_ServiceDesc, srv)
}

func _Query_GetCurrentValidatorSet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryCurrentValidatorSetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).GetCurrentValidatorSet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Query_GetCurrentValidatorSet_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).GetCurrentValidatorSet(ctx, req.(*QueryCurrentValidatorSetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_GetSignerByAddress_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QuerySignerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).GetSignerByAddress(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Query_GetSignerByAddress_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).GetSignerByAddress(ctx, req.(*QuerySignerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_GetValidatorById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryValidatorRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).GetValidatorById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Query_GetValidatorById_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).GetValidatorById(ctx, req.(*QueryValidatorRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_GetValidatorStatusByAddress_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryValidatorStatusRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).GetValidatorStatusByAddress(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Query_GetValidatorStatusByAddress_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).GetValidatorStatusByAddress(ctx, req.(*QueryValidatorStatusRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_GetTotalPower_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryTotalPowerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).GetTotalPower(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Query_GetTotalPower_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).GetTotalPower(ctx, req.(*QueryTotalPowerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_IsStakeTxOld_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryStakeIsOldTxRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).IsStakeTxOld(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Query_IsStakeTxOld_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).IsStakeTxOld(ctx, req.(*QueryStakeIsOldTxRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_GetProposersByTimes_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryProposersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).GetProposersByTimes(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Query_GetProposersByTimes_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).GetProposersByTimes(ctx, req.(*QueryProposersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_GetCurrentProposer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryCurrentProposerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).GetCurrentProposer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Query_GetCurrentProposer_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).GetCurrentProposer(ctx, req.(*QueryCurrentProposerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Query_ServiceDesc is the grpc.ServiceDesc for Query service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Query_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "heimdallv2.stake.Query",
	HandlerType: (*QueryServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetCurrentValidatorSet",
			Handler:    _Query_GetCurrentValidatorSet_Handler,
		},
		{
			MethodName: "GetSignerByAddress",
			Handler:    _Query_GetSignerByAddress_Handler,
		},
		{
			MethodName: "GetValidatorById",
			Handler:    _Query_GetValidatorById_Handler,
		},
		{
			MethodName: "GetValidatorStatusByAddress",
			Handler:    _Query_GetValidatorStatusByAddress_Handler,
		},
		{
			MethodName: "GetTotalPower",
			Handler:    _Query_GetTotalPower_Handler,
		},
		{
			MethodName: "IsStakeTxOld",
			Handler:    _Query_IsStakeTxOld_Handler,
		},
		{
			MethodName: "GetProposersByTimes",
			Handler:    _Query_GetProposersByTimes_Handler,
		},
		{
			MethodName: "GetCurrentProposer",
			Handler:    _Query_GetCurrentProposer_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "heimdallv2/stake/query.proto",
}
