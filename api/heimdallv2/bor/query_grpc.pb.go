// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             (unknown)
// source: heimdallv2/bor/query.proto

package bor

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	Query_GetSpanList_FullMethodName                   = "/heimdallv2.bor.Query/GetSpanList"
	Query_GetLatestSpan_FullMethodName                 = "/heimdallv2.bor.Query/GetLatestSpan"
	Query_GetNextSpanSeed_FullMethodName               = "/heimdallv2.bor.Query/GetNextSpanSeed"
	Query_GetNextSpan_FullMethodName                   = "/heimdallv2.bor.Query/GetNextSpan"
	Query_GetSpanById_FullMethodName                   = "/heimdallv2.bor.Query/GetSpanById"
	Query_GetBorParams_FullMethodName                  = "/heimdallv2.bor.Query/GetBorParams"
	Query_GetProducerVotes_FullMethodName              = "/heimdallv2.bor.Query/GetProducerVotes"
	Query_GetProducerVotesByValidatorId_FullMethodName = "/heimdallv2.bor.Query/GetProducerVotesByValidatorId"
)

// QueryClient is the client API for Query service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type QueryClient interface {
	// GetSpanList queries a list of spans.
	GetSpanList(ctx context.Context, in *QuerySpanListRequest, opts ...grpc.CallOption) (*QuerySpanListResponse, error)
	// GetLatestSpan queries the latest span.
	GetLatestSpan(ctx context.Context, in *QueryLatestSpanRequest, opts ...grpc.CallOption) (*QueryLatestSpanResponse, error)
	// GetNextSpanSeed queries the next span seed given a
	// QueryNextSpanSeedRequest.
	GetNextSpanSeed(ctx context.Context, in *QueryNextSpanSeedRequest, opts ...grpc.CallOption) (*QueryNextSpanSeedResponse, error)
	// GetNextSpan queries the next span given a QueryNextSpanRequest.
	GetNextSpan(ctx context.Context, in *QueryNextSpanRequest, opts ...grpc.CallOption) (*QueryNextSpanResponse, error)
	// GetSpanById retrieves a span by its id.
	GetSpanById(ctx context.Context, in *QuerySpanByIdRequest, opts ...grpc.CallOption) (*QuerySpanByIdResponse, error)
	// GetBorParams queries the parameters of x/bor module.
	GetBorParams(ctx context.Context, in *QueryParamsRequest, opts ...grpc.CallOption) (*QueryParamsResponse, error)
	// GetProducerVotes queries producer votes from all validators.
	GetProducerVotes(ctx context.Context, in *QueryProducerVotesRequest, opts ...grpc.CallOption) (*QueryProducerVotesResponse, error)
	// GetProducerVotesByValidatorId queries the producer votes for a given
	// validator id.
	GetProducerVotesByValidatorId(ctx context.Context, in *QueryProducerVotesByValidatorIdRequest, opts ...grpc.CallOption) (*QueryProducerVotesByValidatorIdResponse, error)
}

type queryClient struct {
	cc grpc.ClientConnInterface
}

func NewQueryClient(cc grpc.ClientConnInterface) QueryClient {
	return &queryClient{cc}
}

func (c *queryClient) GetSpanList(ctx context.Context, in *QuerySpanListRequest, opts ...grpc.CallOption) (*QuerySpanListResponse, error) {
	out := new(QuerySpanListResponse)
	err := c.cc.Invoke(ctx, Query_GetSpanList_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) GetLatestSpan(ctx context.Context, in *QueryLatestSpanRequest, opts ...grpc.CallOption) (*QueryLatestSpanResponse, error) {
	out := new(QueryLatestSpanResponse)
	err := c.cc.Invoke(ctx, Query_GetLatestSpan_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) GetNextSpanSeed(ctx context.Context, in *QueryNextSpanSeedRequest, opts ...grpc.CallOption) (*QueryNextSpanSeedResponse, error) {
	out := new(QueryNextSpanSeedResponse)
	err := c.cc.Invoke(ctx, Query_GetNextSpanSeed_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) GetNextSpan(ctx context.Context, in *QueryNextSpanRequest, opts ...grpc.CallOption) (*QueryNextSpanResponse, error) {
	out := new(QueryNextSpanResponse)
	err := c.cc.Invoke(ctx, Query_GetNextSpan_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) GetSpanById(ctx context.Context, in *QuerySpanByIdRequest, opts ...grpc.CallOption) (*QuerySpanByIdResponse, error) {
	out := new(QuerySpanByIdResponse)
	err := c.cc.Invoke(ctx, Query_GetSpanById_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) GetBorParams(ctx context.Context, in *QueryParamsRequest, opts ...grpc.CallOption) (*QueryParamsResponse, error) {
	out := new(QueryParamsResponse)
	err := c.cc.Invoke(ctx, Query_GetBorParams_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) GetProducerVotes(ctx context.Context, in *QueryProducerVotesRequest, opts ...grpc.CallOption) (*QueryProducerVotesResponse, error) {
	out := new(QueryProducerVotesResponse)
	err := c.cc.Invoke(ctx, Query_GetProducerVotes_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) GetProducerVotesByValidatorId(ctx context.Context, in *QueryProducerVotesByValidatorIdRequest, opts ...grpc.CallOption) (*QueryProducerVotesByValidatorIdResponse, error) {
	out := new(QueryProducerVotesByValidatorIdResponse)
	err := c.cc.Invoke(ctx, Query_GetProducerVotesByValidatorId_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// QueryServer is the server API for Query service.
// All implementations must embed UnimplementedQueryServer
// for forward compatibility
type QueryServer interface {
	// GetSpanList queries a list of spans.
	GetSpanList(context.Context, *QuerySpanListRequest) (*QuerySpanListResponse, error)
	// GetLatestSpan queries the latest span.
	GetLatestSpan(context.Context, *QueryLatestSpanRequest) (*QueryLatestSpanResponse, error)
	// GetNextSpanSeed queries the next span seed given a
	// QueryNextSpanSeedRequest.
	GetNextSpanSeed(context.Context, *QueryNextSpanSeedRequest) (*QueryNextSpanSeedResponse, error)
	// GetNextSpan queries the next span given a QueryNextSpanRequest.
	GetNextSpan(context.Context, *QueryNextSpanRequest) (*QueryNextSpanResponse, error)
	// GetSpanById retrieves a span by its id.
	GetSpanById(context.Context, *QuerySpanByIdRequest) (*QuerySpanByIdResponse, error)
	// GetBorParams queries the parameters of x/bor module.
	GetBorParams(context.Context, *QueryParamsRequest) (*QueryParamsResponse, error)
	// GetProducerVotes queries producer votes from all validators.
	GetProducerVotes(context.Context, *QueryProducerVotesRequest) (*QueryProducerVotesResponse, error)
	// GetProducerVotesByValidatorId queries the producer votes for a given
	// validator id.
	GetProducerVotesByValidatorId(context.Context, *QueryProducerVotesByValidatorIdRequest) (*QueryProducerVotesByValidatorIdResponse, error)
	mustEmbedUnimplementedQueryServer()
}

// UnimplementedQueryServer must be embedded to have forward compatible implementations.
type UnimplementedQueryServer struct {
}

func (UnimplementedQueryServer) GetSpanList(context.Context, *QuerySpanListRequest) (*QuerySpanListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSpanList not implemented")
}
func (UnimplementedQueryServer) GetLatestSpan(context.Context, *QueryLatestSpanRequest) (*QueryLatestSpanResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetLatestSpan not implemented")
}
func (UnimplementedQueryServer) GetNextSpanSeed(context.Context, *QueryNextSpanSeedRequest) (*QueryNextSpanSeedResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetNextSpanSeed not implemented")
}
func (UnimplementedQueryServer) GetNextSpan(context.Context, *QueryNextSpanRequest) (*QueryNextSpanResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetNextSpan not implemented")
}
func (UnimplementedQueryServer) GetSpanById(context.Context, *QuerySpanByIdRequest) (*QuerySpanByIdResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSpanById not implemented")
}
func (UnimplementedQueryServer) GetBorParams(context.Context, *QueryParamsRequest) (*QueryParamsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBorParams not implemented")
}
func (UnimplementedQueryServer) GetProducerVotes(context.Context, *QueryProducerVotesRequest) (*QueryProducerVotesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetProducerVotes not implemented")
}
func (UnimplementedQueryServer) GetProducerVotesByValidatorId(context.Context, *QueryProducerVotesByValidatorIdRequest) (*QueryProducerVotesByValidatorIdResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetProducerVotesByValidatorId not implemented")
}
func (UnimplementedQueryServer) mustEmbedUnimplementedQueryServer() {}

// UnsafeQueryServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to QueryServer will
// result in compilation errors.
type UnsafeQueryServer interface {
	mustEmbedUnimplementedQueryServer()
}

func RegisterQueryServer(s grpc.ServiceRegistrar, srv QueryServer) {
	s.RegisterService(&Query_ServiceDesc, srv)
}

func _Query_GetSpanList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QuerySpanListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).GetSpanList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Query_GetSpanList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).GetSpanList(ctx, req.(*QuerySpanListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_GetLatestSpan_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryLatestSpanRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).GetLatestSpan(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Query_GetLatestSpan_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).GetLatestSpan(ctx, req.(*QueryLatestSpanRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_GetNextSpanSeed_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryNextSpanSeedRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).GetNextSpanSeed(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Query_GetNextSpanSeed_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).GetNextSpanSeed(ctx, req.(*QueryNextSpanSeedRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_GetNextSpan_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryNextSpanRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).GetNextSpan(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Query_GetNextSpan_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).GetNextSpan(ctx, req.(*QueryNextSpanRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_GetSpanById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QuerySpanByIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).GetSpanById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Query_GetSpanById_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).GetSpanById(ctx, req.(*QuerySpanByIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_GetBorParams_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryParamsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).GetBorParams(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Query_GetBorParams_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).GetBorParams(ctx, req.(*QueryParamsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_GetProducerVotes_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryProducerVotesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).GetProducerVotes(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Query_GetProducerVotes_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).GetProducerVotes(ctx, req.(*QueryProducerVotesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_GetProducerVotesByValidatorId_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryProducerVotesByValidatorIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).GetProducerVotesByValidatorId(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Query_GetProducerVotesByValidatorId_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).GetProducerVotesByValidatorId(ctx, req.(*QueryProducerVotesByValidatorIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Query_ServiceDesc is the grpc.ServiceDesc for Query service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Query_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "heimdallv2.bor.Query",
	HandlerType: (*QueryServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetSpanList",
			Handler:    _Query_GetSpanList_Handler,
		},
		{
			MethodName: "GetLatestSpan",
			Handler:    _Query_GetLatestSpan_Handler,
		},
		{
			MethodName: "GetNextSpanSeed",
			Handler:    _Query_GetNextSpanSeed_Handler,
		},
		{
			MethodName: "GetNextSpan",
			Handler:    _Query_GetNextSpan_Handler,
		},
		{
			MethodName: "GetSpanById",
			Handler:    _Query_GetSpanById_Handler,
		},
		{
			MethodName: "GetBorParams",
			Handler:    _Query_GetBorParams_Handler,
		},
		{
			MethodName: "GetProducerVotes",
			Handler:    _Query_GetProducerVotes_Handler,
		},
		{
			MethodName: "GetProducerVotesByValidatorId",
			Handler:    _Query_GetProducerVotesByValidatorId_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "heimdallv2/bor/query.proto",
}
