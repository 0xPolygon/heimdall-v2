// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             (unknown)
// source: heimdallv2/milestone/query.proto

package milestone

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	Query_Params_FullMethodName               = "/heimdallv2.milestone.Query/Params"
	Query_Count_FullMethodName                = "/heimdallv2.milestone.Query/Count"
	Query_LatestMilestone_FullMethodName      = "/heimdallv2.milestone.Query/LatestMilestone"
	Query_Milestone_FullMethodName            = "/heimdallv2.milestone.Query/Milestone"
	Query_LatestNoAckMilestone_FullMethodName = "/heimdallv2.milestone.Query/LatestNoAckMilestone"
	Query_NoAckMilestoneByID_FullMethodName   = "/heimdallv2.milestone.Query/NoAckMilestoneByID"
	Query_MilestoneProposer_FullMethodName    = "/heimdallv2.milestone.Query/MilestoneProposer"
)

// QueryClient is the client API for Query service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type QueryClient interface {
	// Params queries for the milestone parameters
	Params(ctx context.Context, in *QueryParamsRequest, opts ...grpc.CallOption) (*QueryParamsResponse, error)
	// Count queries for the milestone count
	Count(ctx context.Context, in *QueryCountRequest, opts ...grpc.CallOption) (*QueryCountResponse, error)
	// LatestMilestone queries for the latest milestone
	LatestMilestone(ctx context.Context, in *QueryLatestMilestoneRequest, opts ...grpc.CallOption) (*QueryLatestMilestoneResponse, error)
	// Milestone queries for the milestone based on the number
	Milestone(ctx context.Context, in *QueryMilestoneRequest, opts ...grpc.CallOption) (*QueryMilestoneResponse, error)
	// LatestNoAckMilestone query for the LatestNoAck
	LatestNoAckMilestone(ctx context.Context, in *QueryLatestNoAckMilestoneRequest, opts ...grpc.CallOption) (*QueryLatestNoAckMilestoneResponse, error)
	// NoAckMilestoneByID query for the no-ack by ID
	NoAckMilestoneByID(ctx context.Context, in *QueryNoAckMilestoneByIDRequest, opts ...grpc.CallOption) (*QueryNoAckMilestoneByIDResponse, error)
	// MilestoneProposer queries for the milestone proposer
	MilestoneProposer(ctx context.Context, in *QueryMilestoneProposerRequest, opts ...grpc.CallOption) (*QueryMilestoneProposerResponse, error)
}

type queryClient struct {
	cc grpc.ClientConnInterface
}

func NewQueryClient(cc grpc.ClientConnInterface) QueryClient {
	return &queryClient{cc}
}

func (c *queryClient) Params(ctx context.Context, in *QueryParamsRequest, opts ...grpc.CallOption) (*QueryParamsResponse, error) {
	out := new(QueryParamsResponse)
	err := c.cc.Invoke(ctx, Query_Params_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) Count(ctx context.Context, in *QueryCountRequest, opts ...grpc.CallOption) (*QueryCountResponse, error) {
	out := new(QueryCountResponse)
	err := c.cc.Invoke(ctx, Query_Count_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) LatestMilestone(ctx context.Context, in *QueryLatestMilestoneRequest, opts ...grpc.CallOption) (*QueryLatestMilestoneResponse, error) {
	out := new(QueryLatestMilestoneResponse)
	err := c.cc.Invoke(ctx, Query_LatestMilestone_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) Milestone(ctx context.Context, in *QueryMilestoneRequest, opts ...grpc.CallOption) (*QueryMilestoneResponse, error) {
	out := new(QueryMilestoneResponse)
	err := c.cc.Invoke(ctx, Query_Milestone_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) LatestNoAckMilestone(ctx context.Context, in *QueryLatestNoAckMilestoneRequest, opts ...grpc.CallOption) (*QueryLatestNoAckMilestoneResponse, error) {
	out := new(QueryLatestNoAckMilestoneResponse)
	err := c.cc.Invoke(ctx, Query_LatestNoAckMilestone_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) NoAckMilestoneByID(ctx context.Context, in *QueryNoAckMilestoneByIDRequest, opts ...grpc.CallOption) (*QueryNoAckMilestoneByIDResponse, error) {
	out := new(QueryNoAckMilestoneByIDResponse)
	err := c.cc.Invoke(ctx, Query_NoAckMilestoneByID_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) MilestoneProposer(ctx context.Context, in *QueryMilestoneProposerRequest, opts ...grpc.CallOption) (*QueryMilestoneProposerResponse, error) {
	out := new(QueryMilestoneProposerResponse)
	err := c.cc.Invoke(ctx, Query_MilestoneProposer_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// QueryServer is the server API for Query service.
// All implementations must embed UnimplementedQueryServer
// for forward compatibility
type QueryServer interface {
	// Params queries for the milestone parameters
	Params(context.Context, *QueryParamsRequest) (*QueryParamsResponse, error)
	// Count queries for the milestone count
	Count(context.Context, *QueryCountRequest) (*QueryCountResponse, error)
	// LatestMilestone queries for the latest milestone
	LatestMilestone(context.Context, *QueryLatestMilestoneRequest) (*QueryLatestMilestoneResponse, error)
	// Milestone queries for the milestone based on the number
	Milestone(context.Context, *QueryMilestoneRequest) (*QueryMilestoneResponse, error)
	// LatestNoAckMilestone query for the LatestNoAck
	LatestNoAckMilestone(context.Context, *QueryLatestNoAckMilestoneRequest) (*QueryLatestNoAckMilestoneResponse, error)
	// NoAckMilestoneByID query for the no-ack by ID
	NoAckMilestoneByID(context.Context, *QueryNoAckMilestoneByIDRequest) (*QueryNoAckMilestoneByIDResponse, error)
	// MilestoneProposer queries for the milestone proposer
	MilestoneProposer(context.Context, *QueryMilestoneProposerRequest) (*QueryMilestoneProposerResponse, error)
	mustEmbedUnimplementedQueryServer()
}

// UnimplementedQueryServer must be embedded to have forward compatible implementations.
type UnimplementedQueryServer struct {
}

func (UnimplementedQueryServer) Params(context.Context, *QueryParamsRequest) (*QueryParamsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Params not implemented")
}
func (UnimplementedQueryServer) Count(context.Context, *QueryCountRequest) (*QueryCountResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Count not implemented")
}
func (UnimplementedQueryServer) LatestMilestone(context.Context, *QueryLatestMilestoneRequest) (*QueryLatestMilestoneResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LatestMilestone not implemented")
}
func (UnimplementedQueryServer) Milestone(context.Context, *QueryMilestoneRequest) (*QueryMilestoneResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Milestone not implemented")
}
func (UnimplementedQueryServer) LatestNoAckMilestone(context.Context, *QueryLatestNoAckMilestoneRequest) (*QueryLatestNoAckMilestoneResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LatestNoAckMilestone not implemented")
}
func (UnimplementedQueryServer) NoAckMilestoneByID(context.Context, *QueryNoAckMilestoneByIDRequest) (*QueryNoAckMilestoneByIDResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method NoAckMilestoneByID not implemented")
}
func (UnimplementedQueryServer) MilestoneProposer(context.Context, *QueryMilestoneProposerRequest) (*QueryMilestoneProposerResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MilestoneProposer not implemented")
}
func (UnimplementedQueryServer) mustEmbedUnimplementedQueryServer() {}

// UnsafeQueryServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to QueryServer will
// result in compilation errors.
type UnsafeQueryServer interface {
	mustEmbedUnimplementedQueryServer()
}

func RegisterQueryServer(s grpc.ServiceRegistrar, srv QueryServer) {
	s.RegisterService(&Query_ServiceDesc, srv)
}

func _Query_Params_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryParamsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).Params(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Query_Params_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).Params(ctx, req.(*QueryParamsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_Count_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryCountRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).Count(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Query_Count_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).Count(ctx, req.(*QueryCountRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_LatestMilestone_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryLatestMilestoneRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).LatestMilestone(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Query_LatestMilestone_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).LatestMilestone(ctx, req.(*QueryLatestMilestoneRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_Milestone_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryMilestoneRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).Milestone(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Query_Milestone_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).Milestone(ctx, req.(*QueryMilestoneRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_LatestNoAckMilestone_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryLatestNoAckMilestoneRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).LatestNoAckMilestone(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Query_LatestNoAckMilestone_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).LatestNoAckMilestone(ctx, req.(*QueryLatestNoAckMilestoneRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_NoAckMilestoneByID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryNoAckMilestoneByIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).NoAckMilestoneByID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Query_NoAckMilestoneByID_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).NoAckMilestoneByID(ctx, req.(*QueryNoAckMilestoneByIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_MilestoneProposer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryMilestoneProposerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).MilestoneProposer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Query_MilestoneProposer_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).MilestoneProposer(ctx, req.(*QueryMilestoneProposerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Query_ServiceDesc is the grpc.ServiceDesc for Query service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Query_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "heimdallv2.milestone.Query",
	HandlerType: (*QueryServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Params",
			Handler:    _Query_Params_Handler,
		},
		{
			MethodName: "Count",
			Handler:    _Query_Count_Handler,
		},
		{
			MethodName: "LatestMilestone",
			Handler:    _Query_LatestMilestone_Handler,
		},
		{
			MethodName: "Milestone",
			Handler:    _Query_Milestone_Handler,
		},
		{
			MethodName: "LatestNoAckMilestone",
			Handler:    _Query_LatestNoAckMilestone_Handler,
		},
		{
			MethodName: "NoAckMilestoneByID",
			Handler:    _Query_NoAckMilestoneByID_Handler,
		},
		{
			MethodName: "MilestoneProposer",
			Handler:    _Query_MilestoneProposer_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "heimdallv2/milestone/query.proto",
}
