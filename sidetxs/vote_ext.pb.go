// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: heimdallv2/sidetxs/vote_ext.proto

package sidetxs

import (
	bytes "bytes"
	fmt "fmt"
	_ "github.com/cosmos/cosmos-sdk/types/tx/amino"
	_ "github.com/cosmos/gogoproto/gogoproto"
	proto "github.com/cosmos/gogoproto/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type Vote int32

const (
	Vote_UNSPECIFIED Vote = 0
	Vote_VOTE_YES    Vote = 1
	Vote_VOTE_NO     Vote = 2
)

var Vote_name = map[int32]string{
	0: "UNSPECIFIED",
	1: "VOTE_YES",
	2: "VOTE_NO",
}

var Vote_value = map[string]int32{
	"UNSPECIFIED": 0,
	"VOTE_YES":    1,
	"VOTE_NO":     2,
}

func (x Vote) String() string {
	return proto.EnumName(Vote_name, int32(x))
}

func (Vote) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_75911ad509cf3b3b, []int{0}
}

type VoteExtension struct {
	ConsolidatedSideTxResponse *ConsolidatedSideTxResponse `protobuf:"bytes,1,opt,name=consolidated_side_tx_response,json=consolidatedSideTxResponse,proto3" json:"consolidated_side_tx_response,omitempty"`
	MilestoneProposition       *MilestoneProposition       `protobuf:"bytes,2,opt,name=milestone_proposition,json=milestoneProposition,proto3" json:"milestone_proposition,omitempty"`
}

func (m *VoteExtension) Reset()         { *m = VoteExtension{} }
func (m *VoteExtension) String() string { return proto.CompactTextString(m) }
func (*VoteExtension) ProtoMessage()    {}
func (*VoteExtension) Descriptor() ([]byte, []int) {
	return fileDescriptor_75911ad509cf3b3b, []int{0}
}
func (m *VoteExtension) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *VoteExtension) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_VoteExtension.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *VoteExtension) XXX_Merge(src proto.Message) {
	xxx_messageInfo_VoteExtension.Merge(m, src)
}
func (m *VoteExtension) XXX_Size() int {
	return m.Size()
}
func (m *VoteExtension) XXX_DiscardUnknown() {
	xxx_messageInfo_VoteExtension.DiscardUnknown(m)
}

var xxx_messageInfo_VoteExtension proto.InternalMessageInfo

func (m *VoteExtension) GetConsolidatedSideTxResponse() *ConsolidatedSideTxResponse {
	if m != nil {
		return m.ConsolidatedSideTxResponse
	}
	return nil
}

func (m *VoteExtension) GetMilestoneProposition() *MilestoneProposition {
	if m != nil {
		return m.MilestoneProposition
	}
	return nil
}

type MilestoneProposition struct {
	BlockHash []byte `protobuf:"bytes,1,opt,name=block_hash,json=blockHash,proto3" json:"block_hash,omitempty"`
}

func (m *MilestoneProposition) Reset()         { *m = MilestoneProposition{} }
func (m *MilestoneProposition) String() string { return proto.CompactTextString(m) }
func (*MilestoneProposition) ProtoMessage()    {}
func (*MilestoneProposition) Descriptor() ([]byte, []int) {
	return fileDescriptor_75911ad509cf3b3b, []int{1}
}
func (m *MilestoneProposition) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MilestoneProposition) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MilestoneProposition.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MilestoneProposition) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MilestoneProposition.Merge(m, src)
}
func (m *MilestoneProposition) XXX_Size() int {
	return m.Size()
}
func (m *MilestoneProposition) XXX_DiscardUnknown() {
	xxx_messageInfo_MilestoneProposition.DiscardUnknown(m)
}

var xxx_messageInfo_MilestoneProposition proto.InternalMessageInfo

func (m *MilestoneProposition) GetBlockHash() []byte {
	if m != nil {
		return m.BlockHash
	}
	return nil
}

type ConsolidatedSideTxResponse struct {
	SideTxResponses []SideTxResponse `protobuf:"bytes,1,rep,name=side_tx_responses,json=sideTxResponses,proto3" json:"side_tx_responses"`
	BlockHash       []byte           `protobuf:"bytes,2,opt,name=block_hash,json=blockHash,proto3" json:"block_hash,omitempty"`
	Height          int64            `protobuf:"varint,3,opt,name=height,proto3" json:"height,omitempty"`
}

func (m *ConsolidatedSideTxResponse) Reset()         { *m = ConsolidatedSideTxResponse{} }
func (m *ConsolidatedSideTxResponse) String() string { return proto.CompactTextString(m) }
func (*ConsolidatedSideTxResponse) ProtoMessage()    {}
func (*ConsolidatedSideTxResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_75911ad509cf3b3b, []int{2}
}
func (m *ConsolidatedSideTxResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ConsolidatedSideTxResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ConsolidatedSideTxResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ConsolidatedSideTxResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ConsolidatedSideTxResponse.Merge(m, src)
}
func (m *ConsolidatedSideTxResponse) XXX_Size() int {
	return m.Size()
}
func (m *ConsolidatedSideTxResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_ConsolidatedSideTxResponse.DiscardUnknown(m)
}

var xxx_messageInfo_ConsolidatedSideTxResponse proto.InternalMessageInfo

func (m *ConsolidatedSideTxResponse) GetSideTxResponses() []SideTxResponse {
	if m != nil {
		return m.SideTxResponses
	}
	return nil
}

func (m *ConsolidatedSideTxResponse) GetBlockHash() []byte {
	if m != nil {
		return m.BlockHash
	}
	return nil
}

func (m *ConsolidatedSideTxResponse) GetHeight() int64 {
	if m != nil {
		return m.Height
	}
	return 0
}

type SideTxResponse struct {
	TxHash []byte `protobuf:"bytes,1,opt,name=tx_hash,json=txHash,proto3" json:"tx_hash,omitempty"`
	Result Vote   `protobuf:"varint,2,opt,name=result,proto3,enum=heimdallv2.sidetxs.Vote" json:"result,omitempty"`
}

func (m *SideTxResponse) Reset()         { *m = SideTxResponse{} }
func (m *SideTxResponse) String() string { return proto.CompactTextString(m) }
func (*SideTxResponse) ProtoMessage()    {}
func (*SideTxResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_75911ad509cf3b3b, []int{3}
}
func (m *SideTxResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SideTxResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SideTxResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SideTxResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SideTxResponse.Merge(m, src)
}
func (m *SideTxResponse) XXX_Size() int {
	return m.Size()
}
func (m *SideTxResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_SideTxResponse.DiscardUnknown(m)
}

var xxx_messageInfo_SideTxResponse proto.InternalMessageInfo

func (m *SideTxResponse) GetTxHash() []byte {
	if m != nil {
		return m.TxHash
	}
	return nil
}

func (m *SideTxResponse) GetResult() Vote {
	if m != nil {
		return m.Result
	}
	return Vote_UNSPECIFIED
}

func init() {
	proto.RegisterEnum("heimdallv2.sidetxs.Vote", Vote_name, Vote_value)
	proto.RegisterType((*VoteExtension)(nil), "heimdallv2.sidetxs.VoteExtension")
	proto.RegisterType((*MilestoneProposition)(nil), "heimdallv2.sidetxs.MilestoneProposition")
	proto.RegisterType((*ConsolidatedSideTxResponse)(nil), "heimdallv2.sidetxs.ConsolidatedSideTxResponse")
	proto.RegisterType((*SideTxResponse)(nil), "heimdallv2.sidetxs.SideTxResponse")
}

func init() { proto.RegisterFile("heimdallv2/sidetxs/vote_ext.proto", fileDescriptor_75911ad509cf3b3b) }

var fileDescriptor_75911ad509cf3b3b = []byte{
	// 472 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x74, 0x53, 0xc1, 0x6e, 0xd3, 0x40,
	0x10, 0xf5, 0x26, 0x90, 0xb6, 0x93, 0xd2, 0xa6, 0xab, 0x20, 0x59, 0x91, 0xea, 0x04, 0x8b, 0x83,
	0x55, 0x09, 0x1b, 0x99, 0x03, 0x12, 0xc7, 0x14, 0x57, 0xf4, 0x40, 0x1b, 0x35, 0xa5, 0x52, 0xb9,
	0x58, 0x4e, 0xbc, 0xb2, 0x57, 0xd8, 0x9e, 0x28, 0xbb, 0xad, 0xcc, 0x1f, 0x70, 0xe4, 0x13, 0x7a,
	0xe4, 0xc8, 0x07, 0xf0, 0x01, 0x3d, 0xf6, 0xc8, 0x09, 0xa1, 0xe4, 0x00, 0x37, 0x7e, 0x01, 0x65,
	0x13, 0x13, 0x08, 0xce, 0xc5, 0x5a, 0xcf, 0xbc, 0x37, 0xef, 0xbd, 0xd5, 0x2c, 0x3c, 0x8a, 0x19,
	0x4f, 0xc3, 0x20, 0x49, 0xae, 0x5d, 0x47, 0xf0, 0x90, 0xc9, 0x5c, 0x38, 0xd7, 0x28, 0x99, 0xcf,
	0x72, 0x69, 0x8f, 0xc6, 0x28, 0x91, 0xd2, 0x25, 0xc4, 0x5e, 0x40, 0x5a, 0x7b, 0x41, 0xca, 0x33,
	0x74, 0xd4, 0x77, 0x0e, 0x6b, 0x35, 0x23, 0x8c, 0x50, 0x1d, 0x9d, 0xd9, 0x69, 0x5e, 0x35, 0x7f,
	0x11, 0x78, 0x70, 0x81, 0x92, 0x79, 0xb9, 0x64, 0x99, 0xe0, 0x98, 0xd1, 0x1c, 0xf6, 0x87, 0x98,
	0x09, 0x4c, 0x78, 0x18, 0x48, 0x16, 0xfa, 0xb3, 0x91, 0xbe, 0xcc, 0xfd, 0x31, 0x13, 0x23, 0xcc,
	0x04, 0xd3, 0x49, 0x87, 0x58, 0x75, 0xd7, 0xb6, 0xff, 0x97, 0xb5, 0x0f, 0xff, 0x22, 0xf6, 0x79,
	0xc8, 0xce, 0xf3, 0xb3, 0x05, 0xab, 0x7b, 0xff, 0xd3, 0x8f, 0xcf, 0x07, 0xe4, 0xac, 0x35, 0x5c,
	0x0b, 0xa1, 0x21, 0x3c, 0x4c, 0x79, 0xc2, 0x84, 0xc4, 0x8c, 0xf9, 0xa3, 0x31, 0x8e, 0x50, 0x70,
	0xc9, 0x31, 0xd3, 0x2b, 0x4a, 0xd1, 0x2a, 0x53, 0x7c, 0x5d, 0x10, 0x7a, 0x4b, 0x7c, 0xa1, 0xd5,
	0x4c, 0x4b, 0x9a, 0xe6, 0x11, 0x34, 0xcb, 0x48, 0xf4, 0x31, 0xc0, 0x20, 0xc1, 0xe1, 0x3b, 0x3f,
	0x0e, 0x44, 0xac, 0x42, 0x6e, 0x17, 0x83, 0xb6, 0x54, 0xe3, 0x55, 0x20, 0xe2, 0x17, 0x9b, 0x1f,
	0x6e, 0xda, 0xe4, 0xe7, 0x4d, 0x9b, 0x98, 0x5f, 0x08, 0xb4, 0xd6, 0xe7, 0xa5, 0x97, 0xb0, 0xb7,
	0x7a, 0x73, 0x42, 0x27, 0x9d, 0xaa, 0x55, 0x77, 0xcd, 0xb2, 0x20, 0x2b, 0xd7, 0xb5, 0x75, 0xfb,
	0xad, 0xad, 0xcd, 0xd5, 0x77, 0xc5, 0x3f, 0x2d, 0xb1, 0xe2, 0xb4, 0x52, 0xee, 0x94, 0xee, 0x43,
	0x2d, 0x66, 0x3c, 0x8a, 0xa5, 0x5e, 0xed, 0x10, 0xab, 0x5a, 0x20, 0x16, 0x45, 0x93, 0xc3, 0xce,
	0x8a, 0x63, 0x03, 0x36, 0x64, 0x5e, 0x92, 0xbe, 0x26, 0x73, 0x35, 0xf0, 0x39, 0xd4, 0xc6, 0x4c,
	0x5c, 0x25, 0x52, 0x49, 0xee, 0xb8, 0x7a, 0x59, 0x8c, 0xd9, 0x2e, 0xfd, 0x21, 0xce, 0xe1, 0x07,
	0x2e, 0xdc, 0x9b, 0x95, 0xe9, 0x2e, 0xd4, 0xdf, 0x9c, 0xf4, 0x7b, 0xde, 0xe1, 0xf1, 0xd1, 0xb1,
	0xf7, 0xb2, 0xa1, 0xd1, 0x6d, 0xd8, 0xbc, 0x38, 0x3d, 0xf7, 0xfc, 0x4b, 0xaf, 0xdf, 0x20, 0xb4,
	0x0e, 0x1b, 0xea, 0xef, 0xe4, 0xb4, 0x51, 0xe9, 0x76, 0x6f, 0x27, 0x06, 0xb9, 0x9b, 0x18, 0xe4,
	0xfb, 0xc4, 0x20, 0x1f, 0xa7, 0x86, 0x76, 0x37, 0x35, 0xb4, 0xaf, 0x53, 0x43, 0x7b, 0x6b, 0x45,
	0x5c, 0xc6, 0x57, 0x03, 0x7b, 0x88, 0xa9, 0xf3, 0x34, 0xef, 0x61, 0xf2, 0x3e, 0xc2, 0xcc, 0x29,
	0xac, 0x3c, 0x59, 0xbe, 0x93, 0x41, 0x4d, 0xad, 0xf8, 0xb3, 0xdf, 0x01, 0x00, 0x00, 0xff, 0xff,
	0xa1, 0x65, 0x73, 0x63, 0x44, 0x03, 0x00, 0x00,
}

func (this *MilestoneProposition) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*MilestoneProposition)
	if !ok {
		that2, ok := that.(MilestoneProposition)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !bytes.Equal(this.BlockHash, that1.BlockHash) {
		return false
	}
	return true
}
func (m *VoteExtension) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *VoteExtension) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *VoteExtension) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.MilestoneProposition != nil {
		{
			size, err := m.MilestoneProposition.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintVoteExt(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.ConsolidatedSideTxResponse != nil {
		{
			size, err := m.ConsolidatedSideTxResponse.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintVoteExt(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MilestoneProposition) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MilestoneProposition) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MilestoneProposition) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.BlockHash) > 0 {
		i -= len(m.BlockHash)
		copy(dAtA[i:], m.BlockHash)
		i = encodeVarintVoteExt(dAtA, i, uint64(len(m.BlockHash)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ConsolidatedSideTxResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ConsolidatedSideTxResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ConsolidatedSideTxResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Height != 0 {
		i = encodeVarintVoteExt(dAtA, i, uint64(m.Height))
		i--
		dAtA[i] = 0x18
	}
	if len(m.BlockHash) > 0 {
		i -= len(m.BlockHash)
		copy(dAtA[i:], m.BlockHash)
		i = encodeVarintVoteExt(dAtA, i, uint64(len(m.BlockHash)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.SideTxResponses) > 0 {
		for iNdEx := len(m.SideTxResponses) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.SideTxResponses[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintVoteExt(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *SideTxResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SideTxResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SideTxResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Result != 0 {
		i = encodeVarintVoteExt(dAtA, i, uint64(m.Result))
		i--
		dAtA[i] = 0x10
	}
	if len(m.TxHash) > 0 {
		i -= len(m.TxHash)
		copy(dAtA[i:], m.TxHash)
		i = encodeVarintVoteExt(dAtA, i, uint64(len(m.TxHash)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintVoteExt(dAtA []byte, offset int, v uint64) int {
	offset -= sovVoteExt(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *VoteExtension) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ConsolidatedSideTxResponse != nil {
		l = m.ConsolidatedSideTxResponse.Size()
		n += 1 + l + sovVoteExt(uint64(l))
	}
	if m.MilestoneProposition != nil {
		l = m.MilestoneProposition.Size()
		n += 1 + l + sovVoteExt(uint64(l))
	}
	return n
}

func (m *MilestoneProposition) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.BlockHash)
	if l > 0 {
		n += 1 + l + sovVoteExt(uint64(l))
	}
	return n
}

func (m *ConsolidatedSideTxResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.SideTxResponses) > 0 {
		for _, e := range m.SideTxResponses {
			l = e.Size()
			n += 1 + l + sovVoteExt(uint64(l))
		}
	}
	l = len(m.BlockHash)
	if l > 0 {
		n += 1 + l + sovVoteExt(uint64(l))
	}
	if m.Height != 0 {
		n += 1 + sovVoteExt(uint64(m.Height))
	}
	return n
}

func (m *SideTxResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.TxHash)
	if l > 0 {
		n += 1 + l + sovVoteExt(uint64(l))
	}
	if m.Result != 0 {
		n += 1 + sovVoteExt(uint64(m.Result))
	}
	return n
}

func sovVoteExt(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozVoteExt(x uint64) (n int) {
	return sovVoteExt(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *VoteExtension) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowVoteExt
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: VoteExtension: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: VoteExtension: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ConsolidatedSideTxResponse", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVoteExt
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthVoteExt
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthVoteExt
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ConsolidatedSideTxResponse == nil {
				m.ConsolidatedSideTxResponse = &ConsolidatedSideTxResponse{}
			}
			if err := m.ConsolidatedSideTxResponse.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MilestoneProposition", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVoteExt
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthVoteExt
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthVoteExt
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.MilestoneProposition == nil {
				m.MilestoneProposition = &MilestoneProposition{}
			}
			if err := m.MilestoneProposition.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipVoteExt(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthVoteExt
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MilestoneProposition) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowVoteExt
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MilestoneProposition: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MilestoneProposition: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BlockHash", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVoteExt
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthVoteExt
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthVoteExt
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BlockHash = append(m.BlockHash[:0], dAtA[iNdEx:postIndex]...)
			if m.BlockHash == nil {
				m.BlockHash = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipVoteExt(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthVoteExt
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ConsolidatedSideTxResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowVoteExt
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ConsolidatedSideTxResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ConsolidatedSideTxResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SideTxResponses", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVoteExt
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthVoteExt
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthVoteExt
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SideTxResponses = append(m.SideTxResponses, SideTxResponse{})
			if err := m.SideTxResponses[len(m.SideTxResponses)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BlockHash", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVoteExt
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthVoteExt
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthVoteExt
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BlockHash = append(m.BlockHash[:0], dAtA[iNdEx:postIndex]...)
			if m.BlockHash == nil {
				m.BlockHash = []byte{}
			}
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Height", wireType)
			}
			m.Height = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVoteExt
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Height |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipVoteExt(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthVoteExt
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SideTxResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowVoteExt
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SideTxResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SideTxResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TxHash", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVoteExt
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthVoteExt
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthVoteExt
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TxHash = append(m.TxHash[:0], dAtA[iNdEx:postIndex]...)
			if m.TxHash == nil {
				m.TxHash = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Result", wireType)
			}
			m.Result = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVoteExt
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Result |= Vote(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipVoteExt(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthVoteExt
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipVoteExt(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowVoteExt
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowVoteExt
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowVoteExt
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthVoteExt
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupVoteExt
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthVoteExt
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthVoteExt        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowVoteExt          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupVoteExt = fmt.Errorf("proto: unexpected end of group")
)
