// Code generated by MockGen. DO NOT EDIT.
// Source: engine/engine_client.go

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	engine "github.com/ethereum/go-ethereum/beacon/engine"
	gomock "github.com/golang/mock/gomock"
)

// MockExecutionEngineClient is a mock of ExecutionEngineClient interface.
type MockExecutionEngineClient struct {
	ctrl     *gomock.Controller
	recorder *MockExecutionEngineClientMockRecorder
}

// MockExecutionEngineClientMockRecorder is the mock recorder for MockExecutionEngineClient.
type MockExecutionEngineClientMockRecorder struct {
	mock *MockExecutionEngineClient
}

// NewMockExecutionEngineClient creates a new mock instance.
func NewMockExecutionEngineClient(ctrl *gomock.Controller) *MockExecutionEngineClient {
	mock := &MockExecutionEngineClient{ctrl: ctrl}
	mock.recorder = &MockExecutionEngineClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockExecutionEngineClient) EXPECT() *MockExecutionEngineClientMockRecorder {
	return m.recorder
}

// CheckCapabilities mocks base method.
func (m *MockExecutionEngineClient) CheckCapabilities(ctx context.Context, requiredMethods []string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CheckCapabilities", ctx, requiredMethods)
	ret0, _ := ret[0].(error)
	return ret0
}

// CheckCapabilities indicates an expected call of CheckCapabilities.
func (mr *MockExecutionEngineClientMockRecorder) CheckCapabilities(ctx, requiredMethods interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckCapabilities", reflect.TypeOf((*MockExecutionEngineClient)(nil).CheckCapabilities), ctx, requiredMethods)
}

// Close mocks base method.
func (m *MockExecutionEngineClient) Close() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Close")
}

// Close indicates an expected call of Close.
func (mr *MockExecutionEngineClientMockRecorder) Close() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockExecutionEngineClient)(nil).Close))
}

// ForkchoiceUpdatedV2 mocks base method.
func (m *MockExecutionEngineClient) ForkchoiceUpdatedV2(ctx context.Context, state *engine.ForkchoiceStateV1, attrs *engine.PayloadAttributes) (*engine.ForkChoiceResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ForkchoiceUpdatedV2", ctx, state, attrs)
	ret0, _ := ret[0].(*engine.ForkChoiceResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ForkchoiceUpdatedV2 indicates an expected call of ForkchoiceUpdatedV2.
func (mr *MockExecutionEngineClientMockRecorder) ForkchoiceUpdatedV2(ctx, state, attrs interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ForkchoiceUpdatedV2", reflect.TypeOf((*MockExecutionEngineClient)(nil).ForkchoiceUpdatedV2), ctx, state, attrs)
}

// GetPayloadV2 mocks base method.
func (m *MockExecutionEngineClient) GetPayloadV2(ctx context.Context, payloadId string) (*engine.ExecutionPayloadEnvelope, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPayloadV2", ctx, payloadId)
	ret0, _ := ret[0].(*engine.ExecutionPayloadEnvelope)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPayloadV2 indicates an expected call of GetPayloadV2.
func (mr *MockExecutionEngineClientMockRecorder) GetPayloadV2(ctx, payloadId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPayloadV2", reflect.TypeOf((*MockExecutionEngineClient)(nil).GetPayloadV2), ctx, payloadId)
}

// NewPayloadV2 mocks base method.
func (m *MockExecutionEngineClient) NewPayloadV2(ctx context.Context, payload engine.ExecutableData) (*engine.PayloadStatusV1, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NewPayloadV2", ctx, payload)
	ret0, _ := ret[0].(*engine.PayloadStatusV1)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// NewPayloadV2 indicates an expected call of NewPayloadV2.
func (mr *MockExecutionEngineClientMockRecorder) NewPayloadV2(ctx, payload interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NewPayloadV2", reflect.TypeOf((*MockExecutionEngineClient)(nil).NewPayloadV2), ctx, payload)
}
