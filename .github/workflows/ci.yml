name: CI

on:
  push:
    branches:
      - 'main'
      - 'develop'
  pull_request:
    branches:
      - '**'
    types: [opened, synchronize]

jobs:
  lint:
    name: lint
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Install Go
        uses: actions/setup-go@v5
        with:
          go-version-file: go.mod

      - name: 'Install linter deps'
        run: make lint-deps

      - name: 'Run linter'
        run: make lint NEW_FROM_REV=origin/develop

      - name: 'Build binaries'
        run: make build

  test:
    name: test
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Install Go
        uses: actions/setup-go@v5
        with:
          go-version: 1.23.x

      - name: 'Run tests'
        run: make test

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v2
        with:
          file: ./cover.out

  e2e-tests:
    name: e2e-tests

    if: (github.event.action != 'closed' || github.event.pull_request.merged == true)
    strategy:
      matrix:
        os: [ubuntu-20.04] # list of os: https://github.com/actions/virtual-environments

    runs-on: ${{ matrix.os }}

    steps:
      - name: Checkout heimdall-v2
        uses: actions/checkout@v4
        with:
          path: heimdall-v2

      - name: Install Go
        uses: actions/setup-go@v5
        with:
          go-version: 1.23.6

      - name: Checkout matic-cli
        uses: actions/checkout@v4
        with:
          repository: maticnetwork/matic-cli
          ref: raneet10/heimdallv2-test
          path: matic-cli
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Install dependencies on Linux
        if: runner.os == 'Linux'
        run: |
          sudo apt update
          sudo apt install build-essential python2 jq curl
          sudo ln -sf /usr/bin/python2 /usr/bin/python
          curl https://raw.githubusercontent.com/creationix/nvm/master/install.sh | bash

      - name: Install solc
        run: |
          # Install solc-select via pip3 and use it to install & select 0.5.11
          pip3 install solc-select
          solc-select use 0.5.17 --always-install
          solc --version

      - name: Install Foundry
        uses: foundry-rs/foundry-toolchain@v1
        with:
          version: stable

      - name: Install Node v18.19.0
        uses: actions/setup-node@v4
        with:
          node-version: '18.19.0'
          cache: 'npm'
          cache-dependency-path: |
            matic-cli/package-lock.json
            matic-cli/devnet/code/contracts/package-lock.json
            matic-cli/devnet/code/genesis-contracts/package-lock.json
            matic-cli/devnet/code/genesis-contracts/matic-contracts/package-lock.json

      - name: Bootstrap devnet
        run: |
          cd matic-cli
          npm install --prefer-offline --no-audit --progress=false
          mkdir devnet
          cd devnet
          ../bin/matic-cli.js setup devnet -c ../../heimdall-v2/.github/matic-cli-config.yml

      - name: Launch devnet
        run: |
          cd matic-cli/devnet
          bash ../util-scripts/docker/devnet_setup.sh
          cd -
          timeout 2m bash heimdall-v2/integration-tests/bor_health.sh

      - name: Upload logs
        if: always()
        uses: actions/upload-artifact@v4.4.0
        with:
          name: logs_${{ github.run_id }}
          path: |
            matic-cli/devnet/logs

      - name: Package code and chain data
        if: always()
        run: |
          cd matic-cli/devnet
          docker compose down --remove-orphans
          cd -
          mkdir -p ${{ github.run_id }}/matic-cli
          sudo mv heimdall-v2 ${{ github.run_id }}
          sudo mv matic-cli/devnet ${{ github.run_id }}/matic-cli
          sudo tar czf code.tar.gz ${{ github.run_id }}

      - name: Upload code and chain data
        if: always()
        uses: actions/upload-artifact@v4.4.0
        with:
          name: code_${{ github.run_id }}
          path: code.tar.gz
