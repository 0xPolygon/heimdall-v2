syntax = "proto3";
package cosmos.clerk.v1beta1;

import "gogoproto/gogo.proto";
import "google/api/annotations.proto";
import "google/protobuf/timestamp.proto";
import "cosmos/query/v1/query.proto";
import "amino/amino.proto";

option go_package = "github.com/0xPolygon/heimdall-v2/x/clerk/types";

// Query defines the gRPC querier service.
service Query {
  // TODO HV2 - check url
  rpc NewQueryRecordParams(NewQueryRecordParamsRequest)
      returns (QueryRecordParams) {
    option (cosmos.query.v1.module_query_safe) = true;
    option (google.api.http).get = "/clerk/event-record/list";
  }
  // // NewQueryRecordParams creates a new instance of QueryRecordParams.
  // func NewQueryRecordParams(recordID uint64) QueryRecordParams {
  //     return QueryRecordParams{RecordID: recordID}
  // }

  // TODO HV2 - check url
  rpc NewQueryRecordSequenceParams(NewQueryRecordSequenceParamsRequest)
      returns (QueryRecordSequenceParams) {
    option (cosmos.query.v1.module_query_safe) = true;
    option (google.api.http).get = "/clerk/event-record/recordId";
  }
  // // NewQueryRecordSequenceParams creates a new instance of
  // QuerySequenceParams. func NewQueryRecordSequenceParams(txHash string,
  // logIndex uint64) QueryRecordSequenceParams {
  //     return QueryRecordSequenceParams{TxHash: txHash, LogIndex: logIndex}
  // }

  // TODO HV2 - check url
  rpc NewQueryTimeRangePaginationParams(
      NewQueryTimeRangePaginationParamsRequest)
      returns (QueryRecordTimePaginationParams) {
    option (cosmos.query.v1.module_query_safe) = true;
    option (google.api.http).get = "/clerk/isoldtx";
  }
  // // NewQueryTimeRangePaginationParams creates a new instance of
  // NewQueryTimeRangePaginationParams. func
  // NewQueryTimeRangePaginationParams(fromTime, toTime time.Time, page, limit
  // uint64) QueryRecordTimePaginationParams {
  //     return QueryRecordTimePaginationParams{FromTime: fromTime, ToTime:
  //     toTime, Page: page, Limit: limit}
  // }
}

message NewQueryRecordParamsRequest {
  uint64 record_i_d = 1 [ (gogoproto.customname) = "RecordID" ];
}

// QueryRecordParams defines the params for querying accounts.
message QueryRecordParams {
  uint64 record_i_d = 1 [ (gogoproto.customname) = "RecordID" ];
}

message NewQueryRecordSequenceParamsRequest {
  string tx_hash = 1 [ (gogoproto.customname) = "TxHash" ];
  uint64 log_index = 2 [ (gogoproto.customname) = "LogIndex" ];
}

// QueryRecordSequenceParams defines the params for querying an account
// Sequence.
message QueryRecordSequenceParams {
  string tx_hash = 1 [ (gogoproto.customname) = "TxHash" ];
  uint64 log_index = 2 [ (gogoproto.customname) = "LogIndex" ];
}

message NewQueryTimeRangePaginationParamsRequest {
  google.protobuf.Timestamp from_time = 1
      [ (gogoproto.customname) = "FromTime" ];
  google.protobuf.Timestamp to_time = 2 [ (gogoproto.customname) = "ToTime" ];
  uint64 page = 3;
  uint64 limit = 4;
}

// QueryRecordTimePaginationParams defines the params for querying records with
// time.
message QueryRecordTimePaginationParams {
  google.protobuf.Timestamp from_time = 1
      [ (gogoproto.customname) = "FromTime" ];
  google.protobuf.Timestamp to_time = 2 [ (gogoproto.customname) = "ToTime" ];
  uint64 page = 3;
  uint64 limit = 4;
}