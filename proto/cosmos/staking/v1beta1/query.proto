syntax = "proto3";
package cosmos.staking.v1beta1;

import "cosmos/base/query/v1beta1/pagination.proto";
import "gogoproto/gogo.proto";
import "google/api/annotations.proto";
import "cosmos_proto/cosmos.proto";
import "cosmos/query/v1/query.proto";
import "amino/amino.proto";
import "cosmos/types/staking.proto";

option go_package = "x/staking/types";

// Query defines the gRPC querier service.
service Query {
  // Validators queries all validators that match the given status.
  //
  // When called from another module, this query might consume a high amount of
  // gas if the pagination field is incorrectly set.
  rpc CurrentValidatorSet(QueryCurrentValidatorSetRequest)
      returns (QueryCurrentValidatorSetResponse) {
    option (cosmos.query.v1.module_query_safe) = true;
    option (google.api.http).get = "/staking/validator-set";
  }

  // Signer queries validator info for given validator val_address.
  rpc Signer(QuerySignerRequest) returns (QuerySignerResponse) {
    option (cosmos.query.v1.module_query_safe) = true;
    option (google.api.http).get = "/staking/signer/{val_address}";
  }

  // Validator queries validator info for given validator id.
  rpc Validator(QueryValidatorRequest) returns (QueryValidatorResponse) {
    option (cosmos.query.v1.module_query_safe) = true;
    option (google.api.http).get = "/staking/validator/{id}";
  }

  // ValidatorStatus queries validator status for given validator val_address.
  rpc ValidatorStatus(QueryValidatorStatusRequest)
      returns (QueryValidatorStatusResponse) {
    option (cosmos.query.v1.module_query_safe) = true;
    option (google.api.http).get = "/staking/validator-status/{val_address}";
  }

  // TotalPower queries total power of a validator set
  rpc TotalPower(QueryTotalPowerRequest) returns (QueryTotalPowerResponse) {
    option (cosmos.query.v1.module_query_safe) = true;
    option (google.api.http).get = "/staking/totalpower";
  }

  // CurrentProposer queries validator info for the current proposer
  rpc CurrentProposer(QueryCurrentProposerRequest)
      returns (QueryCurrentProposerResponse) {
    option (cosmos.query.v1.module_query_safe) = true;
    option (google.api.http).get = "/staking/current-proposer";
  }

  // Proposer queries for the proposer
  rpc Proposer(QueryProposerRequest) returns (QueryProposerResponse) {
    option (cosmos.query.v1.module_query_safe) = true;
    option (google.api.http).get = "/staking/proposer/{times}";
  }

  // MilestoneProposer queries for the milestone proposer
  rpc MilestoneProposer(QueryMilestoneProposerRequest)
      returns (QueryMilestoneProposerResponse) {
    option (cosmos.query.v1.module_query_safe) = true;
    option (google.api.http).get = "/staking/milestone-proposer";
  }

  // StakingSequence queries for the staking sequence
  rpc StakingSequence(QueryStakingSequenceRequest)
      returns (QueryStakingSequenceResponse) {
    option (cosmos.query.v1.module_query_safe) = true;
    option (google.api.http).get = "/staking/isOldTx";
  }
}

// QueryCurrentValidatorSetRequest is request type for Query/CurrentValidatorSet
// RPC method.
message QueryCurrentValidatorSetRequest {}

// QueryCurrentValidatorSetResponse is response type for the Query/ValidatorSet
// RPC method
message QueryCurrentValidatorSetResponse {
  // validators contains all the queried svalidators.
  cosmos.types.ValidatorSet validator_set = 1
      [ (gogoproto.nullable) = false, (amino.dont_omitempty) = true ];
}

// QuerySignerRequest is response type for the Query/Signer RPC method
message QuerySignerRequest {
  // val_address defines the validator val_address to query for.
  string val_address = 1 [ (amino.dont_omitempty) = true ];
}

// QuerySignerResponse is response type for the Query/Signer RPC method
message QuerySignerResponse {
  // validator defines the validator info.
  cosmos.types.Validator validator = 1
      [ (gogoproto.nullable) = false, (amino.dont_omitempty) = true ];
}

// QueryValidatorRequest is response type for the Query/Validator RPC method
message QueryValidatorRequest {
  // validator_id defines the validator id to query for.
  uint64 id = 1 [ (amino.dont_omitempty) = true ];
}

// QueryValidatorResponse is response type for the Query/Validator RPC method
message QueryValidatorResponse {
  // validator defines the validator info.
  cosmos.types.Validator validator = 1
      [ (gogoproto.nullable) = false, (amino.dont_omitempty) = true ];
}

// QueryTotalPowerRequest is request type for the
// Query/TotalPower RPC method
message QueryTotalPowerRequest {}

// QueryTotalPowerResponse is response type for the
// Query/TotalPower RPC method
message QueryTotalPowerResponse {
  int64 total_power = 1 [ (amino.dont_omitempty) = true ];
}

// QueryCurrentProposerRequest is request type for the Query/CurrentProposer RPC
// method
message QueryCurrentProposerRequest {}

// QueryCurrentProposerRequest is response type for the Query/CurrentProposer
// RPC method
message QueryCurrentProposerResponse {
  // validator defines the validator info.
  cosmos.types.Validator validator = 1
      [ (gogoproto.nullable) = false, (amino.dont_omitempty) = true ];
}

// QueryValidatorStatusRequest is response type for the Query/ValidatorStatus
// RPC method
message QueryValidatorStatusRequest {
  // val_address defines the validator val_address to query for.
  string val_address = 1 [ (amino.dont_omitempty) = true ];
}

// QueryValidatorStatusResponse is response type for the Query/ValidatorStatus
// RPC method
message QueryValidatorStatusResponse {
  // status define the active status of validator
  bool status = 1 [ (amino.dont_omitempty) = true ];
}

// QuerySignerRequest is response type for the Query/Proposer RPC method
message QueryProposerRequest {
  uint64 times = 1 [ (amino.dont_omitempty) = true ];
}

// QuerySignerResponse is response type for the Query/Proposer RPC method
message QueryProposerResponse {
  repeated cosmos.types.Validator proposers = 1
      [ (gogoproto.nullable) = false, (amino.dont_omitempty) = true ];
}

// QueryCurrentMilestoneProposerRequest is request type for the
// Query/MilestoneProposer RPC method
message QueryMilestoneProposerRequest {
  uint64 times = 1 [ (amino.dont_omitempty) = true ];
}

// QueryCurrentMilestoneProposerResponse is response type for the
// Query/MilestoneProposer RPC method
message QueryMilestoneProposerResponse {
  // validator defines the validator info.
  repeated cosmos.types.Validator proposers = 1
      [ (gogoproto.nullable) = false, (amino.dont_omitempty) = true ];
}

// QueryStakingSequenceRequest is response type for the Query/StakingSequence
// RPC method
message QueryStakingSequenceRequest {

  string tx_hash = 1 [ (amino.dont_omitempty) = true ];
  uint64 log_index = 2 [ (amino.dont_omitempty) = true ];
}

// QueryValidatorStatusResponse is response type for the Query/StakingSequence
// RPC method
message QueryStakingSequenceResponse {
  // status define the active status of validator
  bool status = 1 [ (amino.dont_omitempty) = true ];
}
