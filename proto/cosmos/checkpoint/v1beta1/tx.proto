syntax = "proto3";
package cosmos.checkpoint.v1beta1;

import "google/protobuf/any.proto";
import "google/protobuf/timestamp.proto";
import "gogoproto/gogo.proto";

import "cosmos_proto/cosmos.proto";
import "cosmos/msg/v1/msg.proto";
import "amino/amino.proto";
import "cosmos/types/staking.proto";

option go_package = "x/checkpoint/types";

// Msg defines the staking Msg service.
service Msg {
  option (cosmos.msg.v1.service) = true;

  // CheckpointAdjust defines a method for checkpointAdjust
  rpc CheckpointAdjust(MsgCheckpointAdjust)
      returns (MsgCheckpointAdjustResponse);

  // Checkpoint defines a method for checkpoint
  rpc Checkpoint(MsgCheckpoint) returns (MsgCheckpointResponse);

  // CheckpointAck defines a method for checkpoint ack
  rpc CheckpointAck(MsgCheckpointAck) returns (MsgCheckpointAckResponse);

  // CheckpointNoAck defines a method for checkpoint no ack
  rpc CheckpointNoAck(MsgCheckpointNoAck) returns (MsgCheckpointNoAckResponse);
}

message MsgCheckpointAdjust {
  option (amino.name) = "checkpoint/MsgCheckpointAdjust";

  option (gogoproto.equal) = false;
  option (gogoproto.goproto_getters) = true;

  uint64 header_index = 1 [ (amino.dont_omitempty) = true ];

  cosmos.types.HeimdallAddress proposer = 2
      [ (gogoproto.nullable) = false, (amino.dont_omitempty) = true ];

  cosmos.types.HeimdallAddress from = 3
      [ (gogoproto.nullable) = false, (amino.dont_omitempty) = true ];

  uint64 start_block = 4 [ (amino.dont_omitempty) = true ];

  uint64 end_block = 5 [ (amino.dont_omitempty) = true ];

  cosmos.types.HeimdallHash root_hash = 6
      [ (gogoproto.nullable) = false, (amino.dont_omitempty) = true ];
}

// MsgCheckpointAdjustResponse defines the Msg/CheckpointAdjust response type.
message MsgCheckpointAdjustResponse {}

message MsgCheckpoint {
  option (amino.name) = "checkpoint/MsgCheckpoint";

  option (gogoproto.equal) = true;
  option (gogoproto.goproto_getters) = true;

  cosmos.types.HeimdallAddress proposer = 1
      [ (gogoproto.nullable) = false, (amino.dont_omitempty) = true ];

  uint64 start_block = 2 [ (amino.dont_omitempty) = true ];

  uint64 end_block = 3 [ (amino.dont_omitempty) = true ];

  cosmos.types.HeimdallHash root_hash = 4
      [ (gogoproto.nullable) = false, (amino.dont_omitempty) = true ];

  cosmos.types.HeimdallHash account_root_hash = 5
      [ (gogoproto.nullable) = false, (amino.dont_omitempty) = true ];

  string bor_chain_i_d = 6 [ (amino.dont_omitempty) = true ];
}

// MsgCheckpointResponse defines the Msg/Checkpoint response type.
message MsgCheckpointResponse {}

message MsgCheckpointAck {
  option (amino.name) = "checkpoint/MsgCheckpointAck";

  option (gogoproto.equal) = false;
  option (gogoproto.goproto_getters) = true;

  cosmos.types.HeimdallAddress from = 1
      [ (gogoproto.nullable) = false, (amino.dont_omitempty) = true ];

  uint64 number = 2 [ (amino.dont_omitempty) = true ];

  cosmos.types.HeimdallAddress proposer = 3
      [ (gogoproto.nullable) = false, (amino.dont_omitempty) = true ];

  uint64 start_block = 4 [ (amino.dont_omitempty) = true ];

  uint64 end_block = 5 [ (amino.dont_omitempty) = true ];

  cosmos.types.HeimdallHash root_hash = 6
      [ (gogoproto.nullable) = false, (amino.dont_omitempty) = true ];

  cosmos.types.HeimdallHash tx_hash = 7
      [ (gogoproto.nullable) = false, (amino.dont_omitempty) = true ];

  uint64 log_index = 8 [ (amino.dont_omitempty) = true ];
}

// MsgCheckpointAck defines the Msg/CheckpointAck response type.
message MsgCheckpointAckResponse {}

message MsgCheckpointNoAck {
  option (amino.name) = "checkpoint/MsgCheckpointNoAck";

  option (gogoproto.equal) = false;
  option (gogoproto.goproto_getters) = true;

  cosmos.types.HeimdallAddress from = 1
      [ (gogoproto.nullable) = false, (amino.dont_omitempty) = true ];
}

// MsgCheckpointNoAck defines the Msg/CheckpointNoAck response type.
message MsgCheckpointNoAckResponse {}
