syntax = "proto3";
package heimdallv2.clerk;

import "amino/amino.proto";
import "cosmos/query/v1/query.proto";
import "gogoproto/gogo.proto";
import "google/api/annotations.proto";
import "google/protobuf/timestamp.proto";
import "heimdallv2/clerk/clerk.proto";

option go_package = "github.com/0xPolygon/heimdall-v2/x/clerk/types";

// Query defines the gRPC querier service.
service Query {
  rpc GetRecordList(RecordListRequest) returns (RecordListResponse) {
    option (cosmos.query.v1.module_query_safe) = true;
    option (google.api.http).get = "/clerk/event-record/list";
  }

  rpc GetRecordById(RecordRequest) returns (RecordResponse) {
    option (cosmos.query.v1.module_query_safe) = true;
    option (google.api.http).get = "/clerk/event-record/{record_id}";
  }

  rpc GetRecordListWithTime(RecordListWithTimeRequest)
      returns (RecordListWithTimeResponse) {
    option (cosmos.query.v1.module_query_safe) = true;
    option (google.api.http).get = "/clerk/time";
  }

  rpc GetRecordSequence(RecordSequenceRequest)
      returns (RecordSequenceResponse) {
    option (cosmos.query.v1.module_query_safe) = true;
    option (google.api.http).get = "/clerk/sequence";
  }
}

message RecordRequest {
  uint64 record_id = 1 [ (amino.dont_omitempty) = true ];
}

// RecordResponse defines the params for RecordListRequest.
message RecordResponse {
  EventRecord record = 1
      [ (gogoproto.nullable) = false, (amino.dont_omitempty) = true ];
}

message RecordListRequest {
  uint64 page = 1 [ (amino.dont_omitempty) = true ];
  uint64 limit = 2 [ (amino.dont_omitempty) = true ];
}

// RecordListResponse defines the params for RecordListRequest
message RecordListResponse {
  repeated EventRecord event_records = 1
      [ (gogoproto.nullable) = false, (amino.dont_omitempty) = true ];
}

message RecordListWithTimeRequest {
  google.protobuf.Timestamp from_time = 1 [
    (gogoproto.stdtime) = true,
    (gogoproto.nullable) = false,
    (amino.dont_omitempty) = true
  ];
  google.protobuf.Timestamp to_time = 2 [
    (gogoproto.stdtime) = true,
    (gogoproto.nullable) = false,
    (amino.dont_omitempty) = true
  ];
  uint64 page = 3 [ (amino.dont_omitempty) = true ];
  uint64 limit = 4 [ (amino.dont_omitempty) = true ];
}

// RecordListWithTimeResponse defines the params for querying
// RecordListWithTimeRequest
message RecordListWithTimeResponse {
  repeated EventRecord event_records = 1
      [ (gogoproto.nullable) = false, (amino.dont_omitempty) = true ];
}

message RecordSequenceRequest {
  string tx_hash = 1 [ (amino.dont_omitempty) = true ];
  uint64 log_index = 2 [ (amino.dont_omitempty) = true ];
}

message RecordSequenceResponse {
  uint64 sequence = 1 [ (amino.dont_omitempty) = true ];
}
