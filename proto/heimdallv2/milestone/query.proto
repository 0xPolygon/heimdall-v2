syntax = "proto3";
package heimdallv2.milestone;

import "amino/amino.proto";
import "cosmos/query/v1/query.proto";
import "gogoproto/gogo.proto";
import "google/api/annotations.proto";
import "heimdallv2/milestone/milestone.proto";

option go_package = "github.com/0xPolygon/heimdall-v2/x/milestone/types";

service Query {
  // GetMilestoneCount queries for the milestone count
  rpc GetMilestoneCount(QueryCountRequest) returns (QueryCountResponse) {
    option (cosmos.query.v1.module_query_safe) = true;
    option (google.api.http).get = "/milestone/count";
  }
  // GetLatestMilestone queries for the latest milestone
  rpc GetLatestMilestone(QueryLatestMilestoneRequest)
      returns (QueryLatestMilestoneResponse) {
    option (cosmos.query.v1.module_query_safe) = true;
    option (google.api.http).get = "/milestone/latest";
  }
  // GetMilestoneByNumber queries for the milestone based on the number
  rpc GetMilestoneByNumber(QueryMilestoneRequest)
      returns (QueryMilestoneResponse) {
    option (cosmos.query.v1.module_query_safe) = true;
    option (google.api.http).get = "/milestone/{number}";
  }
}

message QueryCountRequest {}

message QueryCountResponse {
  uint64 count = 1 [ (amino.dont_omitempty) = true ];
}

message QueryLatestMilestoneRequest {}

message QueryLatestMilestoneResponse {
  Milestone milestone = 1
      [ (gogoproto.nullable) = false, (amino.dont_omitempty) = true ];
}

message QueryMilestoneRequest {
  uint64 number = 1 [ (amino.dont_omitempty) = true ];
}

message QueryMilestoneResponse {
  Milestone milestone = 1
      [ (gogoproto.nullable) = false, (amino.dont_omitempty) = true ];
}
