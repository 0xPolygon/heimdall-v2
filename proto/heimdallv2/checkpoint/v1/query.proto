syntax = "proto3";
package heimdallv2.checkpoint.v1;

import "amino/amino.proto";
import "cosmos/query/v1/query.proto";
import "gogoproto/gogo.proto";
import "google/api/annotations.proto";
import "heimdallv2/checkpoint/v1/checkpoint.proto";
import "heimdallv2/checkpoint/v1/tx.proto";
import "heimdallv2/stake/v1/validator.proto";

option go_package = "github.com/0xPolygon/heimdall-v2/x/checkpoint/types";

// Query defines the gRPC querier service.
service Query {
  // GetParams queries for the checkpoint params
  rpc GetParams(QueryParamsRequest) returns (QueryParamsResponse) {
    option (cosmos.query.v1.module_query_safe) = true;
    option (google.api.http).get = "/checkpoints/params";
  }

  // GetAckCount queries for the ack count
  rpc GetAckCount(QueryAckCountRequest) returns (QueryAckCountResponse) {
    option (cosmos.query.v1.module_query_safe) = true;
    option (google.api.http).get = "/checkpoints/count";
  }

  // GetCheckpoint queries for the checkpoint based on the number
  rpc GetCheckpoint(QueryCheckpointRequest) returns (QueryCheckpointResponse) {
    option (cosmos.query.v1.module_query_safe) = true;
    option (google.api.http).get = "/checkpoints/{number}";
  }

  // GetCheckpointLatest queries for the latest checkpoint
  rpc GetCheckpointLatest(QueryCheckpointLatestRequest)
      returns (QueryCheckpointLatestResponse) {
    option (cosmos.query.v1.module_query_safe) = true;
    option (google.api.http).get = "/checkpoints/latest";
  }

  // GetCheckpointBuffer queries for the checkpoint in the buffer
  rpc GetCheckpointBuffer(QueryCheckpointBufferRequest)
      returns (QueryCheckpointBufferResponse) {
    option (cosmos.query.v1.module_query_safe) = true;
    option (google.api.http).get = "/checkpoints/buffer";
  }

  // GetLastNoAck queries for the last last-no-ack
  rpc GetLastNoAck(QueryLastNoAckRequest) returns (QueryLastNoAckResponse) {
    option (cosmos.query.v1.module_query_safe) = true;
    option (google.api.http).get = "/checkpoints/last-no-ack";
  }

  // GetNextCheckpoint queries for the next checkpoint
  rpc GetNextCheckpoint(QueryNextCheckpointRequest)
      returns (QueryNextCheckpointResponse) {
    option (cosmos.query.v1.module_query_safe) = true;
    option (google.api.http).get = "/checkpoints/prepare-next";
  }

  // GetCurrentProposer queries validator info for the current proposer
  rpc GetCurrentProposer(QueryCurrentProposerRequest)
      returns (QueryCurrentProposerResponse) {
    option (cosmos.query.v1.module_query_safe) = true;
    option (google.api.http).get = "/checkpoint/current-proposer";
  }

  // GetProposer queries for the proposer
  rpc GetProposer(QueryProposerRequest) returns (QueryProposerResponse) {
    option (cosmos.query.v1.module_query_safe) = true;
    option (google.api.http).get = "/checkpoint/proposer/{times}";
  }
}

// QueryParamsRequest is request type for params
// RPC method.
message QueryParamsRequest {}

// QueryParamsResponse is response type for the params
// RPC method
message QueryParamsResponse {
  Params params = 1
      [ (gogoproto.nullable) = false, (amino.dont_omitempty) = true ];
}

// QueryAckCountRequest is request type for the ack count RPC method
message QueryAckCountRequest {}

// QueryAckCountResponse is response type for the ack count RPC method
message QueryAckCountResponse {
  uint64 ack_count = 1 [ (amino.dont_omitempty) = true ];
}

// QueryLastNoAckRequest is request type for the last no ack count RPC method
message QueryLastNoAckRequest {}

// QueryLastNoAckResponse is response type for the last no ack count RPC
// method
message QueryLastNoAckResponse {
  uint64 last_no_ack_id = 1 [ (amino.dont_omitempty) = true ];
}

// QueryCheckpointBufferRequest is request type for the buffered checkpoint RPC
// method
message QueryCheckpointBufferRequest {}

// QueryCheckpointBufferResponse is response type for the buffered checkpoint
// RPC method
message QueryCheckpointBufferResponse {
  Checkpoint checkpoint = 1
      [ (gogoproto.nullable) = false, (amino.dont_omitempty) = true ];
}

// QueryCheckpointRequest is request type for the number based checkpoint RPC
// method
message QueryCheckpointRequest {
  uint64 number = 1 [ (amino.dont_omitempty) = true ];
}

// QueryCheckpointResponse is response type for the number based checkpoint
// RPC method
message QueryCheckpointResponse {
  Checkpoint checkpoint = 1
      [ (gogoproto.nullable) = false, (amino.dont_omitempty) = true ];
}

// QueryCheckpointLatestRequest is request type for the latest checkpoint
// RPC method
message QueryCheckpointLatestRequest {}

// QueryCheckpointLatestResponse is response type for the
// latest checkpoint RPC method
message QueryCheckpointLatestResponse {
  Checkpoint checkpoint = 1
      [ (gogoproto.nullable) = false, (amino.dont_omitempty) = true ];
}

// QueryNextCheckpointRequest is request type for the next checkpoint
// RPC method
message QueryNextCheckpointRequest { string bor_chain_id = 1; }

// QueryNextCheckpointResponse is response type for the
// Query/Checkpoints/prepare-next RPC method
message QueryNextCheckpointResponse {
  MsgCheckpoint checkpoint = 1
      [ (gogoproto.nullable) = false, (amino.dont_omitempty) = true ];
}

// QueryCurrentProposerRequest is request type for the currentProposer RPC
// method
message QueryCurrentProposerRequest {}

// QueryCurrentProposerResponse is response type for the current proposer
// RPC method
message QueryCurrentProposerResponse {
  // validator defines the validator info.
  heimdallv2.stake.v1.Validator validator = 1
      [ (gogoproto.nullable) = false, (amino.dont_omitempty) = true ];
}

// QuerySignerRequest is request type for the proposer RPC method
message QueryProposerRequest {
  uint64 times = 1 [ (amino.dont_omitempty) = true ];
}

// QuerySignerResponse is response type for the proposer RPC method
message QueryProposerResponse {
  repeated heimdallv2.stake.v1.Validator proposers = 1
      [ (gogoproto.nullable) = false, (amino.dont_omitempty) = true ];
}
