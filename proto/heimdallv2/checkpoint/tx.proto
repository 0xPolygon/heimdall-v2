syntax = "proto3";
package heimdallv2.checkpoint;

import "amino/amino.proto";
import "cosmos_proto/cosmos.proto";
import "cosmos/msg/v1/msg.proto";
import "gogoproto/gogo.proto";
import "heimdallv2/checkpoint/checkpoint.proto";

option go_package = "github.com/0xPolygon/heimdall-v2/x/checkpoint/types";

// Msg defines the checkpoint msg service.
service Msg {
  option (cosmos.msg.v1.service) = true;

  // Checkpoint defines a method for the new checkpoint
  rpc Checkpoint(MsgCheckpoint) returns (MsgCheckpointResponse);

  // CheckpointAck defines a method for checkpoint ack
  rpc CheckpointAck(MsgCheckpointAck) returns (MsgCheckpointAckResponse);

  // CheckpointNoAck defines a method for checkpoint no ack
  rpc CheckpointNoAck(MsgCheckpointNoAck) returns (MsgCheckpointNoAckResponse);

  // CheckpointNoAck defines a method for checkpoint no ack
  rpc UpdateParams(MsgUpdateParams) returns (MsgUpdateParamsResponse);
}

// MsgCheckpoint defines a SDK message for creating the checkpoint
message MsgCheckpoint {
  option (cosmos.msg.v1.signer) = "proposer";
  option (amino.name) = "checkpoint/MsgCheckpoint";

  option (gogoproto.equal) = true;
  option (gogoproto.goproto_getters) = true;

  string proposer = 1 [
    (amino.dont_omitempty) = true,
    (cosmos_proto.scalar) = "cosmos.AddressString"
  ];

  uint64 start_block = 2 [ (amino.dont_omitempty) = true ];

  uint64 end_block = 3 [ (amino.dont_omitempty) = true ];

  bytes root_hash = 4 [ (amino.dont_omitempty) = true ];

  bytes account_root_hash = 5 [ (amino.dont_omitempty) = true ];

  string bor_chain_id = 6 [ (amino.dont_omitempty) = true ];
}

// MsgCheckpointResponse defines the Msg/Checkpoint response type.
message MsgCheckpointResponse {}

// MsgCheckpointAck defines a SDK message for creating the ack of checkpoint
message MsgCheckpointAck {
  option (cosmos.msg.v1.signer) = "from";
  option (amino.name) = "checkpoint/MsgCheckpointAck";

  option (gogoproto.equal) = false;
  option (gogoproto.goproto_getters) = true;

  string from = 1 [
    (amino.dont_omitempty) = true,
    (cosmos_proto.scalar) = "cosmos.AddressString"
  ];

  uint64 number = 2 [ (amino.dont_omitempty) = true ];

  string proposer = 3 [
    (amino.dont_omitempty) = true,
    (cosmos_proto.scalar) = "cosmos.AddressString"
  ];

  uint64 start_block = 4 [ (amino.dont_omitempty) = true ];

  uint64 end_block = 5 [ (amino.dont_omitempty) = true ];

  bytes root_hash = 6 [ (amino.dont_omitempty) = true ];

  bytes tx_hash = 7 [ (amino.dont_omitempty) = true ];

  uint64 log_index = 8 [ (amino.dont_omitempty) = true ];
}

// MsgCheckpointAckResponse defines the Msg/CheckpointAck response type.
message MsgCheckpointAckResponse {}

// MsgCheckpointNoAck defines a SDK message for creating the no-ack
message MsgCheckpointNoAck {
  option (cosmos.msg.v1.signer) = "from";

  option (amino.name) = "checkpoint/MsgCheckpointNoAck";

  option (gogoproto.equal) = false;
  option (gogoproto.goproto_getters) = true;

  string from = 1 [
    (amino.dont_omitempty) = true,
    (cosmos_proto.scalar) = "cosmos.AddressString"
  ];
}

// MsgCheckpointNoAckResponse defines the Msg/CheckpointNoAck response type.
message MsgCheckpointNoAckResponse {}

// MsgUpdateParams is the Msg/UpdateParams request type.
message MsgUpdateParams {
  option (cosmos.msg.v1.signer) = "authority";
  option (amino.name) = "heimdallv2/x/checkpoint/MsgUpdateParams";

  // authority is the address that controls the module (defaults to x/gov unless
  // overwritten).
  string authority = 1 [
    (cosmos_proto.scalar) = "cosmos.AddressString",
    (amino.dont_omitempty) = true
  ];
  // params defines the x/bor parameters to update.
  // NOTE: All parameters must be supplied.
  Params params = 2
      [ (gogoproto.nullable) = false, (amino.dont_omitempty) = true ];
}

// MsgUpdateParamsResponse defines the response structure for executing a
// MsgUpdateParams message.
message MsgUpdateParamsResponse {}
