syntax = "proto3";
package heimdallv2.types;

import "gogoproto/gogo.proto";
import "google/protobuf/any.proto";

import "cosmos_proto/cosmos.proto";
import "amino/amino.proto";

option go_package = "github.com/0xPolygon/heimdall-v2/types";

message Validator {
  option (gogoproto.equal) = true;
  option (gogoproto.goproto_getters) = true;

  uint64 val_id = 1;
  uint64 start_epoch = 2;
  uint64 end_epoch = 3;
  uint64 nonce = 4;
  int64 voting_power = 5;
  google.protobuf.Any pub_key = 6
      [ (cosmos_proto.accepts_interface) = "cosmos.crypto.PubKey" ];
  string signer = 7 [
    (cosmos_proto.scalar) = "cosmos.AddressString",
    (amino.dont_omitempty) = true
  ];
  string last_updated = 8;
  bool jailed = 9;
  int64 proposer_priority = 10;
}

// HeimdallHash this following defines the
// hash
message HeimdallHash {
  option (gogoproto.equal) = true;
  bytes hash = 1;
}

// TxHash this following defines the
// hash of the transaction
message TxHash {
  option (gogoproto.equal) = true;
  bytes hash = 1;
}

message HexBytes {
  option (gogoproto.equal) = true;
  bytes hex_bytes = 1;
}

// ValidatorSet this following defines the
// set of validator
message ValidatorSet {
  option (gogoproto.equal) = true;
  option (gogoproto.goproto_getters) = false;

  repeated Validator validators = 1;

  Validator proposer = 2;

  // total voting power
  int64 total_voting_power = 3;
}