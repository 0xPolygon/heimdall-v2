syntax = "proto3";
package heimdallv2.bor;

import "gogoproto/gogo.proto";
import "cosmos/query/v1/query.proto";
import "cosmos/base/query/v1beta1/pagination.proto";
import "google/api/annotations.proto";
import "heimdallv2/bor/bor.proto";

option go_package = "github.com/0xPolygon/heimdall-v2/x/bor/types";

// Query defines the gRPC querier service.
service Query {

  rpc GetSpanById(QuerySpanByIdRequest) returns (QuerySpanByIdResponse) {
    option (cosmos.query.v1.module_query_safe) = true;
    option (google.api.http).get = "/heimdallv2/bor/span/{id}";
  }

  rpc GetSpanList(QuerySpanListRequest) returns (QuerySpanListResponse) {
    option (cosmos.query.v1.module_query_safe) = true;
    option (google.api.http).get = "/heimdallv2/bor/span/list";
  }

  rpc GetLatestSpan(QueryLatestSpanRequest) returns (QueryLatestSpanResponse) {
    option (cosmos.query.v1.module_query_safe) = true;
    option (google.api.http).get = "/heimdallv2/bor/span/latest";
  }

  rpc GetNextSpanSeed(QueryNextSpanSeedRequest)
      returns (QueryNextSpanSeedResponse) {
    option (cosmos.query.v1.module_query_safe) = true;
    option (google.api.http).get = "/heimdallv2/bor/span/seed";
  }

  rpc GetNextSpan(QueryNextSpanRequest) returns (QueryNextSpanResponse) {
    option (cosmos.query.v1.module_query_safe) = true;
    option (google.api.http).get = "/heimdallv2/bor/span/prepare";
  }

  rpc GetParams(QueryParamsRequest) returns (QueryParamsResponse) {
    option (cosmos.query.v1.module_query_safe) = true;
    option (google.api.http).get = "/heimdallv2/bor/params";
  }
}

// QuerySpanByIdRequest defines the gRPC request structure for querying
// a bor span by span id.
message QuerySpanByIdRequest { string id = 1; }

// QuerySpanByIdResponse defines the gRPC response structure for querying
// a bor span by span id.
message QuerySpanByIdResponse { Span span = 1; }

// QuerySpanListRequest defines the gRPC request structure for querying
// a list of bor spans.
message QuerySpanListRequest {
  cosmos.base.query.v1beta1.PageRequest pagination = 1;
}

// QuerySpanListResponse defines the gRPC response structure for querying
// a list of bor spans.
message QuerySpanListResponse {
  repeated Span span_list = 1 [ (gogoproto.nullable) = false ];
  cosmos.base.query.v1beta1.PageResponse pagination = 2;
}

// QueryLatestSpanResponse defines the gRPC response structure for querying
// the latest bor span.
message QueryLatestSpanRequest {}

// QueryLatestSpanResponse defines the gRPC response structure for querying
// the latest bor span.
message QueryLatestSpanResponse { Span span = 1; }

// QueryNextSpanSeedRequest defines the gRPC request structure for querying
// the next bor span seed.
message QueryNextSpanSeedRequest {}

// QueryNextSpanSeedResponse defines the gRPC response structure for querying
// the next bor span seed.
message QueryNextSpanSeedResponse { string seed = 1; }

// QueryNextSpanRequest defines the gRPC request structure for querying
// the next bor span.
message QueryNextSpanRequest {
  uint64 span_id = 1;
  uint64 start_block = 2;
  string bor_chain_id = 3;
}

// QueryNextSpanResponse defines the gRPC response structure for querying
// the next bor span.
message QueryNextSpanResponse { Span span = 1; }

// QueryParamsRequest defines the gRPC request structure for querying
// the bor module parameters.
message QueryParamsRequest {}

// QueryParamsResponse defines the gRPC response structure for querying
// the bor module parameters.
message QueryParamsResponse { Params params = 1; }
