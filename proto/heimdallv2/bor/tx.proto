syntax = "proto3";
package heimdallv2.bor;

import "amino/amino.proto";
import "cosmos/msg/v1/msg.proto";
import "cosmos_proto/cosmos.proto";
import "gogoproto/gogo.proto";
import "heimdallv2/bor/bor.proto";

option go_package = "github.com/0xPolygon/heimdall-v2/x/bor/types";

service Msg {
  option (cosmos.msg.v1.service) = true;
  // ProposeSpan defines a method for proposing a bor span.
  rpc ProposeSpan(MsgProposeSpan) returns (MsgProposeSpanResponse);
  // UpdateParams defines a method to update the bor params.
  rpc UpdateParams(MsgUpdateParams) returns (MsgUpdateParamsResponse);
  // BackfillSpans defines a method to fill missing spans.
  rpc BackfillSpans(MsgBackfillSpans) returns (MsgBackfillSpansResponse);
}

message MsgProposeSpan {
  option (amino.name) = "heimdallv2/bor/MsgProposeSpan";
  option (cosmos.msg.v1.signer) = "proposer";
  uint64 span_id = 1;
  string proposer = 2 [ (cosmos_proto.scalar) = "cosmos.AddressString" ];
  uint64 start_block = 3;
  uint64 end_block = 4;
  string chain_id = 5;
  bytes seed = 6;
  string seed_author = 7 [ (cosmos_proto.scalar) = "cosmos.AddressString" ];
}

message MsgProposeSpanResponse {}

message MsgUpdateParams {
  option (cosmos.msg.v1.signer) = "authority";
  option (amino.name) = "heimdallv2/bor/MsgUpdateParams";
  string authority = 1 [ (cosmos_proto.scalar) = "cosmos.AddressString" ];
  Params params = 2
      [ (gogoproto.nullable) = false, (amino.dont_omitempty) = true ];
}

message MsgUpdateParamsResponse {}

message MsgBackfillSpans {
  option (amino.name) = "heimdallv2/bor/MsgBackfillSpans";
  option (cosmos.msg.v1.signer) = "proposer";
  string proposer = 1 [ (cosmos_proto.scalar) = "cosmos.AddressString" ];
  string chain_id = 2;
  uint64 latest_span_id = 3;
  uint64 latest_bor_span_id = 4;
}

message MsgBackfillSpansResponse {}
