syntax = "proto3";
package heimdallv2.topup.v1;

import "cosmos_proto/cosmos.proto";
import "cosmos/query/v1/query.proto";
import "gogoproto/gogo.proto";
import "google/api/annotations.proto";
import "heimdallv2/types/dividend_account.proto";
import "heimdallv2/types/hash.proto";

option go_package = "github.com/0xPolygon/heimdall-v2/x/topup/types";

/* TODO HV2: requests/responses and their json representations,
    together with API paths might have changed.
    Also, requests' bodies and path variables param should be ok,
    check for correct functioning of query params
*/

// Query defines the gRPC querier service.
service Query {
  // IsTopupTxOld queries for a specific topup tx to check its status (old
  // means already submitted)
  rpc IsTopupTxOld(QueryTopupSequenceRequest)
      returns (QueryIsTopupTxOldResponse) {
    option (cosmos.query.v1.module_query_safe) = true;
    option (google.api.http).get = "/heimdallv2/topup/isoldtx";
  }
  // GetTopupTxSequence queries for a specific topup tx and returns its sequence
  rpc GetTopupTxSequence(QueryTopupSequenceRequest)
      returns (QueryTopupSequenceResponse) {
    option (cosmos.query.v1.module_query_safe) = true;
    option (google.api.http).get = "/heimdallv2/topup/sequence";
  }
  // GetDividendAccountByAddress queries for a specific DividendAccount by its
  // address
  rpc GetDividendAccountByAddress(QueryDividendAccountRequest)
      returns (QueryDividendAccountResponse) {
    option (cosmos.query.v1.module_query_safe) = true;
    option (google.api.http).get =
        "/heimdallv2/topup/dividend-account/{address}";
  }
  // GetDividendAccountRootHash calculates and returns the dividend account root
  // hash
  rpc GetDividendAccountRootHash(QueryDividendAccountRootHashRequest)
      returns (QueryDividendAccountRootHashResponse) {
    option (cosmos.query.v1.module_query_safe) = true;
    option (google.api.http).get = "/heimdallv2/topup/dividend-account/root";
  }
  // VerifyAccountProof queries for the proof of an account given its address
  rpc VerifyAccountProof(QueryVerifyAccountProofRequest)
      returns (QueryVerifyAccountProofResponse) {
    option (cosmos.query.v1.module_query_safe) = true;
    option (google.api.http).get =
        "/heimdallv2/topup/account-proof/{address}/verify";
  }
  // GetAccountProof queries for the account proof of a given address
  rpc GetAccountProof(QueryAccountProofRequest)
      returns (QueryAccountProofResponse) {
    option (cosmos.query.v1.module_query_safe) = true;
    option (google.api.http).get = "/heimdallv2/topup/account-proof/{address}";
  }
}

// QueryTopupSequenceRequest is the request type for the GetTopupTxSequence and
// IsTopupTxOld RPC methods
message QueryTopupSequenceRequest {
  string tx_hash = 1;
  uint64 log_index = 2;
}

// QueryTopupSequenceResponse is response type for the GetTopupTxSequence RPC
// method
message QueryTopupSequenceResponse { string sequence = 1; }

// QueryIsTopupTxOldResponse is response type for the IsTopupTxOld RPC
// method
message QueryIsTopupTxOldResponse { bool is_old = 1; }

// QueryDividendAccountRequest is the request type for the
// GetDividendAccountByAddress RPC method
message QueryDividendAccountRequest {
  string address = 1 [ (cosmos_proto.scalar) = "cosmos.AddressString" ];
}

// QueryDividendAccountResponse the is response type for the
// GetDividendAccountByAddress RPC method
message QueryDividendAccountResponse {
  heimdallv2.types.DividendAccount dividend_account = 1
      [ (gogoproto.nullable) = false ];
}

// QueryDividendAccountRootHashRequest is the request type for the
// GetDividendAccountRootHash RPC method
message QueryDividendAccountRootHashRequest {}

// QueryDividendAccountRootResponse is the response type for the
// GetDividendAccountRootHash RPC method
message QueryDividendAccountRootHashResponse {
  heimdallv2.types.HeimdallHash account_root_hash = 1;
}

// QueryVerifyAccountProofParams is the request type for the VerifyAccountProof
// RPC method
message QueryVerifyAccountProofRequest {
  string address = 1 [ (cosmos_proto.scalar) = "cosmos.AddressString" ];
  string proof = 2;
}

// QueryVerifyAccountProofResponse the is response type for the
// VerifyAccountProof RPC method
message QueryVerifyAccountProofResponse { bool is_verified = 1; }

// QueryAccountProofRequest is the request type for the
// GetAccountProof RPC method
message QueryAccountProofRequest {
  string address = 1 [ (cosmos_proto.scalar) = "cosmos.AddressString" ];
}

// QueryAccountProofResponse the is response type for the GetAccountProof RPC
// method
message QueryAccountProofResponse { AccountProof proof = 1; }

// AccountProof embeds user and account info for the the
// QueryAccountProofResponse
message AccountProof {
  string address = 1 [ (cosmos_proto.scalar) = "cosmos.AddressString" ];
  string account_proof = 2;
  uint64 index = 3;
}
