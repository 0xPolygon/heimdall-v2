syntax = "proto3";
package heimdallv2.topup;

import "cosmos_proto/cosmos.proto";
import "cosmos/query/v1/query.proto";
import "gogoproto/gogo.proto";
import "google/api/annotations.proto";
import "heimdallv2/types/dividend_account.proto";
import "heimdallv2/topup/topup.proto";
import "amino/amino.proto";

option go_package = "github.com/0xPolygon/heimdall-v2/x/topup/types";

// Query defines the gRPC querier service.
service Query {
  // IsTopupTxOld queries for a specific topup tx to check its status (old
  // means already submitted)
  rpc IsTopupTxOld(QueryTopupSequenceRequest)
      returns (QueryIsTopupTxOldResponse) {
    option (cosmos.query.v1.module_query_safe) = true;
    option (google.api.http).get = "/topup/isoldtx";
  }
  // GetTopupTxSequence queries for a specific topup tx and returns its sequence
  rpc GetTopupTxSequence(QueryTopupSequenceRequest)
      returns (QueryTopupSequenceResponse) {
    option (cosmos.query.v1.module_query_safe) = true;
    option (google.api.http).get = "/topup/sequence";
  }
  // GetDividendAccountByAddress queries for a specific DividendAccount by its
  // address
  rpc GetDividendAccountByAddress(QueryDividendAccountRequest)
      returns (QueryDividendAccountResponse) {
    option (cosmos.query.v1.module_query_safe) = true;
    option (google.api.http).get = "/topup/dividend-account/{address}";
  }
  // GetDividendAccountRootHash calculates and returns the dividend account root
  // hash
  rpc GetDividendAccountRootHash(QueryDividendAccountRootHashRequest)
      returns (QueryDividendAccountRootHashResponse) {
    option (cosmos.query.v1.module_query_safe) = true;
    option (google.api.http).get = "/topup/dividend-account-root";
  }
  // VerifyAccountProof queries for the proof of an account given its address
  rpc VerifyAccountProofByAddress(QueryVerifyAccountProofRequest)
      returns (QueryVerifyAccountProofResponse) {
    option (cosmos.query.v1.module_query_safe) = true;
    option (google.api.http).get = "/topup/account-proof/{address}/verify";
  }
  // GetAccountProof queries for the account proof of a given address
  rpc GetAccountProofByAddress(QueryAccountProofRequest)
      returns (QueryAccountProofResponse) {
    option (cosmos.query.v1.module_query_safe) = true;
    option (google.api.http).get = "/topup/account-proof/{address}";
  }
}

// QueryTopupSequenceRequest is the request type for the GetTopupTxSequence and
// IsTopupTxOld RPC methods
message QueryTopupSequenceRequest {
  string tx_hash = 1 [ (amino.dont_omitempty) = true ];
  uint64 log_index = 2 [ (amino.dont_omitempty) = true ];
}

// QueryTopupSequenceResponse is response type for the GetTopupTxSequence RPC
// method
message QueryTopupSequenceResponse {
  string sequence = 1 [ (amino.dont_omitempty) = true ];
}

// QueryIsTopupTxOldResponse is response type for the IsTopupTxOld RPC
// method
message QueryIsTopupTxOldResponse {
  bool is_old = 1 [ (amino.dont_omitempty) = true ];
}

// QueryDividendAccountRequest is the request type for the
// GetDividendAccountByAddress RPC method
message QueryDividendAccountRequest {
  string address = 1 [
    (cosmos_proto.scalar) = "cosmos.AddressString",
    (amino.dont_omitempty) = true
  ];
}

// QueryDividendAccountResponse the is response type for the
// GetDividendAccountByAddress RPC method
message QueryDividendAccountResponse {
  heimdallv2.types.DividendAccount dividend_account = 1
      [ (gogoproto.nullable) = false, (amino.dont_omitempty) = true ];
}

// QueryDividendAccountRootHashRequest is the request type for the
// GetDividendAccountRootHash RPC method
message QueryDividendAccountRootHashRequest {}

// QueryDividendAccountRootResponse is the response type for the
// GetDividendAccountRootHash RPC method
message QueryDividendAccountRootHashResponse {
  bytes account_root_hash = 1 [ (amino.dont_omitempty) = true ];
}

// QueryVerifyAccountProofParams is the request type for the VerifyAccountProof
// RPC method
message QueryVerifyAccountProofRequest {
  string address = 1 [
    (cosmos_proto.scalar) = "cosmos.AddressString",
    (amino.dont_omitempty) = true
  ];
  string proof = 2 [ (amino.dont_omitempty) = true ];
}

// QueryVerifyAccountProofResponse the is response type for the
// VerifyAccountProof RPC method
message QueryVerifyAccountProofResponse {
  bool is_verified = 1 [ (amino.dont_omitempty) = true ];
}

// QueryAccountProofRequest is the request type for the
// GetAccountProof RPC method
message QueryAccountProofRequest {
  string address = 1 [
    (cosmos_proto.scalar) = "cosmos.AddressString",
    (amino.dont_omitempty) = true
  ];
}

// QueryAccountProofResponse the is response type for the GetAccountProof RPC
// method
message QueryAccountProofResponse {
  AccountProof proof = 1
      [ (gogoproto.nullable) = false, (amino.dont_omitempty) = true ];
}
