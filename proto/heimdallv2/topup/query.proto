syntax = "proto3";
package heimdallv2.topup;

import "cosmos_proto/cosmos.proto";
import "cosmos/query/v1/query.proto";
import "amino/amino.proto";
import "gogoproto/gogo.proto";
import "google/api/annotations.proto";
import "heimdallv2/types/dividend_account.proto";
import "heimdallv2/types/hash.proto";

option go_package = "github.com/0xPolygon/heimdall-v2/x/topup/types";

// TODO HV2: requests/responses and their json representations are changed.
// TODO HV2: body params should be ok, check for query params
// TODO HV2: API paths changed

// Query defines the gRPC querier service.
service Query {
  // IsTopupTxOld queries for a specific topup tx to check its status (old
  // means already submitted)
  rpc IsTopupTxOld(QueryTopupSequenceRequest)
      returns (QueryIsTopupTxOldResponse) {
    option (cosmos.query.v1.module_query_safe) = true;
    option (google.api.http).get = "/heimdallv2/topup/isoldtx";
  }
  // GetTopupTxSequence queries for a specific topup tx to check its status (old
  // means already submitted) and returns the sequence of the tx
  rpc GetTopupTxSequence(QueryTopupSequenceRequest)
      returns (QueryTopupSequenceResponse) {
    option (cosmos.query.v1.module_query_safe) = true;
    option (google.api.http).get = "/heimdallv2/topup/sequence";
  }
  // GetDividendAccountByAddress queries for a specific DividendAccount by its
  // address
  rpc GetDividendAccountByAddress(QueryDividendAccountRequest)
      returns (QueryDividendAccountResponse) {
    option (cosmos.query.v1.module_query_safe) = true;
    option (google.api.http).get =
        "/heimdallv2/topup/dividend-account/{address}";
  }
  // GetDividendAccountRootHash queries for the dividend account of the genesis
  // root hash
  rpc GetDividendAccountRootHash(QueryDividendAccountRootHashRequest)
      returns (QueryDividendAccountRootHashResponse) {
    option (cosmos.query.v1.module_query_safe) = true;
    option (google.api.http).get = "/heimdallv2/topup/dividend-account/root";
  }
  // VerifyAccountProof queries for the proof of an account given its address
  rpc VerifyAccountProof(QueryVerifyAccountProofRequest)
      returns (QueryVerifyAccountProofResponse) {
    option (cosmos.query.v1.module_query_safe) = true;
    option (google.api.http).get =
        "/heimdallv2/topup/account-proof/{address}/verify";
  }
  // GetDividendAccountProof queries for the dividend account proof of a given
  // address
  rpc GetDividendAccountProof(QueryDividendAccountProofRequest)
      returns (QueryDividendAccountProofResponse) {
    option (cosmos.query.v1.module_query_safe) = true;
    option (google.api.http).get = "/heimdallv2/topup/account-proof/{address}";
  }
}

// QueryTopupSequenceRequest is the request type for the GetTopupTxSequence and
// IsTopupTxOld RPC methods
message QueryTopupSequenceRequest {
  string tx_hash = 1 [ (amino.dont_omitempty) = true ];
  uint64 log_index = 2 [ (amino.dont_omitempty) = true ];
}

// QueryTopupSequenceResponse is response type for the GetTopupTxSequence RPC
// method
message QueryTopupSequenceResponse {
  string sequence = 1
      [ (amino.dont_omitempty) = true, (gogoproto.jsontag) = "sequence" ];
}

// QueryIsTopupTxOldResponse is response type for the IsTopupTxOld RPC
// method
message QueryIsTopupTxOldResponse {
  bool is_old = 1
      [ (amino.dont_omitempty) = true, (gogoproto.jsontag) = "isOld" ];
}

// QueryDividendAccountRequest is the request type for the
// GetDividendAccountByAddress RPC method
message QueryDividendAccountRequest {
  string address = 1 [
    (amino.dont_omitempty) = true,
    (gogoproto.jsontag) = "address",
    (cosmos_proto.scalar) = "cosmos.AddressString"
  ];
}

// QueryDividendAccountResponse the is response type for the
// GetDividendAccountByAddress RPC method
message QueryDividendAccountResponse {
  heimdallv2.types.DividendAccount dividend_account = 2
      [ (gogoproto.nullable) = false, (gogoproto.jsontag) = "dividendAccount" ];
}

// QueryDividendAccountRootHashRequest is the request type for the
// GetDividendAccountRootHash RPC method
message QueryDividendAccountRootHashRequest {}

// QueryDividendAccountRootResponse the is response type for the
// GetDividendAccountRootHash RPC method
message QueryDividendAccountRootHashResponse {
  heimdallv2.types.HeimdallHash account_root_hash = 2 [
    (amino.dont_omitempty) = true,
    (gogoproto.jsontag) = "accountRootHash"
  ];
}

// QueryVerifyAccountProofParams is the request type for the VerifyAccountProof
// RPC method
message QueryVerifyAccountProofRequest {
  string address = 1
      [ (amino.dont_omitempty) = true, (gogoproto.jsontag) = "address" ];
  string proof = 2
      [ (amino.dont_omitempty) = true, (gogoproto.jsontag) = "accountProof" ];
}

// QueryVerifyAccountProofResponse the is response type for the
// VerifyAccountProof RPC method
message QueryVerifyAccountProofResponse {
  // TODO HV2: check VerifyAccountProofHandlerFn where result can also be
  // embedded in a map.
  bool is_verified = 2
      [ (amino.dont_omitempty) = true, (gogoproto.jsontag) = "isVerified" ];
}

// QueryDividendAccountProofParams is the request type for the
// GetDividendAccountProof RPC method
message QueryDividendAccountProofRequest {
  string address = 1
      [ (amino.dont_omitempty) = true, (gogoproto.jsontag) = "address" ];
}

// QueryDividendAccountProofResponse the is response type for the
// GetDividendAccountProof RPC method
message QueryDividendAccountProofResponse {
  DividendAccountProof proof = 2
      [ (amino.dont_omitempty) = true, (gogoproto.jsontag) = "proof" ];
}

// DividendAccountProof embeds user and account info for the the
// QueryDividendAccountProofResponse
message DividendAccountProof {
  string address = 1
      [ (amino.dont_omitempty) = true, (gogoproto.jsontag) = "address" ];
  string account_proof = 2
      [ (amino.dont_omitempty) = true, (gogoproto.jsontag) = "accountProof" ];
  uint64 index = 3
      [ (amino.dont_omitempty) = true, (gogoproto.jsontag) = "index" ];
}
