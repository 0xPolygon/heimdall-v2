syntax = "proto3";
package heimdallv2.stake.v1;

import "gogoproto/gogo.proto";
import "google/api/annotations.proto";
import "cosmos/query/v1/query.proto";
import "amino/amino.proto";
import "heimdallv2/stake/v1/validator.proto";

option go_package = "github.com/0xPolygon/heimdall-v2/x/stake/types";

// Query defines the gRPC querier service.
service Query {

  // CurrentValidatorSet queries for the current validator set
  rpc CurrentValidatorSet(QueryCurrentValidatorSetRequest)
      returns (QueryCurrentValidatorSetResponse) {
    option (cosmos.query.v1.module_query_safe) = true;
    option (google.api.http).get = "/staking/validator-set";
  }

  // Signer queries validator info for a given validator address.
  rpc Signer(QuerySignerRequest) returns (QuerySignerResponse) {
    option (cosmos.query.v1.module_query_safe) = true;
    option (google.api.http).get = "/staking/signer/{val_address}";
  }

  // Validator queries validator info for a given validator id.
  rpc Validator(QueryValidatorRequest) returns (QueryValidatorResponse) {
    option (cosmos.query.v1.module_query_safe) = true;
    option (google.api.http).get = "/staking/validator/{id}";
  }

  // ValidatorStatus queries validator status for given validator val_address.
  rpc ValidatorStatus(QueryValidatorStatusRequest)
      returns (QueryValidatorStatusResponse) {
    option (cosmos.query.v1.module_query_safe) = true;
    option (google.api.http).get = "/staking/validator-status/{val_address}";
  }

  // TotalPower queries the total power of a validator set
  rpc TotalPower(QueryTotalPowerRequest) returns (QueryTotalPowerResponse) {
    option (cosmos.query.v1.module_query_safe) = true;
    option (google.api.http).get = "/staking/total-power";
  }

  // StakingSequence queries for the staking sequence
  rpc StakingIsOldTx(QueryStakingIsOldTxRequest)
      returns (QueryStakingIsOldTxResponse) {
    option (cosmos.query.v1.module_query_safe) = true;
    option (google.api.http).get = "/staking/is-old-tx";
  }
}

// QueryCurrentValidatorSetRequest is request type for Query/CurrentValidatorSet
// RPC method.
message QueryCurrentValidatorSetRequest {}

// QueryCurrentValidatorSetResponse is response type for the Query/ValidatorSet
// RPC method
message QueryCurrentValidatorSetResponse {
  // validators contains all the queried svalidators.
  ValidatorSet validator_set = 1
      [ (gogoproto.nullable) = false, (amino.dont_omitempty) = true ];
}

// QuerySignerRequest is response type for the Query/Signer RPC method
message QuerySignerRequest {
  // val_address defines the validator val_address to query for.
  string val_address = 1 [ (amino.dont_omitempty) = true ];
}

// QuerySignerResponse is response type for the Query/Signer RPC method
message QuerySignerResponse {
  // validator defines the validator info.
  Validator validator = 1
      [ (gogoproto.nullable) = false, (amino.dont_omitempty) = true ];
}

// QueryValidatorRequest is request type for the Query/Validator RPC method
message QueryValidatorRequest {
  // id defines the validator id to query for.
  uint64 id = 1 [ (amino.dont_omitempty) = true ];
}

// QueryValidatorResponse is response type for the Query/Validator RPC method
message QueryValidatorResponse {
  // validator defines the validator info.
  Validator validator = 1
      [ (gogoproto.nullable) = false, (amino.dont_omitempty) = true ];
}

// QueryTotalPowerRequest is request type for the
// Query/TotalPower RPC method
message QueryTotalPowerRequest {}

// QueryTotalPowerResponse is response type for the
// Query/TotalPower RPC method
message QueryTotalPowerResponse {
  // total power denotes the total power of all the validators
  int64 total_power = 1 [ (amino.dont_omitempty) = true ];
}

// QueryValidatorStatusRequest is response type for the Query/ValidatorStatus
// RPC method
message QueryValidatorStatusRequest {
  // val_address defines the validator address to query for.
  string val_address = 1 [ (amino.dont_omitempty) = true ];
}

// QueryValidatorStatusResponse is response type for the Query/ValidatorStatus
// RPC method
message QueryValidatorStatusResponse {
  // status define whether the particular validator is active in the validator set
  bool status = 1 [ (amino.dont_omitempty) = true ];
}

// QueryStakingIsOldTxRequest is request type for the Query/StakingIsOldTx
// RPC method
message QueryStakingIsOldTxRequest {
  string tx_hash = 1 [ (amino.dont_omitempty) = true ];
  uint64 log_index = 2 [ (amino.dont_omitempty) = true ];
}

// QueryStakingIsOldTxResponse is response type for the Query/StakingIsOldTx
// RPC method
message QueryStakingIsOldTxResponse {
  // status define the active status of validator
  bool status = 1 [ (amino.dont_omitempty) = true ];
}
