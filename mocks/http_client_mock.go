// Code generated by MockGen. DO NOT EDIT.
// Source: ./helper/call.go

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	big "math/big"
	reflect "reflect"

	erc20 "github.com/0xPolygon/heimdall-v2/contracts/erc20"
	rootchain "github.com/0xPolygon/heimdall-v2/contracts/rootchain"
	slashmanager "github.com/0xPolygon/heimdall-v2/contracts/slashmanager"
	stakemanager "github.com/0xPolygon/heimdall-v2/contracts/stakemanager"
	stakinginfo "github.com/0xPolygon/heimdall-v2/contracts/stakinginfo"
	statereceiver "github.com/0xPolygon/heimdall-v2/contracts/statereceiver"
	statesender "github.com/0xPolygon/heimdall-v2/contracts/statesender"
	validatorset "github.com/0xPolygon/heimdall-v2/contracts/validatorset"
	types "github.com/0xPolygon/heimdall-v2/x/stake/types"
	common "github.com/ethereum/go-ethereum/common"
	types0 "github.com/ethereum/go-ethereum/core/types"
	gomock "github.com/golang/mock/gomock"
)

// MockIContractCaller is a mock of IContractCaller interface.
type MockIContractCaller struct {
	ctrl     *gomock.Controller
	recorder *MockIContractCallerMockRecorder
}

// MockIContractCallerMockRecorder is the mock recorder for MockIContractCaller.
type MockIContractCallerMockRecorder struct {
	mock *MockIContractCaller
}

// NewMockIContractCaller creates a new mock instance.
func NewMockIContractCaller(ctrl *gomock.Controller) *MockIContractCaller {
	mock := &MockIContractCaller{ctrl: ctrl}
	mock.recorder = &MockIContractCallerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIContractCaller) EXPECT() *MockIContractCallerMockRecorder {
	return m.recorder
}

// ApproveTokens mocks base method.
func (m *MockIContractCaller) ApproveTokens(arg0 *big.Int, arg1, arg2 common.Address, arg3 *erc20.Erc20) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ApproveTokens", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(error)
	return ret0
}

// ApproveTokens indicates an expected call of ApproveTokens.
func (mr *MockIContractCallerMockRecorder) ApproveTokens(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ApproveTokens", reflect.TypeOf((*MockIContractCaller)(nil).ApproveTokens), arg0, arg1, arg2, arg3)
}

// CheckIfBlocksExist mocks base method.
func (m *MockIContractCaller) CheckIfBlocksExist(end uint64) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CheckIfBlocksExist", end)
	ret0, _ := ret[0].(bool)
	return ret0
}

// CheckIfBlocksExist indicates an expected call of CheckIfBlocksExist.
func (mr *MockIContractCallerMockRecorder) CheckIfBlocksExist(end interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckIfBlocksExist", reflect.TypeOf((*MockIContractCaller)(nil).CheckIfBlocksExist), end)
}

// CurrentAccountStateRoot mocks base method.
func (m *MockIContractCaller) CurrentAccountStateRoot(stakingInfoInstance *stakinginfo.Stakinginfo) ([32]byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CurrentAccountStateRoot", stakingInfoInstance)
	ret0, _ := ret[0].([32]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CurrentAccountStateRoot indicates an expected call of CurrentAccountStateRoot.
func (mr *MockIContractCallerMockRecorder) CurrentAccountStateRoot(stakingInfoInstance interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CurrentAccountStateRoot", reflect.TypeOf((*MockIContractCaller)(nil).CurrentAccountStateRoot), stakingInfoInstance)
}

// CurrentHeaderBlock mocks base method.
func (m *MockIContractCaller) CurrentHeaderBlock(rootChainInstance *rootchain.Rootchain, childBlockInterval uint64) (uint64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CurrentHeaderBlock", rootChainInstance, childBlockInterval)
	ret0, _ := ret[0].(uint64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CurrentHeaderBlock indicates an expected call of CurrentHeaderBlock.
func (mr *MockIContractCallerMockRecorder) CurrentHeaderBlock(rootChainInstance, childBlockInterval interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CurrentHeaderBlock", reflect.TypeOf((*MockIContractCaller)(nil).CurrentHeaderBlock), rootChainInstance, childBlockInterval)
}

// CurrentSpanNumber mocks base method.
func (m *MockIContractCaller) CurrentSpanNumber(validatorSet *validatorset.Validatorset) *big.Int {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CurrentSpanNumber", validatorSet)
	ret0, _ := ret[0].(*big.Int)
	return ret0
}

// CurrentSpanNumber indicates an expected call of CurrentSpanNumber.
func (mr *MockIContractCallerMockRecorder) CurrentSpanNumber(validatorSet interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CurrentSpanNumber", reflect.TypeOf((*MockIContractCaller)(nil).CurrentSpanNumber), validatorSet)
}

// CurrentStateCounter mocks base method.
func (m *MockIContractCaller) CurrentStateCounter(stateSenderInstance *statesender.Statesender) *big.Int {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CurrentStateCounter", stateSenderInstance)
	ret0, _ := ret[0].(*big.Int)
	return ret0
}

// CurrentStateCounter indicates an expected call of CurrentStateCounter.
func (mr *MockIContractCallerMockRecorder) CurrentStateCounter(stateSenderInstance interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CurrentStateCounter", reflect.TypeOf((*MockIContractCaller)(nil).CurrentStateCounter), stateSenderInstance)
}

// DecodeNewHeaderBlockEvent mocks base method.
func (m *MockIContractCaller) DecodeNewHeaderBlockEvent(arg0 string, arg1 *types0.Receipt, arg2 uint64) (*rootchain.RootchainNewHeaderBlock, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DecodeNewHeaderBlockEvent", arg0, arg1, arg2)
	ret0, _ := ret[0].(*rootchain.RootchainNewHeaderBlock)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DecodeNewHeaderBlockEvent indicates an expected call of DecodeNewHeaderBlockEvent.
func (mr *MockIContractCallerMockRecorder) DecodeNewHeaderBlockEvent(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DecodeNewHeaderBlockEvent", reflect.TypeOf((*MockIContractCaller)(nil).DecodeNewHeaderBlockEvent), arg0, arg1, arg2)
}

// DecodeSignerUpdateEvent mocks base method.
func (m *MockIContractCaller) DecodeSignerUpdateEvent(arg0 string, arg1 *types0.Receipt, arg2 uint64) (*stakinginfo.StakinginfoSignerChange, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DecodeSignerUpdateEvent", arg0, arg1, arg2)
	ret0, _ := ret[0].(*stakinginfo.StakinginfoSignerChange)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DecodeSignerUpdateEvent indicates an expected call of DecodeSignerUpdateEvent.
func (mr *MockIContractCallerMockRecorder) DecodeSignerUpdateEvent(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DecodeSignerUpdateEvent", reflect.TypeOf((*MockIContractCaller)(nil).DecodeSignerUpdateEvent), arg0, arg1, arg2)
}

// DecodeSlashedEvent mocks base method.
func (m *MockIContractCaller) DecodeSlashedEvent(arg0 string, arg1 *types0.Receipt, arg2 uint64) (*stakinginfo.StakinginfoSlashed, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DecodeSlashedEvent", arg0, arg1, arg2)
	ret0, _ := ret[0].(*stakinginfo.StakinginfoSlashed)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DecodeSlashedEvent indicates an expected call of DecodeSlashedEvent.
func (mr *MockIContractCallerMockRecorder) DecodeSlashedEvent(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DecodeSlashedEvent", reflect.TypeOf((*MockIContractCaller)(nil).DecodeSlashedEvent), arg0, arg1, arg2)
}

// DecodeStateSyncedEvent mocks base method.
func (m *MockIContractCaller) DecodeStateSyncedEvent(arg0 string, arg1 *types0.Receipt, arg2 uint64) (*statesender.StatesenderStateSynced, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DecodeStateSyncedEvent", arg0, arg1, arg2)
	ret0, _ := ret[0].(*statesender.StatesenderStateSynced)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DecodeStateSyncedEvent indicates an expected call of DecodeStateSyncedEvent.
func (mr *MockIContractCallerMockRecorder) DecodeStateSyncedEvent(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DecodeStateSyncedEvent", reflect.TypeOf((*MockIContractCaller)(nil).DecodeStateSyncedEvent), arg0, arg1, arg2)
}

// DecodeUnJailedEvent mocks base method.
func (m *MockIContractCaller) DecodeUnJailedEvent(arg0 string, arg1 *types0.Receipt, arg2 uint64) (*stakinginfo.StakinginfoUnJailed, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DecodeUnJailedEvent", arg0, arg1, arg2)
	ret0, _ := ret[0].(*stakinginfo.StakinginfoUnJailed)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DecodeUnJailedEvent indicates an expected call of DecodeUnJailedEvent.
func (mr *MockIContractCallerMockRecorder) DecodeUnJailedEvent(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DecodeUnJailedEvent", reflect.TypeOf((*MockIContractCaller)(nil).DecodeUnJailedEvent), arg0, arg1, arg2)
}

// DecodeValidatorExitEvent mocks base method.
func (m *MockIContractCaller) DecodeValidatorExitEvent(arg0 string, arg1 *types0.Receipt, arg2 uint64) (*stakinginfo.StakinginfoUnstakeInit, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DecodeValidatorExitEvent", arg0, arg1, arg2)
	ret0, _ := ret[0].(*stakinginfo.StakinginfoUnstakeInit)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DecodeValidatorExitEvent indicates an expected call of DecodeValidatorExitEvent.
func (mr *MockIContractCallerMockRecorder) DecodeValidatorExitEvent(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DecodeValidatorExitEvent", reflect.TypeOf((*MockIContractCaller)(nil).DecodeValidatorExitEvent), arg0, arg1, arg2)
}

// DecodeValidatorJoinEvent mocks base method.
func (m *MockIContractCaller) DecodeValidatorJoinEvent(arg0 string, arg1 *types0.Receipt, arg2 uint64) (*stakinginfo.StakinginfoStaked, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DecodeValidatorJoinEvent", arg0, arg1, arg2)
	ret0, _ := ret[0].(*stakinginfo.StakinginfoStaked)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DecodeValidatorJoinEvent indicates an expected call of DecodeValidatorJoinEvent.
func (mr *MockIContractCallerMockRecorder) DecodeValidatorJoinEvent(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DecodeValidatorJoinEvent", reflect.TypeOf((*MockIContractCaller)(nil).DecodeValidatorJoinEvent), arg0, arg1, arg2)
}

// DecodeValidatorStakeUpdateEvent mocks base method.
func (m *MockIContractCaller) DecodeValidatorStakeUpdateEvent(arg0 string, arg1 *types0.Receipt, arg2 uint64) (*stakinginfo.StakinginfoStakeUpdate, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DecodeValidatorStakeUpdateEvent", arg0, arg1, arg2)
	ret0, _ := ret[0].(*stakinginfo.StakinginfoStakeUpdate)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DecodeValidatorStakeUpdateEvent indicates an expected call of DecodeValidatorStakeUpdateEvent.
func (mr *MockIContractCallerMockRecorder) DecodeValidatorStakeUpdateEvent(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DecodeValidatorStakeUpdateEvent", reflect.TypeOf((*MockIContractCaller)(nil).DecodeValidatorStakeUpdateEvent), arg0, arg1, arg2)
}

// DecodeValidatorTopupFeesEvent mocks base method.
func (m *MockIContractCaller) DecodeValidatorTopupFeesEvent(arg0 string, arg1 *types0.Receipt, arg2 uint64) (*stakinginfo.StakinginfoTopUpFee, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DecodeValidatorTopupFeesEvent", arg0, arg1, arg2)
	ret0, _ := ret[0].(*stakinginfo.StakinginfoTopUpFee)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DecodeValidatorTopupFeesEvent indicates an expected call of DecodeValidatorTopupFeesEvent.
func (mr *MockIContractCallerMockRecorder) DecodeValidatorTopupFeesEvent(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DecodeValidatorTopupFeesEvent", reflect.TypeOf((*MockIContractCaller)(nil).DecodeValidatorTopupFeesEvent), arg0, arg1, arg2)
}

// GetBalance mocks base method.
func (m *MockIContractCaller) GetBalance(address common.Address) (*big.Int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBalance", address)
	ret0, _ := ret[0].(*big.Int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBalance indicates an expected call of GetBalance.
func (mr *MockIContractCallerMockRecorder) GetBalance(address interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBalance", reflect.TypeOf((*MockIContractCaller)(nil).GetBalance), address)
}

// GetBlockNumberFromTxHash mocks base method.
func (m *MockIContractCaller) GetBlockNumberFromTxHash(arg0 common.Hash) (*big.Int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBlockNumberFromTxHash", arg0)
	ret0, _ := ret[0].(*big.Int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBlockNumberFromTxHash indicates an expected call of GetBlockNumberFromTxHash.
func (mr *MockIContractCallerMockRecorder) GetBlockNumberFromTxHash(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBlockNumberFromTxHash", reflect.TypeOf((*MockIContractCaller)(nil).GetBlockNumberFromTxHash), arg0)
}

// GetBorChainBlock mocks base method.
func (m *MockIContractCaller) GetBorChainBlock(arg0 context.Context, arg1 *big.Int) (*types0.Header, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBorChainBlock", arg0, arg1)
	ret0, _ := ret[0].(*types0.Header)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBorChainBlock indicates an expected call of GetBorChainBlock.
func (mr *MockIContractCallerMockRecorder) GetBorChainBlock(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBorChainBlock", reflect.TypeOf((*MockIContractCaller)(nil).GetBorChainBlock), arg0, arg1)
}

// GetBorChainBlockAuthor mocks base method.
func (m *MockIContractCaller) GetBorChainBlockAuthor(arg0 *big.Int) (*common.Address, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBorChainBlockAuthor", arg0)
	ret0, _ := ret[0].(*common.Address)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBorChainBlockAuthor indicates an expected call of GetBorChainBlockAuthor.
func (mr *MockIContractCallerMockRecorder) GetBorChainBlockAuthor(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBorChainBlockAuthor", reflect.TypeOf((*MockIContractCaller)(nil).GetBorChainBlockAuthor), arg0)
}

// GetBorTxReceipt mocks base method.
func (m *MockIContractCaller) GetBorTxReceipt(arg0 common.Hash) (*types0.Receipt, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBorTxReceipt", arg0)
	ret0, _ := ret[0].(*types0.Receipt)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBorTxReceipt indicates an expected call of GetBorTxReceipt.
func (mr *MockIContractCallerMockRecorder) GetBorTxReceipt(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBorTxReceipt", reflect.TypeOf((*MockIContractCaller)(nil).GetBorTxReceipt), arg0)
}

// GetCheckpointSign mocks base method.
func (m *MockIContractCaller) GetCheckpointSign(txHash common.Hash) ([]byte, []byte, []byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCheckpointSign", txHash)
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].([]byte)
	ret2, _ := ret[2].([]byte)
	ret3, _ := ret[3].(error)
	return ret0, ret1, ret2, ret3
}

// GetCheckpointSign indicates an expected call of GetCheckpointSign.
func (mr *MockIContractCallerMockRecorder) GetCheckpointSign(txHash interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCheckpointSign", reflect.TypeOf((*MockIContractCaller)(nil).GetCheckpointSign), txHash)
}

// GetConfirmedTxReceipt mocks base method.
func (m *MockIContractCaller) GetConfirmedTxReceipt(arg0 common.Hash, arg1 uint64) (*types0.Receipt, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetConfirmedTxReceipt", arg0, arg1)
	ret0, _ := ret[0].(*types0.Receipt)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetConfirmedTxReceipt indicates an expected call of GetConfirmedTxReceipt.
func (mr *MockIContractCallerMockRecorder) GetConfirmedTxReceipt(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetConfirmedTxReceipt", reflect.TypeOf((*MockIContractCaller)(nil).GetConfirmedTxReceipt), arg0, arg1)
}

// GetHeaderInfo mocks base method.
func (m *MockIContractCaller) GetHeaderInfo(headerID uint64, rootChainInstance *rootchain.Rootchain, childBlockInterval uint64) (common.Hash, uint64, uint64, uint64, string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetHeaderInfo", headerID, rootChainInstance, childBlockInterval)
	ret0, _ := ret[0].(common.Hash)
	ret1, _ := ret[1].(uint64)
	ret2, _ := ret[2].(uint64)
	ret3, _ := ret[3].(uint64)
	ret4, _ := ret[4].(string)
	ret5, _ := ret[5].(error)
	return ret0, ret1, ret2, ret3, ret4, ret5
}

// GetHeaderInfo indicates an expected call of GetHeaderInfo.
func (mr *MockIContractCallerMockRecorder) GetHeaderInfo(headerID, rootChainInstance, childBlockInterval interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetHeaderInfo", reflect.TypeOf((*MockIContractCaller)(nil).GetHeaderInfo), headerID, rootChainInstance, childBlockInterval)
}

// GetLastChildBlock mocks base method.
func (m *MockIContractCaller) GetLastChildBlock(rootChainInstance *rootchain.Rootchain) (uint64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLastChildBlock", rootChainInstance)
	ret0, _ := ret[0].(uint64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetLastChildBlock indicates an expected call of GetLastChildBlock.
func (mr *MockIContractCallerMockRecorder) GetLastChildBlock(rootChainInstance interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLastChildBlock", reflect.TypeOf((*MockIContractCaller)(nil).GetLastChildBlock), rootChainInstance)
}

// GetMainChainBlock mocks base method.
func (m *MockIContractCaller) GetMainChainBlock(arg0 *big.Int) (*types0.Header, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMainChainBlock", arg0)
	ret0, _ := ret[0].(*types0.Header)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMainChainBlock indicates an expected call of GetMainChainBlock.
func (mr *MockIContractCallerMockRecorder) GetMainChainBlock(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMainChainBlock", reflect.TypeOf((*MockIContractCaller)(nil).GetMainChainBlock), arg0)
}

// GetMainTxReceipt mocks base method.
func (m *MockIContractCaller) GetMainTxReceipt(arg0 common.Hash) (*types0.Receipt, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMainTxReceipt", arg0)
	ret0, _ := ret[0].(*types0.Receipt)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMainTxReceipt indicates an expected call of GetMainTxReceipt.
func (mr *MockIContractCallerMockRecorder) GetMainTxReceipt(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMainTxReceipt", reflect.TypeOf((*MockIContractCaller)(nil).GetMainTxReceipt), arg0)
}

// GetRootChainInstance mocks base method.
func (m *MockIContractCaller) GetRootChainInstance(rootChainAddress string) (*rootchain.Rootchain, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRootChainInstance", rootChainAddress)
	ret0, _ := ret[0].(*rootchain.Rootchain)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRootChainInstance indicates an expected call of GetRootChainInstance.
func (mr *MockIContractCallerMockRecorder) GetRootChainInstance(rootChainAddress interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRootChainInstance", reflect.TypeOf((*MockIContractCaller)(nil).GetRootChainInstance), rootChainAddress)
}

// GetRootHash mocks base method.
func (m *MockIContractCaller) GetRootHash(start, end, checkpointLength uint64) ([]byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRootHash", start, end, checkpointLength)
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRootHash indicates an expected call of GetRootHash.
func (mr *MockIContractCallerMockRecorder) GetRootHash(start, end, checkpointLength interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRootHash", reflect.TypeOf((*MockIContractCaller)(nil).GetRootHash), start, end, checkpointLength)
}

// GetSlashManagerInstance mocks base method.
func (m *MockIContractCaller) GetSlashManagerInstance(slashManagerAddress string) (*slashmanager.Slashmanager, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSlashManagerInstance", slashManagerAddress)
	ret0, _ := ret[0].(*slashmanager.Slashmanager)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSlashManagerInstance indicates an expected call of GetSlashManagerInstance.
func (mr *MockIContractCallerMockRecorder) GetSlashManagerInstance(slashManagerAddress interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSlashManagerInstance", reflect.TypeOf((*MockIContractCaller)(nil).GetSlashManagerInstance), slashManagerAddress)
}

// GetSpanDetails mocks base method.
func (m *MockIContractCaller) GetSpanDetails(id *big.Int, validatorSet *validatorset.Validatorset) (*big.Int, *big.Int, *big.Int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSpanDetails", id, validatorSet)
	ret0, _ := ret[0].(*big.Int)
	ret1, _ := ret[1].(*big.Int)
	ret2, _ := ret[2].(*big.Int)
	ret3, _ := ret[3].(error)
	return ret0, ret1, ret2, ret3
}

// GetSpanDetails indicates an expected call of GetSpanDetails.
func (mr *MockIContractCallerMockRecorder) GetSpanDetails(id, validatorSet interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSpanDetails", reflect.TypeOf((*MockIContractCaller)(nil).GetSpanDetails), id, validatorSet)
}

// GetStakeManagerInstance mocks base method.
func (m *MockIContractCaller) GetStakeManagerInstance(stakingManagerAddress string) (*stakemanager.Stakemanager, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetStakeManagerInstance", stakingManagerAddress)
	ret0, _ := ret[0].(*stakemanager.Stakemanager)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetStakeManagerInstance indicates an expected call of GetStakeManagerInstance.
func (mr *MockIContractCallerMockRecorder) GetStakeManagerInstance(stakingManagerAddress interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetStakeManagerInstance", reflect.TypeOf((*MockIContractCaller)(nil).GetStakeManagerInstance), stakingManagerAddress)
}

// GetStakingInfoInstance mocks base method.
func (m *MockIContractCaller) GetStakingInfoInstance(stakingInfoAddress string) (*stakinginfo.Stakinginfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetStakingInfoInstance", stakingInfoAddress)
	ret0, _ := ret[0].(*stakinginfo.Stakinginfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetStakingInfoInstance indicates an expected call of GetStakingInfoInstance.
func (mr *MockIContractCallerMockRecorder) GetStakingInfoInstance(stakingInfoAddress interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetStakingInfoInstance", reflect.TypeOf((*MockIContractCaller)(nil).GetStakingInfoInstance), stakingInfoAddress)
}

// GetStateReceiverInstance mocks base method.
func (m *MockIContractCaller) GetStateReceiverInstance(stateReceiverAddress string) (*statereceiver.Statereceiver, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetStateReceiverInstance", stateReceiverAddress)
	ret0, _ := ret[0].(*statereceiver.Statereceiver)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetStateReceiverInstance indicates an expected call of GetStateReceiverInstance.
func (mr *MockIContractCallerMockRecorder) GetStateReceiverInstance(stateReceiverAddress interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetStateReceiverInstance", reflect.TypeOf((*MockIContractCaller)(nil).GetStateReceiverInstance), stateReceiverAddress)
}

// GetStateSenderInstance mocks base method.
func (m *MockIContractCaller) GetStateSenderInstance(stateSenderAddress string) (*statesender.Statesender, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetStateSenderInstance", stateSenderAddress)
	ret0, _ := ret[0].(*statesender.Statesender)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetStateSenderInstance indicates an expected call of GetStateSenderInstance.
func (mr *MockIContractCallerMockRecorder) GetStateSenderInstance(stateSenderAddress interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetStateSenderInstance", reflect.TypeOf((*MockIContractCaller)(nil).GetStateSenderInstance), stateSenderAddress)
}

// GetTokenInstance mocks base method.
func (m *MockIContractCaller) GetTokenInstance(tokenAddress string) (*erc20.Erc20, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTokenInstance", tokenAddress)
	ret0, _ := ret[0].(*erc20.Erc20)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTokenInstance indicates an expected call of GetTokenInstance.
func (mr *MockIContractCallerMockRecorder) GetTokenInstance(tokenAddress interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTokenInstance", reflect.TypeOf((*MockIContractCaller)(nil).GetTokenInstance), tokenAddress)
}

// GetValidatorInfo mocks base method.
func (m *MockIContractCaller) GetValidatorInfo(valID uint64, stakingInfoInstance *stakinginfo.Stakinginfo) (types.Validator, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetValidatorInfo", valID, stakingInfoInstance)
	ret0, _ := ret[0].(types.Validator)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetValidatorInfo indicates an expected call of GetValidatorInfo.
func (mr *MockIContractCallerMockRecorder) GetValidatorInfo(valID, stakingInfoInstance interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetValidatorInfo", reflect.TypeOf((*MockIContractCaller)(nil).GetValidatorInfo), valID, stakingInfoInstance)
}

// GetValidatorSetInstance mocks base method.
func (m *MockIContractCaller) GetValidatorSetInstance(validatorSetAddress string) (*validatorset.Validatorset, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetValidatorSetInstance", validatorSetAddress)
	ret0, _ := ret[0].(*validatorset.Validatorset)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetValidatorSetInstance indicates an expected call of GetValidatorSetInstance.
func (mr *MockIContractCallerMockRecorder) GetValidatorSetInstance(validatorSetAddress interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetValidatorSetInstance", reflect.TypeOf((*MockIContractCaller)(nil).GetValidatorSetInstance), validatorSetAddress)
}

// GetVoteOnHash mocks base method.
func (m *MockIContractCaller) GetVoteOnHash(start, end uint64, hash, milestoneID string) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetVoteOnHash", start, end, hash, milestoneID)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetVoteOnHash indicates an expected call of GetVoteOnHash.
func (mr *MockIContractCallerMockRecorder) GetVoteOnHash(start, end, hash, milestoneID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetVoteOnHash", reflect.TypeOf((*MockIContractCaller)(nil).GetVoteOnHash), start, end, hash, milestoneID)
}

// IsTxConfirmed mocks base method.
func (m *MockIContractCaller) IsTxConfirmed(arg0 common.Hash, arg1 uint64) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsTxConfirmed", arg0, arg1)
	ret0, _ := ret[0].(bool)
	return ret0
}

// IsTxConfirmed indicates an expected call of IsTxConfirmed.
func (mr *MockIContractCallerMockRecorder) IsTxConfirmed(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsTxConfirmed", reflect.TypeOf((*MockIContractCaller)(nil).IsTxConfirmed), arg0, arg1)
}

// SendCheckpoint mocks base method.
func (m *MockIContractCaller) SendCheckpoint(signedData []byte, sigs [][3]*big.Int, rootChainAddress common.Address, rootChainInstance *rootchain.Rootchain) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendCheckpoint", signedData, sigs, rootChainAddress, rootChainInstance)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendCheckpoint indicates an expected call of SendCheckpoint.
func (mr *MockIContractCallerMockRecorder) SendCheckpoint(signedData, sigs, rootChainAddress, rootChainInstance interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendCheckpoint", reflect.TypeOf((*MockIContractCaller)(nil).SendCheckpoint), signedData, sigs, rootChainAddress, rootChainInstance)
}

// StakeFor mocks base method.
func (m *MockIContractCaller) StakeFor(arg0 common.Address, arg1, arg2 *big.Int, arg3 bool, arg4 common.Address, arg5 *stakemanager.Stakemanager) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StakeFor", arg0, arg1, arg2, arg3, arg4, arg5)
	ret0, _ := ret[0].(error)
	return ret0
}

// StakeFor indicates an expected call of StakeFor.
func (mr *MockIContractCallerMockRecorder) StakeFor(arg0, arg1, arg2, arg3, arg4, arg5 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StakeFor", reflect.TypeOf((*MockIContractCaller)(nil).StakeFor), arg0, arg1, arg2, arg3, arg4, arg5)
}
