// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: heimdallv2/bor/query.proto

package types

import (
	context "context"
	fmt "fmt"
	query "github.com/cosmos/cosmos-sdk/types/query"
	_ "github.com/cosmos/cosmos-sdk/types/tx/amino"
	_ "github.com/cosmos/gogoproto/gogoproto"
	grpc1 "github.com/cosmos/gogoproto/grpc"
	proto "github.com/cosmos/gogoproto/proto"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type QuerySpanByIdRequest struct {
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (m *QuerySpanByIdRequest) Reset()         { *m = QuerySpanByIdRequest{} }
func (m *QuerySpanByIdRequest) String() string { return proto.CompactTextString(m) }
func (*QuerySpanByIdRequest) ProtoMessage()    {}
func (*QuerySpanByIdRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_75b3050b896ec07f, []int{0}
}
func (m *QuerySpanByIdRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QuerySpanByIdRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QuerySpanByIdRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QuerySpanByIdRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QuerySpanByIdRequest.Merge(m, src)
}
func (m *QuerySpanByIdRequest) XXX_Size() int {
	return m.Size()
}
func (m *QuerySpanByIdRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QuerySpanByIdRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QuerySpanByIdRequest proto.InternalMessageInfo

func (m *QuerySpanByIdRequest) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

type QuerySpanByIdResponse struct {
	Span *Span `protobuf:"bytes,1,opt,name=span,proto3" json:"span,omitempty"`
}

func (m *QuerySpanByIdResponse) Reset()         { *m = QuerySpanByIdResponse{} }
func (m *QuerySpanByIdResponse) String() string { return proto.CompactTextString(m) }
func (*QuerySpanByIdResponse) ProtoMessage()    {}
func (*QuerySpanByIdResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_75b3050b896ec07f, []int{1}
}
func (m *QuerySpanByIdResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QuerySpanByIdResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QuerySpanByIdResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QuerySpanByIdResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QuerySpanByIdResponse.Merge(m, src)
}
func (m *QuerySpanByIdResponse) XXX_Size() int {
	return m.Size()
}
func (m *QuerySpanByIdResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QuerySpanByIdResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QuerySpanByIdResponse proto.InternalMessageInfo

func (m *QuerySpanByIdResponse) GetSpan() *Span {
	if m != nil {
		return m.Span
	}
	return nil
}

type QuerySpanListRequest struct {
	Pagination query.PageRequest `protobuf:"bytes,1,opt,name=pagination,proto3" json:"pagination"`
}

func (m *QuerySpanListRequest) Reset()         { *m = QuerySpanListRequest{} }
func (m *QuerySpanListRequest) String() string { return proto.CompactTextString(m) }
func (*QuerySpanListRequest) ProtoMessage()    {}
func (*QuerySpanListRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_75b3050b896ec07f, []int{2}
}
func (m *QuerySpanListRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QuerySpanListRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QuerySpanListRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QuerySpanListRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QuerySpanListRequest.Merge(m, src)
}
func (m *QuerySpanListRequest) XXX_Size() int {
	return m.Size()
}
func (m *QuerySpanListRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QuerySpanListRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QuerySpanListRequest proto.InternalMessageInfo

func (m *QuerySpanListRequest) GetPagination() query.PageRequest {
	if m != nil {
		return m.Pagination
	}
	return query.PageRequest{}
}

type QuerySpanListResponse struct {
	SpanList   []Span             `protobuf:"bytes,1,rep,name=span_list,json=spanList,proto3" json:"span_list"`
	Pagination query.PageResponse `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination"`
}

func (m *QuerySpanListResponse) Reset()         { *m = QuerySpanListResponse{} }
func (m *QuerySpanListResponse) String() string { return proto.CompactTextString(m) }
func (*QuerySpanListResponse) ProtoMessage()    {}
func (*QuerySpanListResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_75b3050b896ec07f, []int{3}
}
func (m *QuerySpanListResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QuerySpanListResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QuerySpanListResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QuerySpanListResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QuerySpanListResponse.Merge(m, src)
}
func (m *QuerySpanListResponse) XXX_Size() int {
	return m.Size()
}
func (m *QuerySpanListResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QuerySpanListResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QuerySpanListResponse proto.InternalMessageInfo

func (m *QuerySpanListResponse) GetSpanList() []Span {
	if m != nil {
		return m.SpanList
	}
	return nil
}

func (m *QuerySpanListResponse) GetPagination() query.PageResponse {
	if m != nil {
		return m.Pagination
	}
	return query.PageResponse{}
}

type QueryLatestSpanRequest struct {
}

func (m *QueryLatestSpanRequest) Reset()         { *m = QueryLatestSpanRequest{} }
func (m *QueryLatestSpanRequest) String() string { return proto.CompactTextString(m) }
func (*QueryLatestSpanRequest) ProtoMessage()    {}
func (*QueryLatestSpanRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_75b3050b896ec07f, []int{4}
}
func (m *QueryLatestSpanRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryLatestSpanRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryLatestSpanRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryLatestSpanRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryLatestSpanRequest.Merge(m, src)
}
func (m *QueryLatestSpanRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryLatestSpanRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryLatestSpanRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryLatestSpanRequest proto.InternalMessageInfo

type QueryLatestSpanResponse struct {
	Span Span `protobuf:"bytes,1,opt,name=span,proto3" json:"span"`
}

func (m *QueryLatestSpanResponse) Reset()         { *m = QueryLatestSpanResponse{} }
func (m *QueryLatestSpanResponse) String() string { return proto.CompactTextString(m) }
func (*QueryLatestSpanResponse) ProtoMessage()    {}
func (*QueryLatestSpanResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_75b3050b896ec07f, []int{5}
}
func (m *QueryLatestSpanResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryLatestSpanResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryLatestSpanResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryLatestSpanResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryLatestSpanResponse.Merge(m, src)
}
func (m *QueryLatestSpanResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryLatestSpanResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryLatestSpanResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryLatestSpanResponse proto.InternalMessageInfo

func (m *QueryLatestSpanResponse) GetSpan() Span {
	if m != nil {
		return m.Span
	}
	return Span{}
}

type QueryNextSpanSeedRequest struct {
	Id uint64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (m *QueryNextSpanSeedRequest) Reset()         { *m = QueryNextSpanSeedRequest{} }
func (m *QueryNextSpanSeedRequest) String() string { return proto.CompactTextString(m) }
func (*QueryNextSpanSeedRequest) ProtoMessage()    {}
func (*QueryNextSpanSeedRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_75b3050b896ec07f, []int{6}
}
func (m *QueryNextSpanSeedRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryNextSpanSeedRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryNextSpanSeedRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryNextSpanSeedRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryNextSpanSeedRequest.Merge(m, src)
}
func (m *QueryNextSpanSeedRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryNextSpanSeedRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryNextSpanSeedRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryNextSpanSeedRequest proto.InternalMessageInfo

func (m *QueryNextSpanSeedRequest) GetId() uint64 {
	if m != nil {
		return m.Id
	}
	return 0
}

type QueryNextSpanSeedResponse struct {
	Seed string `protobuf:"bytes,1,opt,name=seed,proto3" json:"seed,omitempty"`
}

func (m *QueryNextSpanSeedResponse) Reset()         { *m = QueryNextSpanSeedResponse{} }
func (m *QueryNextSpanSeedResponse) String() string { return proto.CompactTextString(m) }
func (*QueryNextSpanSeedResponse) ProtoMessage()    {}
func (*QueryNextSpanSeedResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_75b3050b896ec07f, []int{7}
}
func (m *QueryNextSpanSeedResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryNextSpanSeedResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryNextSpanSeedResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryNextSpanSeedResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryNextSpanSeedResponse.Merge(m, src)
}
func (m *QueryNextSpanSeedResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryNextSpanSeedResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryNextSpanSeedResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryNextSpanSeedResponse proto.InternalMessageInfo

func (m *QueryNextSpanSeedResponse) GetSeed() string {
	if m != nil {
		return m.Seed
	}
	return ""
}

type QueryNextSpanRequest struct {
	SpanId     uint64 `protobuf:"varint,1,opt,name=span_id,json=spanId,proto3" json:"span_id,omitempty"`
	StartBlock uint64 `protobuf:"varint,2,opt,name=start_block,json=startBlock,proto3" json:"start_block,omitempty"`
	BorChainId string `protobuf:"bytes,3,opt,name=bor_chain_id,json=borChainId,proto3" json:"bor_chain_id,omitempty"`
}

func (m *QueryNextSpanRequest) Reset()         { *m = QueryNextSpanRequest{} }
func (m *QueryNextSpanRequest) String() string { return proto.CompactTextString(m) }
func (*QueryNextSpanRequest) ProtoMessage()    {}
func (*QueryNextSpanRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_75b3050b896ec07f, []int{8}
}
func (m *QueryNextSpanRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryNextSpanRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryNextSpanRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryNextSpanRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryNextSpanRequest.Merge(m, src)
}
func (m *QueryNextSpanRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryNextSpanRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryNextSpanRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryNextSpanRequest proto.InternalMessageInfo

func (m *QueryNextSpanRequest) GetSpanId() uint64 {
	if m != nil {
		return m.SpanId
	}
	return 0
}

func (m *QueryNextSpanRequest) GetStartBlock() uint64 {
	if m != nil {
		return m.StartBlock
	}
	return 0
}

func (m *QueryNextSpanRequest) GetBorChainId() string {
	if m != nil {
		return m.BorChainId
	}
	return ""
}

type QueryNextSpanResponse struct {
	Span Span `protobuf:"bytes,1,opt,name=span,proto3" json:"span"`
}

func (m *QueryNextSpanResponse) Reset()         { *m = QueryNextSpanResponse{} }
func (m *QueryNextSpanResponse) String() string { return proto.CompactTextString(m) }
func (*QueryNextSpanResponse) ProtoMessage()    {}
func (*QueryNextSpanResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_75b3050b896ec07f, []int{9}
}
func (m *QueryNextSpanResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryNextSpanResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryNextSpanResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryNextSpanResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryNextSpanResponse.Merge(m, src)
}
func (m *QueryNextSpanResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryNextSpanResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryNextSpanResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryNextSpanResponse proto.InternalMessageInfo

func (m *QueryNextSpanResponse) GetSpan() Span {
	if m != nil {
		return m.Span
	}
	return Span{}
}

type QueryParamsRequest struct {
}

func (m *QueryParamsRequest) Reset()         { *m = QueryParamsRequest{} }
func (m *QueryParamsRequest) String() string { return proto.CompactTextString(m) }
func (*QueryParamsRequest) ProtoMessage()    {}
func (*QueryParamsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_75b3050b896ec07f, []int{10}
}
func (m *QueryParamsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryParamsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryParamsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryParamsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryParamsRequest.Merge(m, src)
}
func (m *QueryParamsRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryParamsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryParamsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryParamsRequest proto.InternalMessageInfo

type QueryParamsResponse struct {
	Params Params `protobuf:"bytes,1,opt,name=params,proto3" json:"params"`
}

func (m *QueryParamsResponse) Reset()         { *m = QueryParamsResponse{} }
func (m *QueryParamsResponse) String() string { return proto.CompactTextString(m) }
func (*QueryParamsResponse) ProtoMessage()    {}
func (*QueryParamsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_75b3050b896ec07f, []int{11}
}
func (m *QueryParamsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryParamsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryParamsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryParamsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryParamsResponse.Merge(m, src)
}
func (m *QueryParamsResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryParamsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryParamsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryParamsResponse proto.InternalMessageInfo

func (m *QueryParamsResponse) GetParams() Params {
	if m != nil {
		return m.Params
	}
	return Params{}
}

func init() {
	proto.RegisterType((*QuerySpanByIdRequest)(nil), "heimdallv2.bor.QuerySpanByIdRequest")
	proto.RegisterType((*QuerySpanByIdResponse)(nil), "heimdallv2.bor.QuerySpanByIdResponse")
	proto.RegisterType((*QuerySpanListRequest)(nil), "heimdallv2.bor.QuerySpanListRequest")
	proto.RegisterType((*QuerySpanListResponse)(nil), "heimdallv2.bor.QuerySpanListResponse")
	proto.RegisterType((*QueryLatestSpanRequest)(nil), "heimdallv2.bor.QueryLatestSpanRequest")
	proto.RegisterType((*QueryLatestSpanResponse)(nil), "heimdallv2.bor.QueryLatestSpanResponse")
	proto.RegisterType((*QueryNextSpanSeedRequest)(nil), "heimdallv2.bor.QueryNextSpanSeedRequest")
	proto.RegisterType((*QueryNextSpanSeedResponse)(nil), "heimdallv2.bor.QueryNextSpanSeedResponse")
	proto.RegisterType((*QueryNextSpanRequest)(nil), "heimdallv2.bor.QueryNextSpanRequest")
	proto.RegisterType((*QueryNextSpanResponse)(nil), "heimdallv2.bor.QueryNextSpanResponse")
	proto.RegisterType((*QueryParamsRequest)(nil), "heimdallv2.bor.QueryParamsRequest")
	proto.RegisterType((*QueryParamsResponse)(nil), "heimdallv2.bor.QueryParamsResponse")
}

func init() { proto.RegisterFile("heimdallv2/bor/query.proto", fileDescriptor_75b3050b896ec07f) }

var fileDescriptor_75b3050b896ec07f = []byte{
	// 759 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xa4, 0x95, 0x4d, 0x4f, 0x13, 0x41,
	0x18, 0xc7, 0xbb, 0xe5, 0x45, 0x99, 0x02, 0xc2, 0x50, 0xb0, 0x2c, 0xba, 0x92, 0x55, 0x01, 0x89,
	0xec, 0x4a, 0x49, 0x4c, 0x4c, 0x3c, 0xd5, 0xc4, 0x4a, 0x42, 0x48, 0x81, 0x9b, 0x17, 0x32, 0xdb,
	0x9d, 0x2c, 0x1b, 0xdb, 0x9d, 0x65, 0x67, 0x40, 0xaa, 0x31, 0x26, 0x5e, 0xe4, 0x68, 0xe2, 0x97,
	0xd0, 0x9b, 0x1f, 0x83, 0x23, 0x89, 0x17, 0x4f, 0xc6, 0x80, 0x89, 0x5f, 0xc0, 0x0f, 0x60, 0x76,
	0x66, 0x96, 0x9d, 0x2e, 0x5b, 0x20, 0xf1, 0xd2, 0x34, 0xf3, 0x3c, 0xf3, 0xff, 0xfd, 0xe7, 0x79,
	0x69, 0x81, 0xbe, 0x83, 0xfd, 0xb6, 0x8b, 0x5a, 0xad, 0xfd, 0xaa, 0xed, 0x90, 0xc8, 0xde, 0xdd,
	0xc3, 0x51, 0xc7, 0x0a, 0x23, 0xc2, 0x08, 0x1c, 0x4d, 0x63, 0x96, 0x43, 0x22, 0xbd, 0xec, 0x11,
	0x8f, 0xf0, 0x90, 0x1d, 0x7f, 0x13, 0x59, 0xfa, 0x4c, 0x93, 0xd0, 0x36, 0xa1, 0xe2, 0xa6, 0xbd,
	0xbf, 0xac, 0x4a, 0xe8, 0x8b, 0x32, 0xe8, 0x20, 0x8a, 0xcf, 0x32, 0x1c, 0xcc, 0xd0, 0xb2, 0x1d,
	0x22, 0xcf, 0x0f, 0x10, 0xf3, 0x49, 0x20, 0x73, 0x6f, 0x79, 0x84, 0x78, 0x2d, 0x6c, 0xa3, 0xd0,
	0xb7, 0x51, 0x10, 0x10, 0xc6, 0x83, 0x54, 0x46, 0x2b, 0x19, 0xa3, 0x0e, 0x89, 0x64, 0x64, 0x1c,
	0xb5, 0xfd, 0x80, 0xd8, 0xfc, 0x53, 0x1c, 0x99, 0x4b, 0xa0, 0xbc, 0x11, 0xc3, 0xb6, 0x42, 0x14,
	0xd4, 0x3a, 0xab, 0xee, 0x26, 0xde, 0xdd, 0xc3, 0x94, 0xc1, 0x49, 0x50, 0xf4, 0xdd, 0x8a, 0x36,
	0xab, 0x2d, 0x0c, 0xd5, 0x06, 0xbe, 0xfc, 0xf9, 0xb6, 0xa8, 0x6d, 0x16, 0x7d, 0xd7, 0x7c, 0x01,
	0x26, 0x33, 0xe9, 0x34, 0x24, 0x01, 0xc5, 0xd0, 0x06, 0xfd, 0x34, 0x44, 0x01, 0xbf, 0x51, 0xaa,
	0x96, 0xad, 0xee, 0x82, 0x58, 0x3c, 0x5f, 0xea, 0xf0, 0x44, 0xd3, 0x57, 0xc0, 0x6b, 0x3e, 0x65,
	0x09, 0x78, 0x03, 0x80, 0xf4, 0xbd, 0x52, 0x6e, 0xce, 0x12, 0xc5, 0xb1, 0xe2, 0xe2, 0x58, 0xa2,
	0x6a, 0xb2, 0x38, 0x56, 0x03, 0x79, 0x58, 0xde, 0xad, 0x0d, 0x1d, 0xfd, 0xbc, 0x53, 0x10, 0x10,
	0x45, 0xc4, 0xfc, 0xaa, 0x29, 0xae, 0x05, 0x4b, 0xba, 0x7e, 0x0a, 0x86, 0x62, 0x33, 0xdb, 0x2d,
	0x9f, 0xb2, 0x8a, 0x36, 0xdb, 0xd7, 0xd3, 0xba, 0xa2, 0x7c, 0x9d, 0x4a, 0x15, 0xb8, 0xd9, 0x65,
	0xb5, 0xc8, 0xad, 0xce, 0x5f, 0x6a, 0x55, 0xa0, 0x7b, 0x79, 0xad, 0x80, 0x29, 0x6e, 0x75, 0x0d,
	0x31, 0x4c, 0x59, 0xcc, 0x96, 0x8f, 0x33, 0xd7, 0xc1, 0xcd, 0x73, 0x11, 0xf9, 0x8c, 0x95, 0x2b,
	0x14, 0x5f, 0xe1, 0x89, 0x06, 0x2c, 0x83, 0x0a, 0xd7, 0x5b, 0xc7, 0x07, 0x5c, 0x6d, 0x0b, 0xe3,
	0x9c, 0xee, 0xf7, 0xab, 0xdd, 0x7f, 0x0c, 0xa6, 0x73, 0xae, 0x48, 0x13, 0xd3, 0xa0, 0x9f, 0x62,
	0x9c, 0x99, 0x19, 0x7e, 0x64, 0x7e, 0xd4, 0x64, 0xb3, 0x93, 0x8b, 0x09, 0xc7, 0x00, 0xd7, 0x78,
	0xfd, 0xb3, 0xb0, 0xc1, 0xf8, 0x74, 0xd5, 0x85, 0x73, 0xa0, 0x44, 0x19, 0x8a, 0xd8, 0xb6, 0xd3,
	0x22, 0xcd, 0x57, 0xbc, 0xc4, 0x67, 0x39, 0x80, 0x47, 0x6a, 0x71, 0x00, 0xce, 0x83, 0x61, 0x87,
	0x44, 0xdb, 0xcd, 0x1d, 0xe4, 0x73, 0xb1, 0x3e, 0xd5, 0x03, 0x70, 0x48, 0xf4, 0x2c, 0x8e, 0xac,
	0xba, 0xe6, 0x9a, 0x9c, 0x84, 0xd4, 0xc8, 0xff, 0x94, 0xb0, 0x0c, 0x20, 0x57, 0x6b, 0xa0, 0x08,
	0xb5, 0x69, 0xd2, 0xa8, 0x06, 0x98, 0xe8, 0x3a, 0x95, 0x84, 0x27, 0x60, 0x30, 0xe4, 0x27, 0x92,
	0x31, 0x95, 0x65, 0x88, 0x7c, 0x95, 0x22, 0x2f, 0x54, 0xff, 0x0e, 0x80, 0x01, 0x2e, 0x09, 0x5f,
	0x83, 0x52, 0x1d, 0xb3, 0x64, 0xfb, 0xe0, 0xbd, 0xac, 0x46, 0xde, 0x2e, 0xeb, 0xf7, 0x2f, 0xc9,
	0x12, 0x06, 0xcd, 0x99, 0xc3, 0x18, 0xfa, 0xe1, 0xfb, 0xef, 0xcf, 0xc5, 0x31, 0x38, 0xca, 0x7f,
	0x3a, 0xe2, 0x57, 0xda, 0x6f, 0x7d, 0xf7, 0x9d, 0x02, 0xe6, 0xa3, 0xdf, 0x1b, 0xac, 0xec, 0xf2,
	0x05, 0x60, 0x75, 0x0b, 0x7b, 0x82, 0xe3, 0xad, 0x84, 0xef, 0xc1, 0x48, 0x1d, 0xb3, 0x74, 0xe8,
	0xe1, 0x5c, 0xae, 0xe8, 0xb9, 0x7d, 0xd1, 0xe7, 0x2f, 0xcd, 0x93, 0xf8, 0xdb, 0x29, 0x1e, 0xc2,
	0x31, 0x05, 0xcf, 0x53, 0xe1, 0xa1, 0x06, 0x6e, 0xd4, 0x31, 0x53, 0x67, 0x1e, 0x2e, 0xe4, 0x6a,
	0xe7, 0x6c, 0x92, 0xfe, 0xe0, 0x0a, 0x99, 0xd2, 0xc7, 0x6c, 0xea, 0x63, 0x12, 0x4e, 0xa4, 0x3e,
	0xe2, 0x15, 0x12, 0x4d, 0x78, 0xc3, 0x9b, 0x90, 0x5c, 0xee, 0xd1, 0x84, 0xcc, 0x8e, 0xf5, 0x68,
	0x42, 0x76, 0x01, 0x4c, 0x23, 0xa5, 0x4f, 0xc0, 0xf1, 0x94, 0x1e, 0x46, 0x38, 0x44, 0x11, 0x86,
	0xbb, 0x60, 0xb8, 0x8e, 0x59, 0x8d, 0x44, 0x62, 0x4c, 0xa1, 0x99, 0x2b, 0xdb, 0xb5, 0x09, 0xfa,
	0xdd, 0x0b, 0x73, 0x24, 0xb8, 0x92, 0x82, 0x47, 0x60, 0x89, 0x83, 0xc5, 0xd8, 0xd7, 0x9e, 0x1f,
	0x9d, 0x18, 0xda, 0xf1, 0x89, 0xa1, 0xfd, 0x3a, 0x31, 0xb4, 0x4f, 0xa7, 0x46, 0xe1, 0xf8, 0xd4,
	0x28, 0xfc, 0x38, 0x35, 0x0a, 0x2f, 0x1f, 0x7a, 0x3e, 0xdb, 0xd9, 0x73, 0xac, 0x26, 0x69, 0xdb,
	0x8f, 0x0e, 0x1a, 0xa4, 0xd5, 0xf1, 0x48, 0x60, 0x27, 0xb0, 0xa5, 0xfd, 0xaa, 0x7d, 0xc0, 0x85,
	0x58, 0x27, 0xc4, 0xd4, 0x19, 0xe4, 0x7f, 0x75, 0x2b, 0xff, 0x02, 0x00, 0x00, 0xff, 0xff, 0xe5,
	0xe0, 0xe5, 0x0b, 0xc2, 0x07, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// QueryClient is the client API for Query service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type QueryClient interface {
	// GetSpanById retrieves a span by its id.
	GetSpanById(ctx context.Context, in *QuerySpanByIdRequest, opts ...grpc.CallOption) (*QuerySpanByIdResponse, error)
	// GetSpanList queries a list of spans.
	GetSpanList(ctx context.Context, in *QuerySpanListRequest, opts ...grpc.CallOption) (*QuerySpanListResponse, error)
	// GetLatestSpan queries the latest span.
	GetLatestSpan(ctx context.Context, in *QueryLatestSpanRequest, opts ...grpc.CallOption) (*QueryLatestSpanResponse, error)
	// GetNextSpanSeed queries the next span seed given a
	// QueryNextSpanSeedRequest.
	GetNextSpanSeed(ctx context.Context, in *QueryNextSpanSeedRequest, opts ...grpc.CallOption) (*QueryNextSpanSeedResponse, error)
	// GetNextSpan queries the next span given a QueryNextSpanRequest.
	GetNextSpan(ctx context.Context, in *QueryNextSpanRequest, opts ...grpc.CallOption) (*QueryNextSpanResponse, error)
	// GetBorParams queries the parameters of x/bor module.
	GetBorParams(ctx context.Context, in *QueryParamsRequest, opts ...grpc.CallOption) (*QueryParamsResponse, error)
}

type queryClient struct {
	cc grpc1.ClientConn
}

func NewQueryClient(cc grpc1.ClientConn) QueryClient {
	return &queryClient{cc}
}

func (c *queryClient) GetSpanById(ctx context.Context, in *QuerySpanByIdRequest, opts ...grpc.CallOption) (*QuerySpanByIdResponse, error) {
	out := new(QuerySpanByIdResponse)
	err := c.cc.Invoke(ctx, "/heimdallv2.bor.Query/GetSpanById", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) GetSpanList(ctx context.Context, in *QuerySpanListRequest, opts ...grpc.CallOption) (*QuerySpanListResponse, error) {
	out := new(QuerySpanListResponse)
	err := c.cc.Invoke(ctx, "/heimdallv2.bor.Query/GetSpanList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) GetLatestSpan(ctx context.Context, in *QueryLatestSpanRequest, opts ...grpc.CallOption) (*QueryLatestSpanResponse, error) {
	out := new(QueryLatestSpanResponse)
	err := c.cc.Invoke(ctx, "/heimdallv2.bor.Query/GetLatestSpan", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) GetNextSpanSeed(ctx context.Context, in *QueryNextSpanSeedRequest, opts ...grpc.CallOption) (*QueryNextSpanSeedResponse, error) {
	out := new(QueryNextSpanSeedResponse)
	err := c.cc.Invoke(ctx, "/heimdallv2.bor.Query/GetNextSpanSeed", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) GetNextSpan(ctx context.Context, in *QueryNextSpanRequest, opts ...grpc.CallOption) (*QueryNextSpanResponse, error) {
	out := new(QueryNextSpanResponse)
	err := c.cc.Invoke(ctx, "/heimdallv2.bor.Query/GetNextSpan", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) GetBorParams(ctx context.Context, in *QueryParamsRequest, opts ...grpc.CallOption) (*QueryParamsResponse, error) {
	out := new(QueryParamsResponse)
	err := c.cc.Invoke(ctx, "/heimdallv2.bor.Query/GetBorParams", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// QueryServer is the server API for Query service.
type QueryServer interface {
	// GetSpanById retrieves a span by its id.
	GetSpanById(context.Context, *QuerySpanByIdRequest) (*QuerySpanByIdResponse, error)
	// GetSpanList queries a list of spans.
	GetSpanList(context.Context, *QuerySpanListRequest) (*QuerySpanListResponse, error)
	// GetLatestSpan queries the latest span.
	GetLatestSpan(context.Context, *QueryLatestSpanRequest) (*QueryLatestSpanResponse, error)
	// GetNextSpanSeed queries the next span seed given a
	// QueryNextSpanSeedRequest.
	GetNextSpanSeed(context.Context, *QueryNextSpanSeedRequest) (*QueryNextSpanSeedResponse, error)
	// GetNextSpan queries the next span given a QueryNextSpanRequest.
	GetNextSpan(context.Context, *QueryNextSpanRequest) (*QueryNextSpanResponse, error)
	// GetBorParams queries the parameters of x/bor module.
	GetBorParams(context.Context, *QueryParamsRequest) (*QueryParamsResponse, error)
}

// UnimplementedQueryServer can be embedded to have forward compatible implementations.
type UnimplementedQueryServer struct {
}

func (*UnimplementedQueryServer) GetSpanById(ctx context.Context, req *QuerySpanByIdRequest) (*QuerySpanByIdResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSpanById not implemented")
}
func (*UnimplementedQueryServer) GetSpanList(ctx context.Context, req *QuerySpanListRequest) (*QuerySpanListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSpanList not implemented")
}
func (*UnimplementedQueryServer) GetLatestSpan(ctx context.Context, req *QueryLatestSpanRequest) (*QueryLatestSpanResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetLatestSpan not implemented")
}
func (*UnimplementedQueryServer) GetNextSpanSeed(ctx context.Context, req *QueryNextSpanSeedRequest) (*QueryNextSpanSeedResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetNextSpanSeed not implemented")
}
func (*UnimplementedQueryServer) GetNextSpan(ctx context.Context, req *QueryNextSpanRequest) (*QueryNextSpanResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetNextSpan not implemented")
}
func (*UnimplementedQueryServer) GetBorParams(ctx context.Context, req *QueryParamsRequest) (*QueryParamsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBorParams not implemented")
}

func RegisterQueryServer(s grpc1.Server, srv QueryServer) {
	s.RegisterService(&_Query_serviceDesc, srv)
}

func _Query_GetSpanById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QuerySpanByIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).GetSpanById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/heimdallv2.bor.Query/GetSpanById",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).GetSpanById(ctx, req.(*QuerySpanByIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_GetSpanList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QuerySpanListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).GetSpanList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/heimdallv2.bor.Query/GetSpanList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).GetSpanList(ctx, req.(*QuerySpanListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_GetLatestSpan_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryLatestSpanRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).GetLatestSpan(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/heimdallv2.bor.Query/GetLatestSpan",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).GetLatestSpan(ctx, req.(*QueryLatestSpanRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_GetNextSpanSeed_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryNextSpanSeedRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).GetNextSpanSeed(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/heimdallv2.bor.Query/GetNextSpanSeed",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).GetNextSpanSeed(ctx, req.(*QueryNextSpanSeedRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_GetNextSpan_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryNextSpanRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).GetNextSpan(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/heimdallv2.bor.Query/GetNextSpan",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).GetNextSpan(ctx, req.(*QueryNextSpanRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_GetBorParams_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryParamsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).GetBorParams(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/heimdallv2.bor.Query/GetBorParams",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).GetBorParams(ctx, req.(*QueryParamsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Query_serviceDesc = grpc.ServiceDesc{
	ServiceName: "heimdallv2.bor.Query",
	HandlerType: (*QueryServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetSpanById",
			Handler:    _Query_GetSpanById_Handler,
		},
		{
			MethodName: "GetSpanList",
			Handler:    _Query_GetSpanList_Handler,
		},
		{
			MethodName: "GetLatestSpan",
			Handler:    _Query_GetLatestSpan_Handler,
		},
		{
			MethodName: "GetNextSpanSeed",
			Handler:    _Query_GetNextSpanSeed_Handler,
		},
		{
			MethodName: "GetNextSpan",
			Handler:    _Query_GetNextSpan_Handler,
		},
		{
			MethodName: "GetBorParams",
			Handler:    _Query_GetBorParams_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "heimdallv2/bor/query.proto",
}

func (m *QuerySpanByIdRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QuerySpanByIdRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QuerySpanByIdRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Id) > 0 {
		i -= len(m.Id)
		copy(dAtA[i:], m.Id)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Id)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QuerySpanByIdResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QuerySpanByIdResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QuerySpanByIdResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Span != nil {
		{
			size, err := m.Span.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QuerySpanListRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QuerySpanListRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QuerySpanListRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QuerySpanListResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QuerySpanListResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QuerySpanListResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	if len(m.SpanList) > 0 {
		for iNdEx := len(m.SpanList) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.SpanList[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryLatestSpanRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryLatestSpanRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryLatestSpanRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *QueryLatestSpanResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryLatestSpanResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryLatestSpanResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.Span.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryNextSpanSeedRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryNextSpanSeedRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryNextSpanSeedRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Id != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *QueryNextSpanSeedResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryNextSpanSeedResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryNextSpanSeedResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Seed) > 0 {
		i -= len(m.Seed)
		copy(dAtA[i:], m.Seed)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Seed)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryNextSpanRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryNextSpanRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryNextSpanRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.BorChainId) > 0 {
		i -= len(m.BorChainId)
		copy(dAtA[i:], m.BorChainId)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.BorChainId)))
		i--
		dAtA[i] = 0x1a
	}
	if m.StartBlock != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.StartBlock))
		i--
		dAtA[i] = 0x10
	}
	if m.SpanId != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.SpanId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *QueryNextSpanResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryNextSpanResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryNextSpanResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.Span.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryParamsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryParamsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryParamsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *QueryParamsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryParamsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryParamsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.Params.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func encodeVarintQuery(dAtA []byte, offset int, v uint64) int {
	offset -= sovQuery(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *QuerySpanByIdRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Id)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QuerySpanByIdResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Span != nil {
		l = m.Span.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QuerySpanListRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Pagination.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QuerySpanListResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.SpanList) > 0 {
		for _, e := range m.SpanList {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	l = m.Pagination.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryLatestSpanRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *QueryLatestSpanResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Span.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryNextSpanSeedRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovQuery(uint64(m.Id))
	}
	return n
}

func (m *QueryNextSpanSeedResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Seed)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryNextSpanRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.SpanId != 0 {
		n += 1 + sovQuery(uint64(m.SpanId))
	}
	if m.StartBlock != 0 {
		n += 1 + sovQuery(uint64(m.StartBlock))
	}
	l = len(m.BorChainId)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryNextSpanResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Span.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryParamsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *QueryParamsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Params.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func sovQuery(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozQuery(x uint64) (n int) {
	return sovQuery(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *QuerySpanByIdRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QuerySpanByIdRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QuerySpanByIdRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Id = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QuerySpanByIdResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QuerySpanByIdResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QuerySpanByIdResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Span", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Span == nil {
				m.Span = &Span{}
			}
			if err := m.Span.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QuerySpanListRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QuerySpanListRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QuerySpanListRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QuerySpanListResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QuerySpanListResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QuerySpanListResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SpanList", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SpanList = append(m.SpanList, Span{})
			if err := m.SpanList[len(m.SpanList)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryLatestSpanRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryLatestSpanRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryLatestSpanRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryLatestSpanResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryLatestSpanResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryLatestSpanResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Span", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Span.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryNextSpanSeedRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryNextSpanSeedRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryNextSpanSeedRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryNextSpanSeedResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryNextSpanSeedResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryNextSpanSeedResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Seed", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Seed = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryNextSpanRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryNextSpanRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryNextSpanRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SpanId", wireType)
			}
			m.SpanId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SpanId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field StartBlock", wireType)
			}
			m.StartBlock = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.StartBlock |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BorChainId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BorChainId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryNextSpanResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryNextSpanResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryNextSpanResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Span", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Span.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryParamsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryParamsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryParamsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryParamsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryParamsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryParamsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Params", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Params.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipQuery(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthQuery
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupQuery
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthQuery
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthQuery        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowQuery          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupQuery = fmt.Errorf("proto: unexpected end of group")
)
