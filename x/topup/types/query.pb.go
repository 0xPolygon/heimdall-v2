// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: heimdallv2/topup/v1/query.proto

package types

import (
	context "context"
	fmt "fmt"
	types "github.com/0xPolygon/heimdall-v2/types"
	_ "github.com/cosmos/cosmos-proto"
	_ "github.com/cosmos/cosmos-sdk/types/query"
	_ "github.com/cosmos/gogoproto/gogoproto"
	grpc1 "github.com/cosmos/gogoproto/grpc"
	proto "github.com/cosmos/gogoproto/proto"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// QueryTopupSequenceRequest is the request type for the GetTopupTxSequence and
// IsTopupTxOld RPC methods
type QueryTopupSequenceRequest struct {
	TxHash   string `protobuf:"bytes,1,opt,name=tx_hash,json=txHash,proto3" json:"tx_hash,omitempty"`
	LogIndex uint64 `protobuf:"varint,2,opt,name=log_index,json=logIndex,proto3" json:"log_index,omitempty"`
}

func (m *QueryTopupSequenceRequest) Reset()         { *m = QueryTopupSequenceRequest{} }
func (m *QueryTopupSequenceRequest) String() string { return proto.CompactTextString(m) }
func (*QueryTopupSequenceRequest) ProtoMessage()    {}
func (*QueryTopupSequenceRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_c289e17b6179cf02, []int{0}
}
func (m *QueryTopupSequenceRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryTopupSequenceRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryTopupSequenceRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryTopupSequenceRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryTopupSequenceRequest.Merge(m, src)
}
func (m *QueryTopupSequenceRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryTopupSequenceRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryTopupSequenceRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryTopupSequenceRequest proto.InternalMessageInfo

func (m *QueryTopupSequenceRequest) GetTxHash() string {
	if m != nil {
		return m.TxHash
	}
	return ""
}

func (m *QueryTopupSequenceRequest) GetLogIndex() uint64 {
	if m != nil {
		return m.LogIndex
	}
	return 0
}

// QueryTopupSequenceResponse is response type for the GetTopupTxSequence RPC
// method
type QueryTopupSequenceResponse struct {
	Sequence string `protobuf:"bytes,1,opt,name=sequence,proto3" json:"sequence,omitempty"`
}

func (m *QueryTopupSequenceResponse) Reset()         { *m = QueryTopupSequenceResponse{} }
func (m *QueryTopupSequenceResponse) String() string { return proto.CompactTextString(m) }
func (*QueryTopupSequenceResponse) ProtoMessage()    {}
func (*QueryTopupSequenceResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_c289e17b6179cf02, []int{1}
}
func (m *QueryTopupSequenceResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryTopupSequenceResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryTopupSequenceResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryTopupSequenceResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryTopupSequenceResponse.Merge(m, src)
}
func (m *QueryTopupSequenceResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryTopupSequenceResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryTopupSequenceResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryTopupSequenceResponse proto.InternalMessageInfo

func (m *QueryTopupSequenceResponse) GetSequence() string {
	if m != nil {
		return m.Sequence
	}
	return ""
}

// QueryIsTopupTxOldResponse is response type for the IsTopupTxOld RPC
// method
type QueryIsTopupTxOldResponse struct {
	IsOld bool `protobuf:"varint,1,opt,name=is_old,json=isOld,proto3" json:"is_old,omitempty"`
}

func (m *QueryIsTopupTxOldResponse) Reset()         { *m = QueryIsTopupTxOldResponse{} }
func (m *QueryIsTopupTxOldResponse) String() string { return proto.CompactTextString(m) }
func (*QueryIsTopupTxOldResponse) ProtoMessage()    {}
func (*QueryIsTopupTxOldResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_c289e17b6179cf02, []int{2}
}
func (m *QueryIsTopupTxOldResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryIsTopupTxOldResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryIsTopupTxOldResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryIsTopupTxOldResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryIsTopupTxOldResponse.Merge(m, src)
}
func (m *QueryIsTopupTxOldResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryIsTopupTxOldResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryIsTopupTxOldResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryIsTopupTxOldResponse proto.InternalMessageInfo

func (m *QueryIsTopupTxOldResponse) GetIsOld() bool {
	if m != nil {
		return m.IsOld
	}
	return false
}

// QueryDividendAccountRequest is the request type for the
// GetDividendAccountByAddress RPC method
type QueryDividendAccountRequest struct {
	Address string `protobuf:"bytes,1,opt,name=address,proto3" json:"address,omitempty"`
}

func (m *QueryDividendAccountRequest) Reset()         { *m = QueryDividendAccountRequest{} }
func (m *QueryDividendAccountRequest) String() string { return proto.CompactTextString(m) }
func (*QueryDividendAccountRequest) ProtoMessage()    {}
func (*QueryDividendAccountRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_c289e17b6179cf02, []int{3}
}
func (m *QueryDividendAccountRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryDividendAccountRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryDividendAccountRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryDividendAccountRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryDividendAccountRequest.Merge(m, src)
}
func (m *QueryDividendAccountRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryDividendAccountRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryDividendAccountRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryDividendAccountRequest proto.InternalMessageInfo

func (m *QueryDividendAccountRequest) GetAddress() string {
	if m != nil {
		return m.Address
	}
	return ""
}

// QueryDividendAccountResponse the is response type for the
// GetDividendAccountByAddress RPC method
type QueryDividendAccountResponse struct {
	DividendAccount types.DividendAccount `protobuf:"bytes,1,opt,name=dividend_account,json=dividendAccount,proto3" json:"dividend_account"`
}

func (m *QueryDividendAccountResponse) Reset()         { *m = QueryDividendAccountResponse{} }
func (m *QueryDividendAccountResponse) String() string { return proto.CompactTextString(m) }
func (*QueryDividendAccountResponse) ProtoMessage()    {}
func (*QueryDividendAccountResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_c289e17b6179cf02, []int{4}
}
func (m *QueryDividendAccountResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryDividendAccountResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryDividendAccountResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryDividendAccountResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryDividendAccountResponse.Merge(m, src)
}
func (m *QueryDividendAccountResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryDividendAccountResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryDividendAccountResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryDividendAccountResponse proto.InternalMessageInfo

func (m *QueryDividendAccountResponse) GetDividendAccount() types.DividendAccount {
	if m != nil {
		return m.DividendAccount
	}
	return types.DividendAccount{}
}

// QueryDividendAccountRootHashRequest is the request type for the
// GetDividendAccountRootHash RPC method
type QueryDividendAccountRootHashRequest struct {
}

func (m *QueryDividendAccountRootHashRequest) Reset()         { *m = QueryDividendAccountRootHashRequest{} }
func (m *QueryDividendAccountRootHashRequest) String() string { return proto.CompactTextString(m) }
func (*QueryDividendAccountRootHashRequest) ProtoMessage()    {}
func (*QueryDividendAccountRootHashRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_c289e17b6179cf02, []int{5}
}
func (m *QueryDividendAccountRootHashRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryDividendAccountRootHashRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryDividendAccountRootHashRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryDividendAccountRootHashRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryDividendAccountRootHashRequest.Merge(m, src)
}
func (m *QueryDividendAccountRootHashRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryDividendAccountRootHashRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryDividendAccountRootHashRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryDividendAccountRootHashRequest proto.InternalMessageInfo

// QueryDividendAccountRootResponse is the response type for the
// GetDividendAccountRootHash RPC method
type QueryDividendAccountRootHashResponse struct {
	AccountRootHash *types.HeimdallHash `protobuf:"bytes,1,opt,name=account_root_hash,json=accountRootHash,proto3" json:"account_root_hash,omitempty"`
}

func (m *QueryDividendAccountRootHashResponse) Reset()         { *m = QueryDividendAccountRootHashResponse{} }
func (m *QueryDividendAccountRootHashResponse) String() string { return proto.CompactTextString(m) }
func (*QueryDividendAccountRootHashResponse) ProtoMessage()    {}
func (*QueryDividendAccountRootHashResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_c289e17b6179cf02, []int{6}
}
func (m *QueryDividendAccountRootHashResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryDividendAccountRootHashResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryDividendAccountRootHashResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryDividendAccountRootHashResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryDividendAccountRootHashResponse.Merge(m, src)
}
func (m *QueryDividendAccountRootHashResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryDividendAccountRootHashResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryDividendAccountRootHashResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryDividendAccountRootHashResponse proto.InternalMessageInfo

func (m *QueryDividendAccountRootHashResponse) GetAccountRootHash() *types.HeimdallHash {
	if m != nil {
		return m.AccountRootHash
	}
	return nil
}

// QueryVerifyAccountProofParams is the request type for the VerifyAccountProof
// RPC method
type QueryVerifyAccountProofRequest struct {
	Address string `protobuf:"bytes,1,opt,name=address,proto3" json:"address,omitempty"`
	Proof   string `protobuf:"bytes,2,opt,name=proof,proto3" json:"proof,omitempty"`
}

func (m *QueryVerifyAccountProofRequest) Reset()         { *m = QueryVerifyAccountProofRequest{} }
func (m *QueryVerifyAccountProofRequest) String() string { return proto.CompactTextString(m) }
func (*QueryVerifyAccountProofRequest) ProtoMessage()    {}
func (*QueryVerifyAccountProofRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_c289e17b6179cf02, []int{7}
}
func (m *QueryVerifyAccountProofRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryVerifyAccountProofRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryVerifyAccountProofRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryVerifyAccountProofRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryVerifyAccountProofRequest.Merge(m, src)
}
func (m *QueryVerifyAccountProofRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryVerifyAccountProofRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryVerifyAccountProofRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryVerifyAccountProofRequest proto.InternalMessageInfo

func (m *QueryVerifyAccountProofRequest) GetAddress() string {
	if m != nil {
		return m.Address
	}
	return ""
}

func (m *QueryVerifyAccountProofRequest) GetProof() string {
	if m != nil {
		return m.Proof
	}
	return ""
}

// QueryVerifyAccountProofResponse the is response type for the
// VerifyAccountProof RPC method
type QueryVerifyAccountProofResponse struct {
	IsVerified bool `protobuf:"varint,1,opt,name=is_verified,json=isVerified,proto3" json:"is_verified,omitempty"`
}

func (m *QueryVerifyAccountProofResponse) Reset()         { *m = QueryVerifyAccountProofResponse{} }
func (m *QueryVerifyAccountProofResponse) String() string { return proto.CompactTextString(m) }
func (*QueryVerifyAccountProofResponse) ProtoMessage()    {}
func (*QueryVerifyAccountProofResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_c289e17b6179cf02, []int{8}
}
func (m *QueryVerifyAccountProofResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryVerifyAccountProofResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryVerifyAccountProofResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryVerifyAccountProofResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryVerifyAccountProofResponse.Merge(m, src)
}
func (m *QueryVerifyAccountProofResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryVerifyAccountProofResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryVerifyAccountProofResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryVerifyAccountProofResponse proto.InternalMessageInfo

func (m *QueryVerifyAccountProofResponse) GetIsVerified() bool {
	if m != nil {
		return m.IsVerified
	}
	return false
}

// QueryAccountProofRequest is the request type for the
// GetAccountProof RPC method
type QueryAccountProofRequest struct {
	Address string `protobuf:"bytes,1,opt,name=address,proto3" json:"address,omitempty"`
}

func (m *QueryAccountProofRequest) Reset()         { *m = QueryAccountProofRequest{} }
func (m *QueryAccountProofRequest) String() string { return proto.CompactTextString(m) }
func (*QueryAccountProofRequest) ProtoMessage()    {}
func (*QueryAccountProofRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_c289e17b6179cf02, []int{9}
}
func (m *QueryAccountProofRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAccountProofRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAccountProofRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAccountProofRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAccountProofRequest.Merge(m, src)
}
func (m *QueryAccountProofRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryAccountProofRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAccountProofRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAccountProofRequest proto.InternalMessageInfo

func (m *QueryAccountProofRequest) GetAddress() string {
	if m != nil {
		return m.Address
	}
	return ""
}

// QueryAccountProofResponse the is response type for the GetAccountProof RPC
// method
type QueryAccountProofResponse struct {
	Proof *AccountProof `protobuf:"bytes,1,opt,name=proof,proto3" json:"proof,omitempty"`
}

func (m *QueryAccountProofResponse) Reset()         { *m = QueryAccountProofResponse{} }
func (m *QueryAccountProofResponse) String() string { return proto.CompactTextString(m) }
func (*QueryAccountProofResponse) ProtoMessage()    {}
func (*QueryAccountProofResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_c289e17b6179cf02, []int{10}
}
func (m *QueryAccountProofResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAccountProofResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAccountProofResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAccountProofResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAccountProofResponse.Merge(m, src)
}
func (m *QueryAccountProofResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryAccountProofResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAccountProofResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAccountProofResponse proto.InternalMessageInfo

func (m *QueryAccountProofResponse) GetProof() *AccountProof {
	if m != nil {
		return m.Proof
	}
	return nil
}

// AccountProof embeds user and account info for the the
// QueryAccountProofResponse
type AccountProof struct {
	Address      string `protobuf:"bytes,1,opt,name=address,proto3" json:"address,omitempty"`
	AccountProof string `protobuf:"bytes,2,opt,name=account_proof,json=accountProof,proto3" json:"account_proof,omitempty"`
	Index        uint64 `protobuf:"varint,3,opt,name=index,proto3" json:"index,omitempty"`
}

func (m *AccountProof) Reset()         { *m = AccountProof{} }
func (m *AccountProof) String() string { return proto.CompactTextString(m) }
func (*AccountProof) ProtoMessage()    {}
func (*AccountProof) Descriptor() ([]byte, []int) {
	return fileDescriptor_c289e17b6179cf02, []int{11}
}
func (m *AccountProof) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AccountProof) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AccountProof.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *AccountProof) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AccountProof.Merge(m, src)
}
func (m *AccountProof) XXX_Size() int {
	return m.Size()
}
func (m *AccountProof) XXX_DiscardUnknown() {
	xxx_messageInfo_AccountProof.DiscardUnknown(m)
}

var xxx_messageInfo_AccountProof proto.InternalMessageInfo

func (m *AccountProof) GetAddress() string {
	if m != nil {
		return m.Address
	}
	return ""
}

func (m *AccountProof) GetAccountProof() string {
	if m != nil {
		return m.AccountProof
	}
	return ""
}

func (m *AccountProof) GetIndex() uint64 {
	if m != nil {
		return m.Index
	}
	return 0
}

func init() {
	proto.RegisterType((*QueryTopupSequenceRequest)(nil), "heimdallv2.topup.v1.QueryTopupSequenceRequest")
	proto.RegisterType((*QueryTopupSequenceResponse)(nil), "heimdallv2.topup.v1.QueryTopupSequenceResponse")
	proto.RegisterType((*QueryIsTopupTxOldResponse)(nil), "heimdallv2.topup.v1.QueryIsTopupTxOldResponse")
	proto.RegisterType((*QueryDividendAccountRequest)(nil), "heimdallv2.topup.v1.QueryDividendAccountRequest")
	proto.RegisterType((*QueryDividendAccountResponse)(nil), "heimdallv2.topup.v1.QueryDividendAccountResponse")
	proto.RegisterType((*QueryDividendAccountRootHashRequest)(nil), "heimdallv2.topup.v1.QueryDividendAccountRootHashRequest")
	proto.RegisterType((*QueryDividendAccountRootHashResponse)(nil), "heimdallv2.topup.v1.QueryDividendAccountRootHashResponse")
	proto.RegisterType((*QueryVerifyAccountProofRequest)(nil), "heimdallv2.topup.v1.QueryVerifyAccountProofRequest")
	proto.RegisterType((*QueryVerifyAccountProofResponse)(nil), "heimdallv2.topup.v1.QueryVerifyAccountProofResponse")
	proto.RegisterType((*QueryAccountProofRequest)(nil), "heimdallv2.topup.v1.QueryAccountProofRequest")
	proto.RegisterType((*QueryAccountProofResponse)(nil), "heimdallv2.topup.v1.QueryAccountProofResponse")
	proto.RegisterType((*AccountProof)(nil), "heimdallv2.topup.v1.AccountProof")
}

func init() { proto.RegisterFile("heimdallv2/topup/v1/query.proto", fileDescriptor_c289e17b6179cf02) }

var fileDescriptor_c289e17b6179cf02 = []byte{
	// 825 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xac, 0x96, 0xc1, 0x4f, 0xdb, 0x48,
	0x14, 0xc6, 0x63, 0x96, 0x40, 0x18, 0x58, 0xb1, 0x3b, 0x9b, 0xd5, 0x06, 0x07, 0x39, 0xac, 0xd9,
	0x5d, 0x60, 0xdb, 0xd8, 0x60, 0x50, 0x0b, 0x87, 0x1e, 0x88, 0x2a, 0x01, 0x3d, 0x14, 0x30, 0x88,
	0x43, 0x2f, 0x91, 0x89, 0x07, 0xc7, 0x95, 0xf1, 0x04, 0xcf, 0x24, 0x4a, 0x54, 0x71, 0xe9, 0xa9,
	0xc7, 0x4a, 0x95, 0x7a, 0xec, 0xb9, 0xc7, 0x1e, 0x2a, 0xf5, 0xd4, 0x5e, 0xcb, 0x11, 0xb5, 0x97,
	0x9e, 0xaa, 0x0a, 0x2a, 0xf5, 0xdf, 0xa8, 0x3c, 0x1e, 0xe3, 0x24, 0x76, 0x50, 0xa0, 0x3d, 0xc1,
	0x8c, 0xdf, 0xfb, 0xde, 0xef, 0x9b, 0x99, 0xf7, 0x00, 0x14, 0xaa, 0xc8, 0x3e, 0x34, 0x0d, 0xc7,
	0x69, 0x68, 0x2a, 0xc5, 0xb5, 0x7a, 0x4d, 0x6d, 0x2c, 0xa8, 0x47, 0x75, 0xe4, 0xb5, 0x94, 0x9a,
	0x87, 0x29, 0x86, 0x7f, 0x44, 0x01, 0x0a, 0x0b, 0x50, 0x1a, 0x0b, 0xe2, 0x44, 0x05, 0x93, 0x43,
	0x4c, 0xca, 0x2c, 0x44, 0x0d, 0x16, 0x41, 0xbc, 0x98, 0x0f, 0x56, 0x81, 0x46, 0x97, 0x98, 0x98,
	0xb5, 0xb0, 0x85, 0x83, 0x24, 0xff, 0x37, 0xbe, 0x3b, 0x69, 0x61, 0x6c, 0x39, 0x48, 0x35, 0x6a,
	0xb6, 0x6a, 0xb8, 0x2e, 0xa6, 0x06, 0xb5, 0xb1, 0x1b, 0x0a, 0xce, 0xb4, 0x13, 0xb6, 0x6a, 0x88,
	0xa8, 0xa6, 0xdd, 0xb0, 0x4d, 0xe4, 0x9a, 0x65, 0xa3, 0x52, 0xc1, 0x75, 0x97, 0x86, 0x95, 0x63,
	0x81, 0x55, 0x83, 0x54, 0x83, 0x8f, 0xf2, 0x36, 0x98, 0xd8, 0xf6, 0x41, 0x76, 0x7d, 0x0b, 0x3b,
	0xe8, 0xa8, 0x8e, 0xdc, 0x0a, 0xd2, 0xfd, 0x9f, 0x84, 0xc2, 0xbf, 0xc0, 0x30, 0x6d, 0x96, 0xfd,
	0xe8, 0x9c, 0x30, 0x25, 0xcc, 0x8e, 0xe8, 0x43, 0xb4, 0xb9, 0x6e, 0x90, 0x2a, 0xcc, 0x83, 0x11,
	0x07, 0x5b, 0x65, 0xdb, 0x35, 0x51, 0x33, 0x37, 0x30, 0x25, 0xcc, 0x0e, 0xea, 0x19, 0x07, 0x5b,
	0x1b, 0xfe, 0x5a, 0x5e, 0x06, 0x62, 0x92, 0x24, 0xa9, 0x61, 0x97, 0x20, 0x28, 0x82, 0x0c, 0xe1,
	0x7b, 0x5c, 0xf4, 0x62, 0x2d, 0x6b, 0x1c, 0x66, 0x83, 0xb0, 0xdc, 0xdd, 0xe6, 0xa6, 0x63, 0x5e,
	0x24, 0xfe, 0x09, 0x86, 0x6c, 0x52, 0xc6, 0x8e, 0xc9, 0xd2, 0x32, 0x7a, 0xda, 0x26, 0x9b, 0x8e,
	0x29, 0x6f, 0x83, 0x3c, 0xcb, 0xb9, 0xcb, 0xcd, 0xaf, 0x06, 0xde, 0x43, 0x0b, 0x1a, 0x18, 0x36,
	0x4c, 0xd3, 0x43, 0x84, 0x04, 0xd5, 0x4a, 0xb9, 0x0f, 0xaf, 0x8b, 0x59, 0x7e, 0x33, 0xab, 0xc1,
	0x97, 0x1d, 0xea, 0xd9, 0xae, 0xa5, 0x87, 0x81, 0xb2, 0x07, 0x26, 0x93, 0x25, 0x39, 0x89, 0x0e,
	0x7e, 0xeb, 0x3e, 0x6a, 0x26, 0x3e, 0xaa, 0xfd, 0xad, 0xb4, 0xbf, 0x0a, 0xff, 0xac, 0x95, 0x2e,
	0x91, 0xd2, 0xe0, 0xc9, 0xe7, 0x42, 0x4a, 0x1f, 0x37, 0x3b, 0xb7, 0xe5, 0x7f, 0xc1, 0x74, 0x62,
	0x4d, 0x8c, 0xa9, 0x7f, 0xe2, 0xdc, 0x8e, 0xec, 0x81, 0x7f, 0x2e, 0x0f, 0xe3, 0x88, 0xf7, 0xc0,
	0xef, 0x9c, 0xac, 0xec, 0x61, 0x4c, 0xa3, 0x3b, 0x1c, 0xd5, 0xa4, 0x38, 0xe3, 0x3a, 0xdf, 0x60,
	0x12, 0xe3, 0x46, 0xa7, 0xa6, 0xfc, 0x10, 0x48, 0xac, 0xe6, 0x1e, 0xf2, 0xec, 0x83, 0x16, 0xaf,
	0xb8, 0xe5, 0x61, 0x7c, 0xf0, 0x03, 0x87, 0x0c, 0xb3, 0x20, 0x5d, 0xf3, 0x35, 0xd8, 0xf3, 0x19,
	0xd1, 0x83, 0x85, 0x5c, 0x02, 0x85, 0x9e, 0xb5, 0xb8, 0xb5, 0x02, 0x18, 0xb5, 0x49, 0xb9, 0xe1,
	0x07, 0xd8, 0x28, 0x7c, 0x0c, 0xc0, 0x26, 0x7b, 0x7c, 0x47, 0xbe, 0x0f, 0x72, 0x4c, 0xe3, 0x27,
	0x91, 0xca, 0xbb, 0xfc, 0x55, 0x26, 0xd2, 0xdc, 0x0e, 0x6d, 0x24, 0x3d, 0x00, 0x3e, 0x16, 0x94,
	0x8e, 0x4c, 0xee, 0xf4, 0x18, 0x8c, 0xb5, 0x6f, 0x5f, 0xeb, 0x0c, 0xa7, 0xc1, 0xaf, 0xe1, 0x2d,
	0xb7, 0x9f, 0xe5, 0x98, 0xd1, 0x2e, 0x9c, 0x05, 0xe9, 0xa0, 0x4f, 0x7f, 0x61, 0x7d, 0x1a, 0x2c,
	0xb4, 0x37, 0x19, 0x90, 0x66, 0xae, 0xe0, 0x73, 0x01, 0x8c, 0xb5, 0x37, 0x1c, 0x54, 0x12, 0x3d,
	0xf4, 0x9c, 0x12, 0xe2, 0x25, 0xf1, 0x49, 0x8d, 0x2c, 0xff, 0xf7, 0xe4, 0xdb, 0xab, 0xff, 0x85,
	0xc7, 0x1f, 0xbf, 0x3e, 0x1b, 0xc8, 0xc3, 0x09, 0x35, 0x36, 0x68, 0x6d, 0x82, 0x1d, 0x93, 0x36,
	0xe1, 0x0b, 0x01, 0xc0, 0x35, 0x44, 0xb9, 0x42, 0x58, 0xf5, 0xca, 0x78, 0x6a, 0xdf, 0xf1, 0x9c,
	0x6f, 0x26, 0xe2, 0x9b, 0x84, 0x62, 0x9c, 0x2f, 0x1c, 0x57, 0xf0, 0xad, 0x00, 0xf2, 0x6b, 0x88,
	0x76, 0x77, 0x78, 0x8b, 0xdf, 0x16, 0x9c, 0xef, 0x5d, 0x39, 0x79, 0x5a, 0x89, 0x0b, 0x57, 0xc8,
	0xe0, 0xb4, 0x2b, 0x11, 0xad, 0x02, 0x6f, 0xc6, 0x69, 0xc3, 0x41, 0x53, 0xe4, 0x8f, 0x42, 0x7d,
	0xc4, 0x5f, 0xcf, 0x31, 0x7c, 0x2f, 0x00, 0x31, 0xce, 0x1f, 0xf6, 0x3d, 0x5c, 0xee, 0x1f, 0xa6,
	0x73, 0x4a, 0x89, 0x2b, 0xd7, 0xc8, 0xe4, 0x76, 0x96, 0x22, 0x3b, 0x73, 0x70, 0xa6, 0x0f, 0x3b,
	0xfe, 0x78, 0x83, 0xef, 0x04, 0x00, 0xe3, 0x23, 0x03, 0x2e, 0xf6, 0xe6, 0xe8, 0x39, 0xcc, 0xc4,
	0xa5, 0xab, 0x25, 0x71, 0xee, 0x3b, 0x11, 0xb7, 0x06, 0xe7, 0xe3, 0xdc, 0x1c, 0xb7, 0xc8, 0xfa,
	0x34, 0xba, 0x03, 0x95, 0xcd, 0xb1, 0x16, 0x7c, 0x29, 0x80, 0xf1, 0x35, 0x44, 0x3b, 0xe8, 0x8b,
	0xbd, 0x41, 0x92, 0xb8, 0x95, 0x7e, 0xc3, 0x39, 0xf1, 0xad, 0x88, 0xf8, 0x06, 0x9c, 0xeb, 0x9b,
	0xb8, 0xb4, 0x7e, 0x72, 0x26, 0x09, 0xa7, 0x67, 0x92, 0xf0, 0xe5, 0x4c, 0x12, 0x9e, 0x9e, 0x4b,
	0xa9, 0xd3, 0x73, 0x29, 0xf5, 0xe9, 0x5c, 0x4a, 0x3d, 0x50, 0x2c, 0x9b, 0x56, 0xeb, 0xfb, 0x4a,
	0x05, 0x1f, 0xaa, 0xf3, 0xcd, 0x2d, 0xec, 0xb4, 0x2c, 0xec, 0x5e, 0x08, 0x17, 0x1b, 0x9a, 0xda,
	0xe4, 0xda, 0xec, 0xcf, 0xce, 0xfe, 0x10, 0xfb, 0x17, 0x64, 0xf1, 0x7b, 0x00, 0x00, 0x00, 0xff,
	0xff, 0x64, 0xce, 0x06, 0xa8, 0x6c, 0x09, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// QueryClient is the client API for Query service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type QueryClient interface {
	// IsTopupTxOld queries for a specific topup tx to check its status (old
	// means already submitted)
	IsTopupTxOld(ctx context.Context, in *QueryTopupSequenceRequest, opts ...grpc.CallOption) (*QueryIsTopupTxOldResponse, error)
	// GetTopupTxSequence queries for a specific topup tx and returns its sequence
	GetTopupTxSequence(ctx context.Context, in *QueryTopupSequenceRequest, opts ...grpc.CallOption) (*QueryTopupSequenceResponse, error)
	// GetDividendAccountByAddress queries for a specific DividendAccount by its
	// address
	GetDividendAccountByAddress(ctx context.Context, in *QueryDividendAccountRequest, opts ...grpc.CallOption) (*QueryDividendAccountResponse, error)
	// GetDividendAccountRootHash calculates and returns the dividend account root
	// hash
	GetDividendAccountRootHash(ctx context.Context, in *QueryDividendAccountRootHashRequest, opts ...grpc.CallOption) (*QueryDividendAccountRootHashResponse, error)
	// VerifyAccountProof queries for the proof of an account given its address
	VerifyAccountProof(ctx context.Context, in *QueryVerifyAccountProofRequest, opts ...grpc.CallOption) (*QueryVerifyAccountProofResponse, error)
	// GetAccountProof queries for the account proof of a given address
	GetAccountProof(ctx context.Context, in *QueryAccountProofRequest, opts ...grpc.CallOption) (*QueryAccountProofResponse, error)
}

type queryClient struct {
	cc grpc1.ClientConn
}

func NewQueryClient(cc grpc1.ClientConn) QueryClient {
	return &queryClient{cc}
}

func (c *queryClient) IsTopupTxOld(ctx context.Context, in *QueryTopupSequenceRequest, opts ...grpc.CallOption) (*QueryIsTopupTxOldResponse, error) {
	out := new(QueryIsTopupTxOldResponse)
	err := c.cc.Invoke(ctx, "/heimdallv2.topup.v1.Query/IsTopupTxOld", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) GetTopupTxSequence(ctx context.Context, in *QueryTopupSequenceRequest, opts ...grpc.CallOption) (*QueryTopupSequenceResponse, error) {
	out := new(QueryTopupSequenceResponse)
	err := c.cc.Invoke(ctx, "/heimdallv2.topup.v1.Query/GetTopupTxSequence", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) GetDividendAccountByAddress(ctx context.Context, in *QueryDividendAccountRequest, opts ...grpc.CallOption) (*QueryDividendAccountResponse, error) {
	out := new(QueryDividendAccountResponse)
	err := c.cc.Invoke(ctx, "/heimdallv2.topup.v1.Query/GetDividendAccountByAddress", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) GetDividendAccountRootHash(ctx context.Context, in *QueryDividendAccountRootHashRequest, opts ...grpc.CallOption) (*QueryDividendAccountRootHashResponse, error) {
	out := new(QueryDividendAccountRootHashResponse)
	err := c.cc.Invoke(ctx, "/heimdallv2.topup.v1.Query/GetDividendAccountRootHash", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) VerifyAccountProof(ctx context.Context, in *QueryVerifyAccountProofRequest, opts ...grpc.CallOption) (*QueryVerifyAccountProofResponse, error) {
	out := new(QueryVerifyAccountProofResponse)
	err := c.cc.Invoke(ctx, "/heimdallv2.topup.v1.Query/VerifyAccountProof", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) GetAccountProof(ctx context.Context, in *QueryAccountProofRequest, opts ...grpc.CallOption) (*QueryAccountProofResponse, error) {
	out := new(QueryAccountProofResponse)
	err := c.cc.Invoke(ctx, "/heimdallv2.topup.v1.Query/GetAccountProof", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// QueryServer is the server API for Query service.
type QueryServer interface {
	// IsTopupTxOld queries for a specific topup tx to check its status (old
	// means already submitted)
	IsTopupTxOld(context.Context, *QueryTopupSequenceRequest) (*QueryIsTopupTxOldResponse, error)
	// GetTopupTxSequence queries for a specific topup tx and returns its sequence
	GetTopupTxSequence(context.Context, *QueryTopupSequenceRequest) (*QueryTopupSequenceResponse, error)
	// GetDividendAccountByAddress queries for a specific DividendAccount by its
	// address
	GetDividendAccountByAddress(context.Context, *QueryDividendAccountRequest) (*QueryDividendAccountResponse, error)
	// GetDividendAccountRootHash calculates and returns the dividend account root
	// hash
	GetDividendAccountRootHash(context.Context, *QueryDividendAccountRootHashRequest) (*QueryDividendAccountRootHashResponse, error)
	// VerifyAccountProof queries for the proof of an account given its address
	VerifyAccountProof(context.Context, *QueryVerifyAccountProofRequest) (*QueryVerifyAccountProofResponse, error)
	// GetAccountProof queries for the account proof of a given address
	GetAccountProof(context.Context, *QueryAccountProofRequest) (*QueryAccountProofResponse, error)
}

// UnimplementedQueryServer can be embedded to have forward compatible implementations.
type UnimplementedQueryServer struct {
}

func (*UnimplementedQueryServer) IsTopupTxOld(ctx context.Context, req *QueryTopupSequenceRequest) (*QueryIsTopupTxOldResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method IsTopupTxOld not implemented")
}
func (*UnimplementedQueryServer) GetTopupTxSequence(ctx context.Context, req *QueryTopupSequenceRequest) (*QueryTopupSequenceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTopupTxSequence not implemented")
}
func (*UnimplementedQueryServer) GetDividendAccountByAddress(ctx context.Context, req *QueryDividendAccountRequest) (*QueryDividendAccountResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDividendAccountByAddress not implemented")
}
func (*UnimplementedQueryServer) GetDividendAccountRootHash(ctx context.Context, req *QueryDividendAccountRootHashRequest) (*QueryDividendAccountRootHashResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDividendAccountRootHash not implemented")
}
func (*UnimplementedQueryServer) VerifyAccountProof(ctx context.Context, req *QueryVerifyAccountProofRequest) (*QueryVerifyAccountProofResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method VerifyAccountProof not implemented")
}
func (*UnimplementedQueryServer) GetAccountProof(ctx context.Context, req *QueryAccountProofRequest) (*QueryAccountProofResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAccountProof not implemented")
}

func RegisterQueryServer(s grpc1.Server, srv QueryServer) {
	s.RegisterService(&_Query_serviceDesc, srv)
}

func _Query_IsTopupTxOld_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryTopupSequenceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).IsTopupTxOld(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/heimdallv2.topup.v1.Query/IsTopupTxOld",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).IsTopupTxOld(ctx, req.(*QueryTopupSequenceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_GetTopupTxSequence_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryTopupSequenceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).GetTopupTxSequence(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/heimdallv2.topup.v1.Query/GetTopupTxSequence",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).GetTopupTxSequence(ctx, req.(*QueryTopupSequenceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_GetDividendAccountByAddress_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryDividendAccountRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).GetDividendAccountByAddress(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/heimdallv2.topup.v1.Query/GetDividendAccountByAddress",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).GetDividendAccountByAddress(ctx, req.(*QueryDividendAccountRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_GetDividendAccountRootHash_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryDividendAccountRootHashRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).GetDividendAccountRootHash(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/heimdallv2.topup.v1.Query/GetDividendAccountRootHash",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).GetDividendAccountRootHash(ctx, req.(*QueryDividendAccountRootHashRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_VerifyAccountProof_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryVerifyAccountProofRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).VerifyAccountProof(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/heimdallv2.topup.v1.Query/VerifyAccountProof",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).VerifyAccountProof(ctx, req.(*QueryVerifyAccountProofRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_GetAccountProof_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryAccountProofRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).GetAccountProof(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/heimdallv2.topup.v1.Query/GetAccountProof",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).GetAccountProof(ctx, req.(*QueryAccountProofRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Query_serviceDesc = grpc.ServiceDesc{
	ServiceName: "heimdallv2.topup.v1.Query",
	HandlerType: (*QueryServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "IsTopupTxOld",
			Handler:    _Query_IsTopupTxOld_Handler,
		},
		{
			MethodName: "GetTopupTxSequence",
			Handler:    _Query_GetTopupTxSequence_Handler,
		},
		{
			MethodName: "GetDividendAccountByAddress",
			Handler:    _Query_GetDividendAccountByAddress_Handler,
		},
		{
			MethodName: "GetDividendAccountRootHash",
			Handler:    _Query_GetDividendAccountRootHash_Handler,
		},
		{
			MethodName: "VerifyAccountProof",
			Handler:    _Query_VerifyAccountProof_Handler,
		},
		{
			MethodName: "GetAccountProof",
			Handler:    _Query_GetAccountProof_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "heimdallv2/topup/v1/query.proto",
}

func (m *QueryTopupSequenceRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryTopupSequenceRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryTopupSequenceRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.LogIndex != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.LogIndex))
		i--
		dAtA[i] = 0x10
	}
	if len(m.TxHash) > 0 {
		i -= len(m.TxHash)
		copy(dAtA[i:], m.TxHash)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.TxHash)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryTopupSequenceResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryTopupSequenceResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryTopupSequenceResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Sequence) > 0 {
		i -= len(m.Sequence)
		copy(dAtA[i:], m.Sequence)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Sequence)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryIsTopupTxOldResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryIsTopupTxOldResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryIsTopupTxOldResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.IsOld {
		i--
		if m.IsOld {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *QueryDividendAccountRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryDividendAccountRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryDividendAccountRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Address) > 0 {
		i -= len(m.Address)
		copy(dAtA[i:], m.Address)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Address)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryDividendAccountResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryDividendAccountResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryDividendAccountResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.DividendAccount.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryDividendAccountRootHashRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryDividendAccountRootHashRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryDividendAccountRootHashRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *QueryDividendAccountRootHashResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryDividendAccountRootHashResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryDividendAccountRootHashResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.AccountRootHash != nil {
		{
			size, err := m.AccountRootHash.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryVerifyAccountProofRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryVerifyAccountProofRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryVerifyAccountProofRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Proof) > 0 {
		i -= len(m.Proof)
		copy(dAtA[i:], m.Proof)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Proof)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Address) > 0 {
		i -= len(m.Address)
		copy(dAtA[i:], m.Address)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Address)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryVerifyAccountProofResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryVerifyAccountProofResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryVerifyAccountProofResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.IsVerified {
		i--
		if m.IsVerified {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *QueryAccountProofRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAccountProofRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAccountProofRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Address) > 0 {
		i -= len(m.Address)
		copy(dAtA[i:], m.Address)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Address)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryAccountProofResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAccountProofResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAccountProofResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Proof != nil {
		{
			size, err := m.Proof.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *AccountProof) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AccountProof) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AccountProof) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Index != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.Index))
		i--
		dAtA[i] = 0x18
	}
	if len(m.AccountProof) > 0 {
		i -= len(m.AccountProof)
		copy(dAtA[i:], m.AccountProof)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.AccountProof)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Address) > 0 {
		i -= len(m.Address)
		copy(dAtA[i:], m.Address)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Address)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintQuery(dAtA []byte, offset int, v uint64) int {
	offset -= sovQuery(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *QueryTopupSequenceRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.TxHash)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	if m.LogIndex != 0 {
		n += 1 + sovQuery(uint64(m.LogIndex))
	}
	return n
}

func (m *QueryTopupSequenceResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Sequence)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryIsTopupTxOldResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.IsOld {
		n += 2
	}
	return n
}

func (m *QueryDividendAccountRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Address)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryDividendAccountResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.DividendAccount.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryDividendAccountRootHashRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *QueryDividendAccountRootHashResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.AccountRootHash != nil {
		l = m.AccountRootHash.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryVerifyAccountProofRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Address)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	l = len(m.Proof)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryVerifyAccountProofResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.IsVerified {
		n += 2
	}
	return n
}

func (m *QueryAccountProofRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Address)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryAccountProofResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Proof != nil {
		l = m.Proof.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *AccountProof) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Address)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	l = len(m.AccountProof)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	if m.Index != 0 {
		n += 1 + sovQuery(uint64(m.Index))
	}
	return n
}

func sovQuery(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozQuery(x uint64) (n int) {
	return sovQuery(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *QueryTopupSequenceRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryTopupSequenceRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryTopupSequenceRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TxHash", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TxHash = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LogIndex", wireType)
			}
			m.LogIndex = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.LogIndex |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryTopupSequenceResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryTopupSequenceResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryTopupSequenceResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sequence", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Sequence = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryIsTopupTxOldResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryIsTopupTxOldResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryIsTopupTxOldResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsOld", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsOld = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryDividendAccountRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryDividendAccountRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryDividendAccountRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Address", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Address = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryDividendAccountResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryDividendAccountResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryDividendAccountResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DividendAccount", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.DividendAccount.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryDividendAccountRootHashRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryDividendAccountRootHashRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryDividendAccountRootHashRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryDividendAccountRootHashResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryDividendAccountRootHashResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryDividendAccountRootHashResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AccountRootHash", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.AccountRootHash == nil {
				m.AccountRootHash = &types.HeimdallHash{}
			}
			if err := m.AccountRootHash.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryVerifyAccountProofRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryVerifyAccountProofRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryVerifyAccountProofRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Address", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Address = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Proof", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Proof = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryVerifyAccountProofResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryVerifyAccountProofResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryVerifyAccountProofResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsVerified", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsVerified = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAccountProofRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAccountProofRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAccountProofRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Address", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Address = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAccountProofResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAccountProofResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAccountProofResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Proof", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Proof == nil {
				m.Proof = &AccountProof{}
			}
			if err := m.Proof.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AccountProof) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AccountProof: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AccountProof: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Address", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Address = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AccountProof", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AccountProof = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Index", wireType)
			}
			m.Index = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Index |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipQuery(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthQuery
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupQuery
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthQuery
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthQuery        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowQuery          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupQuery = fmt.Errorf("proto: unexpected end of group")
)
