// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: heimdallv2/checkpoint/v1/tx.proto

package types

import (
	context "context"
	fmt "fmt"
	types "github.com/0xPolygon/heimdall-v2/types"
	_ "github.com/cosmos/cosmos-proto"
	_ "github.com/cosmos/cosmos-sdk/types/msgservice"
	_ "github.com/cosmos/cosmos-sdk/types/tx/amino"
	_ "github.com/cosmos/gogoproto/gogoproto"
	grpc1 "github.com/cosmos/gogoproto/grpc"
	proto "github.com/cosmos/gogoproto/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// MsgCheckpointAdjust defines a SDK message for adjusting the checkpoint
type MsgCheckpointAdjust struct {
	HeaderIndex uint64             `protobuf:"varint,1,opt,name=header_index,json=headerIndex,proto3" json:"header_index,omitempty"`
	Proposer    string             `protobuf:"bytes,2,opt,name=proposer,proto3" json:"proposer,omitempty"`
	From        string             `protobuf:"bytes,3,opt,name=from,proto3" json:"from,omitempty"`
	StartBlock  uint64             `protobuf:"varint,4,opt,name=start_block,json=startBlock,proto3" json:"start_block,omitempty"`
	EndBlock    uint64             `protobuf:"varint,5,opt,name=end_block,json=endBlock,proto3" json:"end_block,omitempty"`
	RootHash    types.HeimdallHash `protobuf:"bytes,6,opt,name=root_hash,json=rootHash,proto3" json:"root_hash"`
}

func (m *MsgCheckpointAdjust) Reset()         { *m = MsgCheckpointAdjust{} }
func (m *MsgCheckpointAdjust) String() string { return proto.CompactTextString(m) }
func (*MsgCheckpointAdjust) ProtoMessage()    {}
func (*MsgCheckpointAdjust) Descriptor() ([]byte, []int) {
	return fileDescriptor_690e34ffa803b8fb, []int{0}
}
func (m *MsgCheckpointAdjust) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgCheckpointAdjust) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgCheckpointAdjust.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgCheckpointAdjust) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgCheckpointAdjust.Merge(m, src)
}
func (m *MsgCheckpointAdjust) XXX_Size() int {
	return m.Size()
}
func (m *MsgCheckpointAdjust) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgCheckpointAdjust.DiscardUnknown(m)
}

var xxx_messageInfo_MsgCheckpointAdjust proto.InternalMessageInfo

func (m *MsgCheckpointAdjust) GetHeaderIndex() uint64 {
	if m != nil {
		return m.HeaderIndex
	}
	return 0
}

func (m *MsgCheckpointAdjust) GetProposer() string {
	if m != nil {
		return m.Proposer
	}
	return ""
}

func (m *MsgCheckpointAdjust) GetFrom() string {
	if m != nil {
		return m.From
	}
	return ""
}

func (m *MsgCheckpointAdjust) GetStartBlock() uint64 {
	if m != nil {
		return m.StartBlock
	}
	return 0
}

func (m *MsgCheckpointAdjust) GetEndBlock() uint64 {
	if m != nil {
		return m.EndBlock
	}
	return 0
}

func (m *MsgCheckpointAdjust) GetRootHash() types.HeimdallHash {
	if m != nil {
		return m.RootHash
	}
	return types.HeimdallHash{}
}

// MsgCheckpointAdjustResponse defines the Msg/CheckpointAdjust response type.
type MsgCheckpointAdjustResponse struct {
}

func (m *MsgCheckpointAdjustResponse) Reset()         { *m = MsgCheckpointAdjustResponse{} }
func (m *MsgCheckpointAdjustResponse) String() string { return proto.CompactTextString(m) }
func (*MsgCheckpointAdjustResponse) ProtoMessage()    {}
func (*MsgCheckpointAdjustResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_690e34ffa803b8fb, []int{1}
}
func (m *MsgCheckpointAdjustResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgCheckpointAdjustResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgCheckpointAdjustResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgCheckpointAdjustResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgCheckpointAdjustResponse.Merge(m, src)
}
func (m *MsgCheckpointAdjustResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgCheckpointAdjustResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgCheckpointAdjustResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgCheckpointAdjustResponse proto.InternalMessageInfo

// MsgCheckpoint defines a SDK message for creating the checkpoint
type MsgCheckpoint struct {
	Proposer        string             `protobuf:"bytes,1,opt,name=proposer,proto3" json:"proposer,omitempty"`
	StartBlock      uint64             `protobuf:"varint,2,opt,name=start_block,json=startBlock,proto3" json:"start_block,omitempty"`
	EndBlock        uint64             `protobuf:"varint,3,opt,name=end_block,json=endBlock,proto3" json:"end_block,omitempty"`
	RootHash        types.HeimdallHash `protobuf:"bytes,4,opt,name=root_hash,json=rootHash,proto3" json:"root_hash"`
	AccountRootHash types.HeimdallHash `protobuf:"bytes,5,opt,name=account_root_hash,json=accountRootHash,proto3" json:"account_root_hash"`
	BorChainID      string             `protobuf:"bytes,6,opt,name=bor_chain_i_d,json=borChainID,proto3" json:"bor_chain_i_d,omitempty"`
}

func (m *MsgCheckpoint) Reset()         { *m = MsgCheckpoint{} }
func (m *MsgCheckpoint) String() string { return proto.CompactTextString(m) }
func (*MsgCheckpoint) ProtoMessage()    {}
func (*MsgCheckpoint) Descriptor() ([]byte, []int) {
	return fileDescriptor_690e34ffa803b8fb, []int{2}
}
func (m *MsgCheckpoint) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgCheckpoint) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgCheckpoint.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgCheckpoint) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgCheckpoint.Merge(m, src)
}
func (m *MsgCheckpoint) XXX_Size() int {
	return m.Size()
}
func (m *MsgCheckpoint) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgCheckpoint.DiscardUnknown(m)
}

var xxx_messageInfo_MsgCheckpoint proto.InternalMessageInfo

func (m *MsgCheckpoint) GetProposer() string {
	if m != nil {
		return m.Proposer
	}
	return ""
}

func (m *MsgCheckpoint) GetStartBlock() uint64 {
	if m != nil {
		return m.StartBlock
	}
	return 0
}

func (m *MsgCheckpoint) GetEndBlock() uint64 {
	if m != nil {
		return m.EndBlock
	}
	return 0
}

func (m *MsgCheckpoint) GetRootHash() types.HeimdallHash {
	if m != nil {
		return m.RootHash
	}
	return types.HeimdallHash{}
}

func (m *MsgCheckpoint) GetAccountRootHash() types.HeimdallHash {
	if m != nil {
		return m.AccountRootHash
	}
	return types.HeimdallHash{}
}

func (m *MsgCheckpoint) GetBorChainID() string {
	if m != nil {
		return m.BorChainID
	}
	return ""
}

// MsgCheckpointResponse defines the Msg/Checkpoint response type.
type MsgCheckpointResponse struct {
}

func (m *MsgCheckpointResponse) Reset()         { *m = MsgCheckpointResponse{} }
func (m *MsgCheckpointResponse) String() string { return proto.CompactTextString(m) }
func (*MsgCheckpointResponse) ProtoMessage()    {}
func (*MsgCheckpointResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_690e34ffa803b8fb, []int{3}
}
func (m *MsgCheckpointResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgCheckpointResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgCheckpointResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgCheckpointResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgCheckpointResponse.Merge(m, src)
}
func (m *MsgCheckpointResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgCheckpointResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgCheckpointResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgCheckpointResponse proto.InternalMessageInfo

// MsgCheckpointAck defines a SDK message for creating the ack of checkpoint
type MsgCheckpointAck struct {
	From       string             `protobuf:"bytes,1,opt,name=from,proto3" json:"from,omitempty"`
	Number     uint64             `protobuf:"varint,2,opt,name=number,proto3" json:"number,omitempty"`
	Proposer   string             `protobuf:"bytes,3,opt,name=proposer,proto3" json:"proposer,omitempty"`
	StartBlock uint64             `protobuf:"varint,4,opt,name=start_block,json=startBlock,proto3" json:"start_block,omitempty"`
	EndBlock   uint64             `protobuf:"varint,5,opt,name=end_block,json=endBlock,proto3" json:"end_block,omitempty"`
	RootHash   types.HeimdallHash `protobuf:"bytes,6,opt,name=root_hash,json=rootHash,proto3" json:"root_hash"`
	TxHash     types.HeimdallHash `protobuf:"bytes,7,opt,name=tx_hash,json=txHash,proto3" json:"tx_hash"`
	LogIndex   uint64             `protobuf:"varint,8,opt,name=log_index,json=logIndex,proto3" json:"log_index,omitempty"`
}

func (m *MsgCheckpointAck) Reset()         { *m = MsgCheckpointAck{} }
func (m *MsgCheckpointAck) String() string { return proto.CompactTextString(m) }
func (*MsgCheckpointAck) ProtoMessage()    {}
func (*MsgCheckpointAck) Descriptor() ([]byte, []int) {
	return fileDescriptor_690e34ffa803b8fb, []int{4}
}
func (m *MsgCheckpointAck) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgCheckpointAck) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgCheckpointAck.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgCheckpointAck) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgCheckpointAck.Merge(m, src)
}
func (m *MsgCheckpointAck) XXX_Size() int {
	return m.Size()
}
func (m *MsgCheckpointAck) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgCheckpointAck.DiscardUnknown(m)
}

var xxx_messageInfo_MsgCheckpointAck proto.InternalMessageInfo

func (m *MsgCheckpointAck) GetFrom() string {
	if m != nil {
		return m.From
	}
	return ""
}

func (m *MsgCheckpointAck) GetNumber() uint64 {
	if m != nil {
		return m.Number
	}
	return 0
}

func (m *MsgCheckpointAck) GetProposer() string {
	if m != nil {
		return m.Proposer
	}
	return ""
}

func (m *MsgCheckpointAck) GetStartBlock() uint64 {
	if m != nil {
		return m.StartBlock
	}
	return 0
}

func (m *MsgCheckpointAck) GetEndBlock() uint64 {
	if m != nil {
		return m.EndBlock
	}
	return 0
}

func (m *MsgCheckpointAck) GetRootHash() types.HeimdallHash {
	if m != nil {
		return m.RootHash
	}
	return types.HeimdallHash{}
}

func (m *MsgCheckpointAck) GetTxHash() types.HeimdallHash {
	if m != nil {
		return m.TxHash
	}
	return types.HeimdallHash{}
}

func (m *MsgCheckpointAck) GetLogIndex() uint64 {
	if m != nil {
		return m.LogIndex
	}
	return 0
}

// MsgCheckpointAck defines the Msg/CheckpointAck response type.
type MsgCheckpointAckResponse struct {
}

func (m *MsgCheckpointAckResponse) Reset()         { *m = MsgCheckpointAckResponse{} }
func (m *MsgCheckpointAckResponse) String() string { return proto.CompactTextString(m) }
func (*MsgCheckpointAckResponse) ProtoMessage()    {}
func (*MsgCheckpointAckResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_690e34ffa803b8fb, []int{5}
}
func (m *MsgCheckpointAckResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgCheckpointAckResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgCheckpointAckResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgCheckpointAckResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgCheckpointAckResponse.Merge(m, src)
}
func (m *MsgCheckpointAckResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgCheckpointAckResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgCheckpointAckResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgCheckpointAckResponse proto.InternalMessageInfo

// MsgCheckpointNoAck defines a SDK message for creating the no-ack
type MsgCheckpointNoAck struct {
	From string `protobuf:"bytes,1,opt,name=from,proto3" json:"from,omitempty"`
}

func (m *MsgCheckpointNoAck) Reset()         { *m = MsgCheckpointNoAck{} }
func (m *MsgCheckpointNoAck) String() string { return proto.CompactTextString(m) }
func (*MsgCheckpointNoAck) ProtoMessage()    {}
func (*MsgCheckpointNoAck) Descriptor() ([]byte, []int) {
	return fileDescriptor_690e34ffa803b8fb, []int{6}
}
func (m *MsgCheckpointNoAck) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgCheckpointNoAck) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgCheckpointNoAck.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgCheckpointNoAck) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgCheckpointNoAck.Merge(m, src)
}
func (m *MsgCheckpointNoAck) XXX_Size() int {
	return m.Size()
}
func (m *MsgCheckpointNoAck) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgCheckpointNoAck.DiscardUnknown(m)
}

var xxx_messageInfo_MsgCheckpointNoAck proto.InternalMessageInfo

func (m *MsgCheckpointNoAck) GetFrom() string {
	if m != nil {
		return m.From
	}
	return ""
}

// MsgCheckpointNoAck defines the Msg/CheckpointNoAck response type.
type MsgCheckpointNoAckResponse struct {
}

func (m *MsgCheckpointNoAckResponse) Reset()         { *m = MsgCheckpointNoAckResponse{} }
func (m *MsgCheckpointNoAckResponse) String() string { return proto.CompactTextString(m) }
func (*MsgCheckpointNoAckResponse) ProtoMessage()    {}
func (*MsgCheckpointNoAckResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_690e34ffa803b8fb, []int{7}
}
func (m *MsgCheckpointNoAckResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgCheckpointNoAckResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgCheckpointNoAckResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgCheckpointNoAckResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgCheckpointNoAckResponse.Merge(m, src)
}
func (m *MsgCheckpointNoAckResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgCheckpointNoAckResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgCheckpointNoAckResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgCheckpointNoAckResponse proto.InternalMessageInfo

func init() {
	proto.RegisterType((*MsgCheckpointAdjust)(nil), "heimdallv2.checkpoint.v1.MsgCheckpointAdjust")
	proto.RegisterType((*MsgCheckpointAdjustResponse)(nil), "heimdallv2.checkpoint.v1.MsgCheckpointAdjustResponse")
	proto.RegisterType((*MsgCheckpoint)(nil), "heimdallv2.checkpoint.v1.MsgCheckpoint")
	proto.RegisterType((*MsgCheckpointResponse)(nil), "heimdallv2.checkpoint.v1.MsgCheckpointResponse")
	proto.RegisterType((*MsgCheckpointAck)(nil), "heimdallv2.checkpoint.v1.MsgCheckpointAck")
	proto.RegisterType((*MsgCheckpointAckResponse)(nil), "heimdallv2.checkpoint.v1.MsgCheckpointAckResponse")
	proto.RegisterType((*MsgCheckpointNoAck)(nil), "heimdallv2.checkpoint.v1.MsgCheckpointNoAck")
	proto.RegisterType((*MsgCheckpointNoAckResponse)(nil), "heimdallv2.checkpoint.v1.MsgCheckpointNoAckResponse")
}

func init() { proto.RegisterFile("heimdallv2/checkpoint/v1/tx.proto", fileDescriptor_690e34ffa803b8fb) }

var fileDescriptor_690e34ffa803b8fb = []byte{
	// 719 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xcc, 0x56, 0x3f, 0x6f, 0xd3, 0x5e,
	0x14, 0x8d, 0xeb, 0x24, 0x6d, 0x6e, 0x7f, 0x55, 0x5b, 0xff, 0x8a, 0x6a, 0x5c, 0xe2, 0x16, 0x4b,
	0x40, 0x14, 0xa8, 0x4d, 0x53, 0x18, 0xc8, 0xd6, 0x14, 0xa1, 0x76, 0x28, 0x42, 0x45, 0x2c, 0x2c,
	0x96, 0x63, 0xbb, 0xb6, 0x49, 0xec, 0x1b, 0xf9, 0x39, 0x91, 0xbb, 0x31, 0x21, 0xc4, 0xc4, 0x47,
	0xe8, 0xc8, 0xd8, 0x81, 0xaf, 0x80, 0xd4, 0xb1, 0x62, 0x40, 0x4c, 0x08, 0xb5, 0x43, 0x99, 0xf8,
	0x0c, 0xc8, 0x7f, 0xe2, 0xda, 0x6d, 0x23, 0x39, 0x65, 0x61, 0x89, 0xe2, 0x7b, 0xce, 0x3b, 0xef,
	0xe6, 0x9c, 0x77, 0x9f, 0x03, 0xb7, 0x4d, 0xdd, 0xb2, 0x35, 0xa5, 0xdb, 0x1d, 0x34, 0x24, 0xd5,
	0xd4, 0xd5, 0x4e, 0x0f, 0x2d, 0xc7, 0x93, 0x06, 0x6b, 0x92, 0xe7, 0x8b, 0x3d, 0x17, 0x3d, 0x64,
	0xd8, 0x73, 0x8a, 0x78, 0x4e, 0x11, 0x07, 0x6b, 0xdc, 0x82, 0x81, 0x06, 0x86, 0x24, 0x29, 0xf8,
	0x16, 0xf1, 0xb9, 0x9b, 0x2a, 0x12, 0x1b, 0x89, 0x1c, 0x01, 0xd1, 0x43, 0x0c, 0x2d, 0x46, 0x4f,
	0x92, 0x4d, 0x8c, 0x60, 0x0b, 0x9b, 0x18, 0x31, 0x30, 0xaf, 0xd8, 0x96, 0x83, 0x52, 0xf8, 0x19,
	0x97, 0x96, 0x52, 0x9d, 0x79, 0xfb, 0x3d, 0x9d, 0x48, 0xa6, 0x42, 0xcc, 0x08, 0x14, 0x7e, 0x4f,
	0xc0, 0xff, 0x3b, 0xc4, 0xd8, 0x4c, 0xda, 0xd9, 0xd0, 0xde, 0xf4, 0x89, 0xc7, 0xd4, 0xe0, 0x3f,
	0x53, 0x57, 0x34, 0xdd, 0x95, 0x2d, 0x47, 0xd3, 0x7d, 0x96, 0x5a, 0xa1, 0x6a, 0xc5, 0x56, 0xe9,
	0xd3, 0xd9, 0x61, 0x9d, 0xda, 0x9d, 0x8e, 0xa0, 0xed, 0x00, 0x61, 0x9e, 0xc0, 0x54, 0xcf, 0xc5,
	0x1e, 0x12, 0xdd, 0x65, 0x27, 0x56, 0xa8, 0x5a, 0xa5, 0x55, 0xfd, 0xfa, 0x79, 0x75, 0x21, 0x6e,
	0x77, 0x43, 0xd3, 0x5c, 0x9d, 0x90, 0x97, 0x9e, 0x6b, 0x39, 0x46, 0xb4, 0x3a, 0xa1, 0x33, 0x6b,
	0x50, 0xdc, 0x73, 0xd1, 0x66, 0xe9, 0x3c, 0xcb, 0x42, 0x2a, 0x73, 0x17, 0xa6, 0x89, 0xa7, 0xb8,
	0x9e, 0xdc, 0xee, 0xa2, 0xda, 0x61, 0x8b, 0xe9, 0xb6, 0x20, 0x44, 0x5a, 0x01, 0xc0, 0x08, 0x50,
	0xd1, 0x1d, 0x2d, 0x66, 0x95, 0xd2, 0xac, 0x29, 0xdd, 0xd1, 0x22, 0xce, 0x33, 0xa8, 0xb8, 0x88,
	0x9e, 0x1c, 0xd8, 0xc1, 0x96, 0x57, 0xa8, 0xda, 0x74, 0x83, 0x17, 0x53, 0x19, 0x85, 0x66, 0x89,
	0x5b, 0x71, 0x61, 0x4b, 0x21, 0x66, 0xab, 0x72, 0xf4, 0x63, 0xb9, 0x10, 0xeb, 0x04, 0x6b, 0x83,
	0x62, 0xf3, 0xfe, 0xfb, 0x83, 0x65, 0xea, 0xd7, 0xc1, 0x72, 0xe1, 0xc3, 0xd9, 0x61, 0x9d, 0x4f,
	0x85, 0x7f, 0x85, 0xb1, 0x42, 0x15, 0x96, 0xae, 0x28, 0xef, 0xea, 0xa4, 0x87, 0x0e, 0xd1, 0x85,
	0x77, 0x34, 0xcc, 0x64, 0xf0, 0x8c, 0xbf, 0xd4, 0x78, 0xfe, 0x5e, 0x30, 0x6b, 0x22, 0x97, 0x59,
	0x74, 0x0e, 0xb3, 0x8a, 0xd7, 0x36, 0x8b, 0x79, 0x05, 0xf3, 0x8a, 0xaa, 0x62, 0xdf, 0xf1, 0xe4,
	0x73, 0xbd, 0xd2, 0xb8, 0x7a, 0xb3, 0xb1, 0xc6, 0xee, 0x50, 0xb6, 0x06, 0x33, 0x6d, 0x74, 0x65,
	0xd5, 0x54, 0x2c, 0x47, 0xb6, 0x64, 0x2d, 0xcc, 0xb3, 0x92, 0xfc, 0xd8, 0x36, 0xba, 0x9b, 0x01,
	0xb4, 0xfd, 0xb4, 0x79, 0x27, 0x4e, 0x8b, 0x0a, 0xd2, 0x62, 0x47, 0xa5, 0x25, 0x2c, 0xc2, 0x8d,
	0x4c, 0x21, 0x49, 0xe8, 0x0b, 0x0d, 0x73, 0xd9, 0x04, 0xd5, 0x4e, 0x72, 0x92, 0xa9, 0xfc, 0x27,
	0xb9, 0x0a, 0x65, 0xa7, 0x6f, 0xb7, 0xe3, 0xa9, 0x49, 0x1c, 0x8f, 0x8b, 0x99, 0xd8, 0xe9, 0xbf,
	0x8a, 0xfd, 0x5f, 0x98, 0x11, 0xa6, 0x05, 0x93, 0x9e, 0x1f, 0xa9, 0x4c, 0x8e, 0xab, 0x52, 0xf6,
	0xfc, 0x50, 0x43, 0x80, 0x4a, 0x17, 0x8d, 0xf8, 0x42, 0x9a, 0xca, 0xf4, 0xdb, 0x45, 0x23, 0xbc,
	0x8d, 0x9a, 0xb5, 0xf4, 0x2c, 0x2e, 0x8d, 0x9c, 0x45, 0xb5, 0x23, 0x70, 0xc0, 0x5e, 0xac, 0x25,
	0x19, 0x13, 0x60, 0x32, 0xd8, 0x73, 0xbc, 0x5e, 0xc8, 0xcd, 0x7a, 0xba, 0x9d, 0xea, 0xa8, 0x76,
	0x42, 0x79, 0xe1, 0x16, 0x70, 0x97, 0xab, 0xc3, 0x96, 0x1a, 0xdf, 0x68, 0xa0, 0x77, 0x88, 0xc1,
	0xf8, 0x30, 0x77, 0xe9, 0xb2, 0x5e, 0x15, 0x47, 0xbd, 0x59, 0xc4, 0x2b, 0xee, 0x1a, 0xee, 0xf1,
	0x58, 0xf4, 0x61, 0x07, 0xcc, 0x1e, 0x40, 0xea, 0x5a, 0xba, 0x97, 0x53, 0x84, 0x93, 0x72, 0x12,
	0x93, 0x7d, 0x10, 0x66, 0xb2, 0xc3, 0x55, 0xcf, 0xdb, 0xaf, 0xda, 0xe1, 0x1a, 0xf9, 0xb9, 0xc9,
	0x86, 0x7d, 0x98, 0xbd, 0x18, 0xf5, 0x83, 0x9c, 0x32, 0x21, 0x9b, 0x7b, 0x34, 0x0e, 0x7b, 0xb8,
	0x2d, 0x57, 0x7a, 0x1b, 0x1c, 0x94, 0xd6, 0xce, 0xd1, 0x09, 0x4f, 0x1d, 0x9f, 0xf0, 0xd4, 0xcf,
	0x13, 0x9e, 0xfa, 0x78, 0xca, 0x17, 0x8e, 0x4f, 0xf9, 0xc2, 0xf7, 0x53, 0xbe, 0xf0, 0x7a, 0xdd,
	0xb0, 0x3c, 0xb3, 0xdf, 0x16, 0x55, 0xb4, 0xa5, 0x87, 0xfe, 0x0b, 0xec, 0xee, 0x1b, 0xe8, 0x48,
	0xc3, 0xad, 0x56, 0x07, 0x0d, 0xc9, 0x4f, 0xff, 0xd5, 0x08, 0x87, 0xa8, 0x5d, 0x0e, 0xdf, 0xeb,
	0xeb, 0x7f, 0x02, 0x00, 0x00, 0xff, 0xff, 0x2b, 0x20, 0xfb, 0x09, 0x90, 0x08, 0x00, 0x00,
}

func (this *MsgCheckpoint) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*MsgCheckpoint)
	if !ok {
		that2, ok := that.(MsgCheckpoint)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Proposer != that1.Proposer {
		return false
	}
	if this.StartBlock != that1.StartBlock {
		return false
	}
	if this.EndBlock != that1.EndBlock {
		return false
	}
	if !this.RootHash.Equal(&that1.RootHash) {
		return false
	}
	if !this.AccountRootHash.Equal(&that1.AccountRootHash) {
		return false
	}
	if this.BorChainID != that1.BorChainID {
		return false
	}
	return true
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// MsgClient is the client API for Msg service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type MsgClient interface {
	// CheckpointAdjust defines a method for checkpointAdjust
	CheckpointAdjust(ctx context.Context, in *MsgCheckpointAdjust, opts ...grpc.CallOption) (*MsgCheckpointAdjustResponse, error)
	// Checkpoint defines a method for checkpoint
	Checkpoint(ctx context.Context, in *MsgCheckpoint, opts ...grpc.CallOption) (*MsgCheckpointResponse, error)
	// CheckpointAck defines a method for checkpoint ack
	CheckpointAck(ctx context.Context, in *MsgCheckpointAck, opts ...grpc.CallOption) (*MsgCheckpointAckResponse, error)
	// CheckpointNoAck defines a method for checkpoint no ack
	CheckpointNoAck(ctx context.Context, in *MsgCheckpointNoAck, opts ...grpc.CallOption) (*MsgCheckpointNoAckResponse, error)
}

type msgClient struct {
	cc grpc1.ClientConn
}

func NewMsgClient(cc grpc1.ClientConn) MsgClient {
	return &msgClient{cc}
}

func (c *msgClient) CheckpointAdjust(ctx context.Context, in *MsgCheckpointAdjust, opts ...grpc.CallOption) (*MsgCheckpointAdjustResponse, error) {
	out := new(MsgCheckpointAdjustResponse)
	err := c.cc.Invoke(ctx, "/heimdallv2.checkpoint.v1.Msg/CheckpointAdjust", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) Checkpoint(ctx context.Context, in *MsgCheckpoint, opts ...grpc.CallOption) (*MsgCheckpointResponse, error) {
	out := new(MsgCheckpointResponse)
	err := c.cc.Invoke(ctx, "/heimdallv2.checkpoint.v1.Msg/Checkpoint", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) CheckpointAck(ctx context.Context, in *MsgCheckpointAck, opts ...grpc.CallOption) (*MsgCheckpointAckResponse, error) {
	out := new(MsgCheckpointAckResponse)
	err := c.cc.Invoke(ctx, "/heimdallv2.checkpoint.v1.Msg/CheckpointAck", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) CheckpointNoAck(ctx context.Context, in *MsgCheckpointNoAck, opts ...grpc.CallOption) (*MsgCheckpointNoAckResponse, error) {
	out := new(MsgCheckpointNoAckResponse)
	err := c.cc.Invoke(ctx, "/heimdallv2.checkpoint.v1.Msg/CheckpointNoAck", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MsgServer is the server API for Msg service.
type MsgServer interface {
	// CheckpointAdjust defines a method for checkpointAdjust
	CheckpointAdjust(context.Context, *MsgCheckpointAdjust) (*MsgCheckpointAdjustResponse, error)
	// Checkpoint defines a method for checkpoint
	Checkpoint(context.Context, *MsgCheckpoint) (*MsgCheckpointResponse, error)
	// CheckpointAck defines a method for checkpoint ack
	CheckpointAck(context.Context, *MsgCheckpointAck) (*MsgCheckpointAckResponse, error)
	// CheckpointNoAck defines a method for checkpoint no ack
	CheckpointNoAck(context.Context, *MsgCheckpointNoAck) (*MsgCheckpointNoAckResponse, error)
}

// UnimplementedMsgServer can be embedded to have forward compatible implementations.
type UnimplementedMsgServer struct {
}

func (*UnimplementedMsgServer) CheckpointAdjust(ctx context.Context, req *MsgCheckpointAdjust) (*MsgCheckpointAdjustResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CheckpointAdjust not implemented")
}
func (*UnimplementedMsgServer) Checkpoint(ctx context.Context, req *MsgCheckpoint) (*MsgCheckpointResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Checkpoint not implemented")
}
func (*UnimplementedMsgServer) CheckpointAck(ctx context.Context, req *MsgCheckpointAck) (*MsgCheckpointAckResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CheckpointAck not implemented")
}
func (*UnimplementedMsgServer) CheckpointNoAck(ctx context.Context, req *MsgCheckpointNoAck) (*MsgCheckpointNoAckResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CheckpointNoAck not implemented")
}

func RegisterMsgServer(s grpc1.Server, srv MsgServer) {
	s.RegisterService(&_Msg_serviceDesc, srv)
}

func _Msg_CheckpointAdjust_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgCheckpointAdjust)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).CheckpointAdjust(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/heimdallv2.checkpoint.v1.Msg/CheckpointAdjust",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).CheckpointAdjust(ctx, req.(*MsgCheckpointAdjust))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_Checkpoint_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgCheckpoint)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).Checkpoint(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/heimdallv2.checkpoint.v1.Msg/Checkpoint",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).Checkpoint(ctx, req.(*MsgCheckpoint))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_CheckpointAck_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgCheckpointAck)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).CheckpointAck(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/heimdallv2.checkpoint.v1.Msg/CheckpointAck",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).CheckpointAck(ctx, req.(*MsgCheckpointAck))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_CheckpointNoAck_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgCheckpointNoAck)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).CheckpointNoAck(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/heimdallv2.checkpoint.v1.Msg/CheckpointNoAck",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).CheckpointNoAck(ctx, req.(*MsgCheckpointNoAck))
	}
	return interceptor(ctx, in, info, handler)
}

var _Msg_serviceDesc = grpc.ServiceDesc{
	ServiceName: "heimdallv2.checkpoint.v1.Msg",
	HandlerType: (*MsgServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CheckpointAdjust",
			Handler:    _Msg_CheckpointAdjust_Handler,
		},
		{
			MethodName: "Checkpoint",
			Handler:    _Msg_Checkpoint_Handler,
		},
		{
			MethodName: "CheckpointAck",
			Handler:    _Msg_CheckpointAck_Handler,
		},
		{
			MethodName: "CheckpointNoAck",
			Handler:    _Msg_CheckpointNoAck_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "heimdallv2/checkpoint/v1/tx.proto",
}

func (m *MsgCheckpointAdjust) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgCheckpointAdjust) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgCheckpointAdjust) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.RootHash.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintTx(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x32
	if m.EndBlock != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.EndBlock))
		i--
		dAtA[i] = 0x28
	}
	if m.StartBlock != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.StartBlock))
		i--
		dAtA[i] = 0x20
	}
	if len(m.From) > 0 {
		i -= len(m.From)
		copy(dAtA[i:], m.From)
		i = encodeVarintTx(dAtA, i, uint64(len(m.From)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Proposer) > 0 {
		i -= len(m.Proposer)
		copy(dAtA[i:], m.Proposer)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Proposer)))
		i--
		dAtA[i] = 0x12
	}
	if m.HeaderIndex != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.HeaderIndex))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *MsgCheckpointAdjustResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgCheckpointAdjustResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgCheckpointAdjustResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgCheckpoint) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgCheckpoint) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgCheckpoint) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.BorChainID) > 0 {
		i -= len(m.BorChainID)
		copy(dAtA[i:], m.BorChainID)
		i = encodeVarintTx(dAtA, i, uint64(len(m.BorChainID)))
		i--
		dAtA[i] = 0x32
	}
	{
		size, err := m.AccountRootHash.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintTx(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x2a
	{
		size, err := m.RootHash.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintTx(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x22
	if m.EndBlock != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.EndBlock))
		i--
		dAtA[i] = 0x18
	}
	if m.StartBlock != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.StartBlock))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Proposer) > 0 {
		i -= len(m.Proposer)
		copy(dAtA[i:], m.Proposer)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Proposer)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgCheckpointResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgCheckpointResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgCheckpointResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgCheckpointAck) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgCheckpointAck) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgCheckpointAck) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.LogIndex != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.LogIndex))
		i--
		dAtA[i] = 0x40
	}
	{
		size, err := m.TxHash.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintTx(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x3a
	{
		size, err := m.RootHash.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintTx(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x32
	if m.EndBlock != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.EndBlock))
		i--
		dAtA[i] = 0x28
	}
	if m.StartBlock != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.StartBlock))
		i--
		dAtA[i] = 0x20
	}
	if len(m.Proposer) > 0 {
		i -= len(m.Proposer)
		copy(dAtA[i:], m.Proposer)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Proposer)))
		i--
		dAtA[i] = 0x1a
	}
	if m.Number != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.Number))
		i--
		dAtA[i] = 0x10
	}
	if len(m.From) > 0 {
		i -= len(m.From)
		copy(dAtA[i:], m.From)
		i = encodeVarintTx(dAtA, i, uint64(len(m.From)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgCheckpointAckResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgCheckpointAckResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgCheckpointAckResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgCheckpointNoAck) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgCheckpointNoAck) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgCheckpointNoAck) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.From) > 0 {
		i -= len(m.From)
		copy(dAtA[i:], m.From)
		i = encodeVarintTx(dAtA, i, uint64(len(m.From)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgCheckpointNoAckResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgCheckpointNoAckResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgCheckpointNoAckResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func encodeVarintTx(dAtA []byte, offset int, v uint64) int {
	offset -= sovTx(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *MsgCheckpointAdjust) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.HeaderIndex != 0 {
		n += 1 + sovTx(uint64(m.HeaderIndex))
	}
	l = len(m.Proposer)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.From)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if m.StartBlock != 0 {
		n += 1 + sovTx(uint64(m.StartBlock))
	}
	if m.EndBlock != 0 {
		n += 1 + sovTx(uint64(m.EndBlock))
	}
	l = m.RootHash.Size()
	n += 1 + l + sovTx(uint64(l))
	return n
}

func (m *MsgCheckpointAdjustResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgCheckpoint) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Proposer)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if m.StartBlock != 0 {
		n += 1 + sovTx(uint64(m.StartBlock))
	}
	if m.EndBlock != 0 {
		n += 1 + sovTx(uint64(m.EndBlock))
	}
	l = m.RootHash.Size()
	n += 1 + l + sovTx(uint64(l))
	l = m.AccountRootHash.Size()
	n += 1 + l + sovTx(uint64(l))
	l = len(m.BorChainID)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MsgCheckpointResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgCheckpointAck) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.From)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if m.Number != 0 {
		n += 1 + sovTx(uint64(m.Number))
	}
	l = len(m.Proposer)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if m.StartBlock != 0 {
		n += 1 + sovTx(uint64(m.StartBlock))
	}
	if m.EndBlock != 0 {
		n += 1 + sovTx(uint64(m.EndBlock))
	}
	l = m.RootHash.Size()
	n += 1 + l + sovTx(uint64(l))
	l = m.TxHash.Size()
	n += 1 + l + sovTx(uint64(l))
	if m.LogIndex != 0 {
		n += 1 + sovTx(uint64(m.LogIndex))
	}
	return n
}

func (m *MsgCheckpointAckResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgCheckpointNoAck) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.From)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MsgCheckpointNoAckResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func sovTx(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozTx(x uint64) (n int) {
	return sovTx(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *MsgCheckpointAdjust) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgCheckpointAdjust: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgCheckpointAdjust: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field HeaderIndex", wireType)
			}
			m.HeaderIndex = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.HeaderIndex |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Proposer", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Proposer = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field From", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.From = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field StartBlock", wireType)
			}
			m.StartBlock = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.StartBlock |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EndBlock", wireType)
			}
			m.EndBlock = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.EndBlock |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RootHash", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.RootHash.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgCheckpointAdjustResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgCheckpointAdjustResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgCheckpointAdjustResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgCheckpoint) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgCheckpoint: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgCheckpoint: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Proposer", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Proposer = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field StartBlock", wireType)
			}
			m.StartBlock = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.StartBlock |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EndBlock", wireType)
			}
			m.EndBlock = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.EndBlock |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RootHash", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.RootHash.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AccountRootHash", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.AccountRootHash.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BorChainID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BorChainID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgCheckpointResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgCheckpointResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgCheckpointResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgCheckpointAck) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgCheckpointAck: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgCheckpointAck: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field From", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.From = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Number", wireType)
			}
			m.Number = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Number |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Proposer", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Proposer = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field StartBlock", wireType)
			}
			m.StartBlock = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.StartBlock |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EndBlock", wireType)
			}
			m.EndBlock = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.EndBlock |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RootHash", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.RootHash.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TxHash", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.TxHash.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LogIndex", wireType)
			}
			m.LogIndex = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.LogIndex |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgCheckpointAckResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgCheckpointAckResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgCheckpointAckResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgCheckpointNoAck) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgCheckpointNoAck: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgCheckpointNoAck: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field From", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.From = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgCheckpointNoAckResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgCheckpointNoAckResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgCheckpointNoAckResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipTx(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowTx
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTx
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTx
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthTx
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupTx
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthTx
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthTx        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowTx          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupTx = fmt.Errorf("proto: unexpected end of group")
)
