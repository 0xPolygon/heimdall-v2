// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: heimdallv2/checkpoint/checkpoint.proto

package types

import (
	bytes "bytes"
	fmt "fmt"
	_ "github.com/cosmos/cosmos-proto"
	_ "github.com/cosmos/cosmos-sdk/types/tx/amino"
	_ "github.com/cosmos/gogoproto/gogoproto"
	proto "github.com/cosmos/gogoproto/proto"
	github_com_cosmos_gogoproto_types "github.com/cosmos/gogoproto/types"
	_ "google.golang.org/protobuf/types/known/durationpb"
	io "io"
	math "math"
	math_bits "math/bits"
	time "time"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf
var _ = time.Kitchen

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type Checkpoint struct {
	Id         uint64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Proposer   string `protobuf:"bytes,2,opt,name=proposer,proto3" json:"proposer,omitempty"`
	StartBlock uint64 `protobuf:"varint,3,opt,name=start_block,json=startBlock,proto3" json:"start_block,omitempty"`
	EndBlock   uint64 `protobuf:"varint,4,opt,name=end_block,json=endBlock,proto3" json:"end_block,omitempty"`
	RootHash   []byte `protobuf:"bytes,5,opt,name=root_hash,json=rootHash,proto3" json:"root_hash,omitempty"`
	BorChainId string `protobuf:"bytes,6,opt,name=bor_chain_id,json=borChainId,proto3" json:"bor_chain_id,omitempty"`
	Timestamp  uint64 `protobuf:"varint,7,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
}

func (m *Checkpoint) Reset()         { *m = Checkpoint{} }
func (m *Checkpoint) String() string { return proto.CompactTextString(m) }
func (*Checkpoint) ProtoMessage()    {}
func (*Checkpoint) Descriptor() ([]byte, []int) {
	return fileDescriptor_0ed4fe426d8e8c16, []int{0}
}
func (m *Checkpoint) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Checkpoint) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Checkpoint.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Checkpoint) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Checkpoint.Merge(m, src)
}
func (m *Checkpoint) XXX_Size() int {
	return m.Size()
}
func (m *Checkpoint) XXX_DiscardUnknown() {
	xxx_messageInfo_Checkpoint.DiscardUnknown(m)
}

var xxx_messageInfo_Checkpoint proto.InternalMessageInfo

func (m *Checkpoint) GetId() uint64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *Checkpoint) GetProposer() string {
	if m != nil {
		return m.Proposer
	}
	return ""
}

func (m *Checkpoint) GetStartBlock() uint64 {
	if m != nil {
		return m.StartBlock
	}
	return 0
}

func (m *Checkpoint) GetEndBlock() uint64 {
	if m != nil {
		return m.EndBlock
	}
	return 0
}

func (m *Checkpoint) GetRootHash() []byte {
	if m != nil {
		return m.RootHash
	}
	return nil
}

func (m *Checkpoint) GetBorChainId() string {
	if m != nil {
		return m.BorChainId
	}
	return ""
}

func (m *Checkpoint) GetTimestamp() uint64 {
	if m != nil {
		return m.Timestamp
	}
	return 0
}

type Params struct {
	CheckpointBufferTime    time.Duration `protobuf:"bytes,1,opt,name=checkpoint_buffer_time,json=checkpointBufferTime,proto3,stdduration" json:"checkpoint_buffer_time"`
	AvgCheckpointLength     uint64        `protobuf:"varint,2,opt,name=avg_checkpoint_length,json=avgCheckpointLength,proto3" json:"avg_checkpoint_length,omitempty"`
	MaxCheckpointLength     uint64        `protobuf:"varint,3,opt,name=max_checkpoint_length,json=maxCheckpointLength,proto3" json:"max_checkpoint_length,omitempty"`
	ChildChainBlockInterval uint64        `protobuf:"varint,4,opt,name=child_chain_block_interval,json=childChainBlockInterval,proto3" json:"child_chain_block_interval,omitempty"`
}

func (m *Params) Reset()         { *m = Params{} }
func (m *Params) String() string { return proto.CompactTextString(m) }
func (*Params) ProtoMessage()    {}
func (*Params) Descriptor() ([]byte, []int) {
	return fileDescriptor_0ed4fe426d8e8c16, []int{1}
}
func (m *Params) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Params) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Params.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Params) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Params.Merge(m, src)
}
func (m *Params) XXX_Size() int {
	return m.Size()
}
func (m *Params) XXX_DiscardUnknown() {
	xxx_messageInfo_Params.DiscardUnknown(m)
}

var xxx_messageInfo_Params proto.InternalMessageInfo

func (m *Params) GetCheckpointBufferTime() time.Duration {
	if m != nil {
		return m.CheckpointBufferTime
	}
	return 0
}

func (m *Params) GetAvgCheckpointLength() uint64 {
	if m != nil {
		return m.AvgCheckpointLength
	}
	return 0
}

func (m *Params) GetMaxCheckpointLength() uint64 {
	if m != nil {
		return m.MaxCheckpointLength
	}
	return 0
}

func (m *Params) GetChildChainBlockInterval() uint64 {
	if m != nil {
		return m.ChildChainBlockInterval
	}
	return 0
}

func init() {
	proto.RegisterType((*Checkpoint)(nil), "heimdallv2.checkpoint.Checkpoint")
	proto.RegisterType((*Params)(nil), "heimdallv2.checkpoint.Params")
}

func init() {
	proto.RegisterFile("heimdallv2/checkpoint/checkpoint.proto", fileDescriptor_0ed4fe426d8e8c16)
}

var fileDescriptor_0ed4fe426d8e8c16 = []byte{
	// 520 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x6c, 0x93, 0x31, 0x6f, 0xd3, 0x40,
	0x14, 0xc7, 0x73, 0xa1, 0x2d, 0xc9, 0xb5, 0x0c, 0xb8, 0x09, 0xb8, 0x91, 0x70, 0xa2, 0x20, 0x95,
	0x08, 0xa9, 0x36, 0x4a, 0xa7, 0xb2, 0xe1, 0x32, 0x50, 0x09, 0xa4, 0x0a, 0x98, 0x18, 0xb0, 0xce,
	0xbe, 0x8b, 0x7d, 0xaa, 0xed, 0x67, 0xdd, 0x5d, 0xa2, 0xf4, 0x1b, 0x30, 0x32, 0x32, 0x76, 0x42,
	0x0c, 0x0c, 0x0c, 0x7c, 0x88, 0x8e, 0x15, 0x13, 0x13, 0xa0, 0x64, 0x80, 0x8f, 0x81, 0x7c, 0x76,
	0x62, 0x57, 0xb0, 0x58, 0xbe, 0xf7, 0x7e, 0xff, 0xf7, 0x4e, 0xff, 0xbf, 0x0e, 0xef, 0x47, 0x8c,
	0x27, 0x94, 0xc4, 0xf1, 0x6c, 0xec, 0x04, 0x11, 0x0b, 0xce, 0x32, 0xe0, 0xa9, 0xaa, 0xfd, 0xda,
	0x99, 0x00, 0x05, 0x46, 0xb7, 0xe2, 0xec, 0xaa, 0xd9, 0xeb, 0x84, 0x10, 0x82, 0x26, 0x9c, 0xfc,
	0xaf, 0x80, 0x7b, 0x56, 0x08, 0x10, 0xc6, 0xcc, 0xd1, 0x27, 0x7f, 0x3a, 0x71, 0xe8, 0x54, 0x10,
	0xc5, 0x21, 0x2d, 0xfb, 0x7b, 0x01, 0xc8, 0x04, 0xa4, 0x57, 0x08, 0x8b, 0x43, 0xd9, 0xba, 0x4d,
	0x12, 0x9e, 0x82, 0xa3, 0xbf, 0x45, 0x69, 0xf8, 0xb1, 0x89, 0xf1, 0xf1, 0x7a, 0xa5, 0xd1, 0xc5,
	0x4d, 0x4e, 0x4d, 0x34, 0x40, 0xa3, 0x0d, 0x77, 0xf3, 0xd3, 0xef, 0x2f, 0x0f, 0xd1, 0xcb, 0x26,
	0xa7, 0xc6, 0x11, 0x6e, 0x65, 0x02, 0x32, 0x90, 0x4c, 0x98, 0xcd, 0x01, 0x1a, 0xb5, 0xdd, 0x7b,
	0xdf, 0xbe, 0x1e, 0x74, 0xca, 0xe1, 0x4f, 0x28, 0x15, 0x4c, 0xca, 0x57, 0x4a, 0xf0, 0x34, 0x2c,
	0x44, 0x6b, 0xdc, 0xd8, 0xc7, 0xdb, 0x52, 0x11, 0xa1, 0x3c, 0x3f, 0x86, 0xe0, 0xcc, 0xbc, 0x51,
	0x1f, 0x8d, 0x75, 0xc7, 0xcd, 0x1b, 0xc6, 0x10, 0xb7, 0x59, 0x4a, 0x4b, 0x6a, 0xa3, 0x4e, 0xb5,
	0x58, 0x4a, 0xd7, 0x8c, 0x00, 0x50, 0x5e, 0x44, 0x64, 0x64, 0x6e, 0x0e, 0xd0, 0x68, 0x67, 0xcd,
	0xe4, 0xf5, 0x67, 0x44, 0x46, 0xc6, 0x03, 0xbc, 0xe3, 0x83, 0xf0, 0x82, 0x88, 0xf0, 0xd4, 0xe3,
	0xd4, 0xdc, 0xd2, 0xd7, 0x5d, 0x2d, 0xf4, 0x41, 0x1c, 0xe7, 0x9d, 0x13, 0x6a, 0xdc, 0xc7, 0x6d,
	0xc5, 0x13, 0x26, 0x15, 0x49, 0x32, 0xf3, 0x66, 0x7d, 0x61, 0x55, 0x7f, 0xdc, 0x7a, 0x77, 0xd1,
	0x47, 0x7f, 0x2e, 0xfa, 0x68, 0xf8, 0xb9, 0x89, 0xb7, 0x4e, 0x89, 0x20, 0x89, 0x34, 0xde, 0xe2,
	0x3b, 0x55, 0x4a, 0x9e, 0x3f, 0x9d, 0x4c, 0x98, 0xf0, 0x72, 0x8d, 0x36, 0x6e, 0x7b, 0xbc, 0x67,
	0x17, 0x11, 0xd9, 0xab, 0x88, 0xec, 0xa7, 0x65, 0x44, 0xee, 0xad, 0xcb, 0x1f, 0xfd, 0xc6, 0x87,
	0x9f, 0x7d, 0x54, 0x6c, 0xea, 0x54, 0x73, 0x5c, 0x3d, 0xe6, 0x35, 0x4f, 0x98, 0x71, 0x84, 0xbb,
	0x64, 0x16, 0x7a, 0xb5, 0x1d, 0x31, 0x4b, 0x43, 0x15, 0x69, 0xeb, 0xd7, 0xb7, 0xdc, 0x25, 0xb3,
	0xb0, 0x4a, 0xee, 0xb9, 0x26, 0x72, 0x69, 0x42, 0xe6, 0xff, 0x91, 0x5e, 0xf3, 0x7d, 0x37, 0x21,
	0xf3, 0x7f, 0xa4, 0x2e, 0xee, 0x05, 0x11, 0x8f, 0x69, 0x69, 0x9d, 0x0e, 0xc2, 0xe3, 0xa9, 0x62,
	0x62, 0x46, 0xe2, 0xeb, 0x89, 0xdc, 0xd5, 0xa0, 0x36, 0x52, 0x07, 0x73, 0x52, 0x52, 0x95, 0x5d,
	0xee, 0x8b, 0xcb, 0x85, 0x85, 0xae, 0x16, 0x16, 0xfa, 0xb5, 0xb0, 0xd0, 0xfb, 0xa5, 0xd5, 0xb8,
	0x5a, 0x5a, 0x8d, 0xef, 0x4b, 0xab, 0xf1, 0xe6, 0x30, 0xe4, 0x2a, 0x9a, 0xfa, 0x76, 0x00, 0x89,
	0xf3, 0x68, 0x7e, 0x0a, 0xf1, 0x79, 0x08, 0xa9, 0xb3, 0x7a, 0x01, 0x07, 0xb3, 0xb1, 0x33, 0xaf,
	0x3f, 0x16, 0x75, 0x9e, 0x31, 0xe9, 0x6f, 0x69, 0x2b, 0x0f, 0xff, 0x06, 0x00, 0x00, 0xff, 0xff,
	0x54, 0xe7, 0xc2, 0x7e, 0x52, 0x03, 0x00, 0x00,
}

func (this *Checkpoint) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Checkpoint)
	if !ok {
		that2, ok := that.(Checkpoint)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Id != that1.Id {
		return false
	}
	if this.Proposer != that1.Proposer {
		return false
	}
	if this.StartBlock != that1.StartBlock {
		return false
	}
	if this.EndBlock != that1.EndBlock {
		return false
	}
	if !bytes.Equal(this.RootHash, that1.RootHash) {
		return false
	}
	if this.BorChainId != that1.BorChainId {
		return false
	}
	if this.Timestamp != that1.Timestamp {
		return false
	}
	return true
}
func (this *Params) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Params)
	if !ok {
		that2, ok := that.(Params)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.CheckpointBufferTime != that1.CheckpointBufferTime {
		return false
	}
	if this.AvgCheckpointLength != that1.AvgCheckpointLength {
		return false
	}
	if this.MaxCheckpointLength != that1.MaxCheckpointLength {
		return false
	}
	if this.ChildChainBlockInterval != that1.ChildChainBlockInterval {
		return false
	}
	return true
}
func (m *Checkpoint) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Checkpoint) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Checkpoint) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Timestamp != 0 {
		i = encodeVarintCheckpoint(dAtA, i, uint64(m.Timestamp))
		i--
		dAtA[i] = 0x38
	}
	if len(m.BorChainId) > 0 {
		i -= len(m.BorChainId)
		copy(dAtA[i:], m.BorChainId)
		i = encodeVarintCheckpoint(dAtA, i, uint64(len(m.BorChainId)))
		i--
		dAtA[i] = 0x32
	}
	if len(m.RootHash) > 0 {
		i -= len(m.RootHash)
		copy(dAtA[i:], m.RootHash)
		i = encodeVarintCheckpoint(dAtA, i, uint64(len(m.RootHash)))
		i--
		dAtA[i] = 0x2a
	}
	if m.EndBlock != 0 {
		i = encodeVarintCheckpoint(dAtA, i, uint64(m.EndBlock))
		i--
		dAtA[i] = 0x20
	}
	if m.StartBlock != 0 {
		i = encodeVarintCheckpoint(dAtA, i, uint64(m.StartBlock))
		i--
		dAtA[i] = 0x18
	}
	if len(m.Proposer) > 0 {
		i -= len(m.Proposer)
		copy(dAtA[i:], m.Proposer)
		i = encodeVarintCheckpoint(dAtA, i, uint64(len(m.Proposer)))
		i--
		dAtA[i] = 0x12
	}
	if m.Id != 0 {
		i = encodeVarintCheckpoint(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *Params) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Params) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Params) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.ChildChainBlockInterval != 0 {
		i = encodeVarintCheckpoint(dAtA, i, uint64(m.ChildChainBlockInterval))
		i--
		dAtA[i] = 0x20
	}
	if m.MaxCheckpointLength != 0 {
		i = encodeVarintCheckpoint(dAtA, i, uint64(m.MaxCheckpointLength))
		i--
		dAtA[i] = 0x18
	}
	if m.AvgCheckpointLength != 0 {
		i = encodeVarintCheckpoint(dAtA, i, uint64(m.AvgCheckpointLength))
		i--
		dAtA[i] = 0x10
	}
	n1, err1 := github_com_cosmos_gogoproto_types.StdDurationMarshalTo(m.CheckpointBufferTime, dAtA[i-github_com_cosmos_gogoproto_types.SizeOfStdDuration(m.CheckpointBufferTime):])
	if err1 != nil {
		return 0, err1
	}
	i -= n1
	i = encodeVarintCheckpoint(dAtA, i, uint64(n1))
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func encodeVarintCheckpoint(dAtA []byte, offset int, v uint64) int {
	offset -= sovCheckpoint(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *Checkpoint) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovCheckpoint(uint64(m.Id))
	}
	l = len(m.Proposer)
	if l > 0 {
		n += 1 + l + sovCheckpoint(uint64(l))
	}
	if m.StartBlock != 0 {
		n += 1 + sovCheckpoint(uint64(m.StartBlock))
	}
	if m.EndBlock != 0 {
		n += 1 + sovCheckpoint(uint64(m.EndBlock))
	}
	l = len(m.RootHash)
	if l > 0 {
		n += 1 + l + sovCheckpoint(uint64(l))
	}
	l = len(m.BorChainId)
	if l > 0 {
		n += 1 + l + sovCheckpoint(uint64(l))
	}
	if m.Timestamp != 0 {
		n += 1 + sovCheckpoint(uint64(m.Timestamp))
	}
	return n
}

func (m *Params) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = github_com_cosmos_gogoproto_types.SizeOfStdDuration(m.CheckpointBufferTime)
	n += 1 + l + sovCheckpoint(uint64(l))
	if m.AvgCheckpointLength != 0 {
		n += 1 + sovCheckpoint(uint64(m.AvgCheckpointLength))
	}
	if m.MaxCheckpointLength != 0 {
		n += 1 + sovCheckpoint(uint64(m.MaxCheckpointLength))
	}
	if m.ChildChainBlockInterval != 0 {
		n += 1 + sovCheckpoint(uint64(m.ChildChainBlockInterval))
	}
	return n
}

func sovCheckpoint(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozCheckpoint(x uint64) (n int) {
	return sovCheckpoint(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Checkpoint) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCheckpoint
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Checkpoint: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Checkpoint: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCheckpoint
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Proposer", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCheckpoint
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCheckpoint
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCheckpoint
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Proposer = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field StartBlock", wireType)
			}
			m.StartBlock = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCheckpoint
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.StartBlock |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EndBlock", wireType)
			}
			m.EndBlock = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCheckpoint
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.EndBlock |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RootHash", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCheckpoint
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthCheckpoint
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthCheckpoint
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RootHash = append(m.RootHash[:0], dAtA[iNdEx:postIndex]...)
			if m.RootHash == nil {
				m.RootHash = []byte{}
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BorChainId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCheckpoint
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCheckpoint
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCheckpoint
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BorChainId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Timestamp", wireType)
			}
			m.Timestamp = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCheckpoint
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Timestamp |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipCheckpoint(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthCheckpoint
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Params) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCheckpoint
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Params: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Params: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CheckpointBufferTime", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCheckpoint
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCheckpoint
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCheckpoint
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := github_com_cosmos_gogoproto_types.StdDurationUnmarshal(&m.CheckpointBufferTime, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AvgCheckpointLength", wireType)
			}
			m.AvgCheckpointLength = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCheckpoint
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AvgCheckpointLength |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MaxCheckpointLength", wireType)
			}
			m.MaxCheckpointLength = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCheckpoint
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MaxCheckpointLength |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChildChainBlockInterval", wireType)
			}
			m.ChildChainBlockInterval = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCheckpoint
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ChildChainBlockInterval |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipCheckpoint(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthCheckpoint
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipCheckpoint(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowCheckpoint
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowCheckpoint
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowCheckpoint
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthCheckpoint
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupCheckpoint
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthCheckpoint
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthCheckpoint        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowCheckpoint          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupCheckpoint = fmt.Errorf("proto: unexpected end of group")
)
