// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: heimdallv2/checkpoint/query.proto

package types

import (
	context "context"
	fmt "fmt"
	types "github.com/0xPolygon/heimdall-v2/x/stake/types"
	query "github.com/cosmos/cosmos-sdk/types/query"
	_ "github.com/cosmos/cosmos-sdk/types/tx/amino"
	_ "github.com/cosmos/gogoproto/gogoproto"
	grpc1 "github.com/cosmos/gogoproto/grpc"
	proto "github.com/cosmos/gogoproto/proto"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// QueryCheckpointSignaturesRequest is request type for
// QueryCheckpointSignatures RPC method
type QueryCheckpointSignaturesRequest struct {
	TxHash string `protobuf:"bytes,1,opt,name=tx_hash,json=txHash,proto3" json:"tx_hash,omitempty"`
}

func (m *QueryCheckpointSignaturesRequest) Reset()         { *m = QueryCheckpointSignaturesRequest{} }
func (m *QueryCheckpointSignaturesRequest) String() string { return proto.CompactTextString(m) }
func (*QueryCheckpointSignaturesRequest) ProtoMessage()    {}
func (*QueryCheckpointSignaturesRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_01834be0e35c5db2, []int{0}
}
func (m *QueryCheckpointSignaturesRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryCheckpointSignaturesRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryCheckpointSignaturesRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryCheckpointSignaturesRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryCheckpointSignaturesRequest.Merge(m, src)
}
func (m *QueryCheckpointSignaturesRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryCheckpointSignaturesRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryCheckpointSignaturesRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryCheckpointSignaturesRequest proto.InternalMessageInfo

func (m *QueryCheckpointSignaturesRequest) GetTxHash() string {
	if m != nil {
		return m.TxHash
	}
	return ""
}

// QueryCheckpointSignaturesResponse is response type for
// QueryCheckpointSignatures RPC method
type QueryCheckpointSignaturesResponse struct {
	Signatures []CheckpointSignature `protobuf:"bytes,1,rep,name=signatures,proto3" json:"signatures"`
}

func (m *QueryCheckpointSignaturesResponse) Reset()         { *m = QueryCheckpointSignaturesResponse{} }
func (m *QueryCheckpointSignaturesResponse) String() string { return proto.CompactTextString(m) }
func (*QueryCheckpointSignaturesResponse) ProtoMessage()    {}
func (*QueryCheckpointSignaturesResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_01834be0e35c5db2, []int{1}
}
func (m *QueryCheckpointSignaturesResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryCheckpointSignaturesResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryCheckpointSignaturesResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryCheckpointSignaturesResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryCheckpointSignaturesResponse.Merge(m, src)
}
func (m *QueryCheckpointSignaturesResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryCheckpointSignaturesResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryCheckpointSignaturesResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryCheckpointSignaturesResponse proto.InternalMessageInfo

func (m *QueryCheckpointSignaturesResponse) GetSignatures() []CheckpointSignature {
	if m != nil {
		return m.Signatures
	}
	return nil
}

type QueryParamsRequest struct {
}

func (m *QueryParamsRequest) Reset()         { *m = QueryParamsRequest{} }
func (m *QueryParamsRequest) String() string { return proto.CompactTextString(m) }
func (*QueryParamsRequest) ProtoMessage()    {}
func (*QueryParamsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_01834be0e35c5db2, []int{2}
}
func (m *QueryParamsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryParamsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryParamsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryParamsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryParamsRequest.Merge(m, src)
}
func (m *QueryParamsRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryParamsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryParamsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryParamsRequest proto.InternalMessageInfo

type QueryParamsResponse struct {
	Params Params `protobuf:"bytes,1,opt,name=params,proto3" json:"params"`
}

func (m *QueryParamsResponse) Reset()         { *m = QueryParamsResponse{} }
func (m *QueryParamsResponse) String() string { return proto.CompactTextString(m) }
func (*QueryParamsResponse) ProtoMessage()    {}
func (*QueryParamsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_01834be0e35c5db2, []int{3}
}
func (m *QueryParamsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryParamsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryParamsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryParamsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryParamsResponse.Merge(m, src)
}
func (m *QueryParamsResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryParamsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryParamsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryParamsResponse proto.InternalMessageInfo

func (m *QueryParamsResponse) GetParams() Params {
	if m != nil {
		return m.Params
	}
	return Params{}
}

type QueryAckCountRequest struct {
}

func (m *QueryAckCountRequest) Reset()         { *m = QueryAckCountRequest{} }
func (m *QueryAckCountRequest) String() string { return proto.CompactTextString(m) }
func (*QueryAckCountRequest) ProtoMessage()    {}
func (*QueryAckCountRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_01834be0e35c5db2, []int{4}
}
func (m *QueryAckCountRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAckCountRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAckCountRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAckCountRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAckCountRequest.Merge(m, src)
}
func (m *QueryAckCountRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryAckCountRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAckCountRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAckCountRequest proto.InternalMessageInfo

type QueryAckCountResponse struct {
	AckCount uint64 `protobuf:"varint,1,opt,name=ack_count,json=ackCount,proto3" json:"ack_count,omitempty"`
}

func (m *QueryAckCountResponse) Reset()         { *m = QueryAckCountResponse{} }
func (m *QueryAckCountResponse) String() string { return proto.CompactTextString(m) }
func (*QueryAckCountResponse) ProtoMessage()    {}
func (*QueryAckCountResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_01834be0e35c5db2, []int{5}
}
func (m *QueryAckCountResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAckCountResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAckCountResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAckCountResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAckCountResponse.Merge(m, src)
}
func (m *QueryAckCountResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryAckCountResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAckCountResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAckCountResponse proto.InternalMessageInfo

func (m *QueryAckCountResponse) GetAckCount() uint64 {
	if m != nil {
		return m.AckCount
	}
	return 0
}

type QueryLastNoAckRequest struct {
}

func (m *QueryLastNoAckRequest) Reset()         { *m = QueryLastNoAckRequest{} }
func (m *QueryLastNoAckRequest) String() string { return proto.CompactTextString(m) }
func (*QueryLastNoAckRequest) ProtoMessage()    {}
func (*QueryLastNoAckRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_01834be0e35c5db2, []int{6}
}
func (m *QueryLastNoAckRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryLastNoAckRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryLastNoAckRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryLastNoAckRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryLastNoAckRequest.Merge(m, src)
}
func (m *QueryLastNoAckRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryLastNoAckRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryLastNoAckRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryLastNoAckRequest proto.InternalMessageInfo

type QueryLastNoAckResponse struct {
	LastNoAckId uint64 `protobuf:"varint,1,opt,name=last_no_ack_id,json=lastNoAckId,proto3" json:"last_no_ack_id,omitempty"`
}

func (m *QueryLastNoAckResponse) Reset()         { *m = QueryLastNoAckResponse{} }
func (m *QueryLastNoAckResponse) String() string { return proto.CompactTextString(m) }
func (*QueryLastNoAckResponse) ProtoMessage()    {}
func (*QueryLastNoAckResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_01834be0e35c5db2, []int{7}
}
func (m *QueryLastNoAckResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryLastNoAckResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryLastNoAckResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryLastNoAckResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryLastNoAckResponse.Merge(m, src)
}
func (m *QueryLastNoAckResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryLastNoAckResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryLastNoAckResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryLastNoAckResponse proto.InternalMessageInfo

func (m *QueryLastNoAckResponse) GetLastNoAckId() uint64 {
	if m != nil {
		return m.LastNoAckId
	}
	return 0
}

type QueryCheckpointBufferRequest struct {
}

func (m *QueryCheckpointBufferRequest) Reset()         { *m = QueryCheckpointBufferRequest{} }
func (m *QueryCheckpointBufferRequest) String() string { return proto.CompactTextString(m) }
func (*QueryCheckpointBufferRequest) ProtoMessage()    {}
func (*QueryCheckpointBufferRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_01834be0e35c5db2, []int{8}
}
func (m *QueryCheckpointBufferRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryCheckpointBufferRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryCheckpointBufferRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryCheckpointBufferRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryCheckpointBufferRequest.Merge(m, src)
}
func (m *QueryCheckpointBufferRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryCheckpointBufferRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryCheckpointBufferRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryCheckpointBufferRequest proto.InternalMessageInfo

type QueryCheckpointBufferResponse struct {
	Checkpoint Checkpoint `protobuf:"bytes,1,opt,name=checkpoint,proto3" json:"checkpoint"`
}

func (m *QueryCheckpointBufferResponse) Reset()         { *m = QueryCheckpointBufferResponse{} }
func (m *QueryCheckpointBufferResponse) String() string { return proto.CompactTextString(m) }
func (*QueryCheckpointBufferResponse) ProtoMessage()    {}
func (*QueryCheckpointBufferResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_01834be0e35c5db2, []int{9}
}
func (m *QueryCheckpointBufferResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryCheckpointBufferResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryCheckpointBufferResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryCheckpointBufferResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryCheckpointBufferResponse.Merge(m, src)
}
func (m *QueryCheckpointBufferResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryCheckpointBufferResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryCheckpointBufferResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryCheckpointBufferResponse proto.InternalMessageInfo

func (m *QueryCheckpointBufferResponse) GetCheckpoint() Checkpoint {
	if m != nil {
		return m.Checkpoint
	}
	return Checkpoint{}
}

type QueryCheckpointRequest struct {
	Number uint64 `protobuf:"varint,1,opt,name=number,proto3" json:"number,omitempty"`
}

func (m *QueryCheckpointRequest) Reset()         { *m = QueryCheckpointRequest{} }
func (m *QueryCheckpointRequest) String() string { return proto.CompactTextString(m) }
func (*QueryCheckpointRequest) ProtoMessage()    {}
func (*QueryCheckpointRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_01834be0e35c5db2, []int{10}
}
func (m *QueryCheckpointRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryCheckpointRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryCheckpointRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryCheckpointRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryCheckpointRequest.Merge(m, src)
}
func (m *QueryCheckpointRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryCheckpointRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryCheckpointRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryCheckpointRequest proto.InternalMessageInfo

func (m *QueryCheckpointRequest) GetNumber() uint64 {
	if m != nil {
		return m.Number
	}
	return 0
}

type QueryCheckpointResponse struct {
	Checkpoint Checkpoint `protobuf:"bytes,1,opt,name=checkpoint,proto3" json:"checkpoint"`
}

func (m *QueryCheckpointResponse) Reset()         { *m = QueryCheckpointResponse{} }
func (m *QueryCheckpointResponse) String() string { return proto.CompactTextString(m) }
func (*QueryCheckpointResponse) ProtoMessage()    {}
func (*QueryCheckpointResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_01834be0e35c5db2, []int{11}
}
func (m *QueryCheckpointResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryCheckpointResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryCheckpointResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryCheckpointResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryCheckpointResponse.Merge(m, src)
}
func (m *QueryCheckpointResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryCheckpointResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryCheckpointResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryCheckpointResponse proto.InternalMessageInfo

func (m *QueryCheckpointResponse) GetCheckpoint() Checkpoint {
	if m != nil {
		return m.Checkpoint
	}
	return Checkpoint{}
}

type QueryCheckpointLatestRequest struct {
}

func (m *QueryCheckpointLatestRequest) Reset()         { *m = QueryCheckpointLatestRequest{} }
func (m *QueryCheckpointLatestRequest) String() string { return proto.CompactTextString(m) }
func (*QueryCheckpointLatestRequest) ProtoMessage()    {}
func (*QueryCheckpointLatestRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_01834be0e35c5db2, []int{12}
}
func (m *QueryCheckpointLatestRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryCheckpointLatestRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryCheckpointLatestRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryCheckpointLatestRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryCheckpointLatestRequest.Merge(m, src)
}
func (m *QueryCheckpointLatestRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryCheckpointLatestRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryCheckpointLatestRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryCheckpointLatestRequest proto.InternalMessageInfo

type QueryCheckpointLatestResponse struct {
	Checkpoint Checkpoint `protobuf:"bytes,1,opt,name=checkpoint,proto3" json:"checkpoint"`
}

func (m *QueryCheckpointLatestResponse) Reset()         { *m = QueryCheckpointLatestResponse{} }
func (m *QueryCheckpointLatestResponse) String() string { return proto.CompactTextString(m) }
func (*QueryCheckpointLatestResponse) ProtoMessage()    {}
func (*QueryCheckpointLatestResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_01834be0e35c5db2, []int{13}
}
func (m *QueryCheckpointLatestResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryCheckpointLatestResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryCheckpointLatestResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryCheckpointLatestResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryCheckpointLatestResponse.Merge(m, src)
}
func (m *QueryCheckpointLatestResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryCheckpointLatestResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryCheckpointLatestResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryCheckpointLatestResponse proto.InternalMessageInfo

func (m *QueryCheckpointLatestResponse) GetCheckpoint() Checkpoint {
	if m != nil {
		return m.Checkpoint
	}
	return Checkpoint{}
}

type QueryNextCheckpointRequest struct {
}

func (m *QueryNextCheckpointRequest) Reset()         { *m = QueryNextCheckpointRequest{} }
func (m *QueryNextCheckpointRequest) String() string { return proto.CompactTextString(m) }
func (*QueryNextCheckpointRequest) ProtoMessage()    {}
func (*QueryNextCheckpointRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_01834be0e35c5db2, []int{14}
}
func (m *QueryNextCheckpointRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryNextCheckpointRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryNextCheckpointRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryNextCheckpointRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryNextCheckpointRequest.Merge(m, src)
}
func (m *QueryNextCheckpointRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryNextCheckpointRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryNextCheckpointRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryNextCheckpointRequest proto.InternalMessageInfo

type QueryNextCheckpointResponse struct {
	Checkpoint MsgCheckpoint `protobuf:"bytes,1,opt,name=checkpoint,proto3" json:"checkpoint"`
}

func (m *QueryNextCheckpointResponse) Reset()         { *m = QueryNextCheckpointResponse{} }
func (m *QueryNextCheckpointResponse) String() string { return proto.CompactTextString(m) }
func (*QueryNextCheckpointResponse) ProtoMessage()    {}
func (*QueryNextCheckpointResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_01834be0e35c5db2, []int{15}
}
func (m *QueryNextCheckpointResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryNextCheckpointResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryNextCheckpointResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryNextCheckpointResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryNextCheckpointResponse.Merge(m, src)
}
func (m *QueryNextCheckpointResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryNextCheckpointResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryNextCheckpointResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryNextCheckpointResponse proto.InternalMessageInfo

func (m *QueryNextCheckpointResponse) GetCheckpoint() MsgCheckpoint {
	if m != nil {
		return m.Checkpoint
	}
	return MsgCheckpoint{}
}

type QueryCheckpointListRequest struct {
	Pagination query.PageRequest `protobuf:"bytes,1,opt,name=pagination,proto3" json:"pagination"`
}

func (m *QueryCheckpointListRequest) Reset()         { *m = QueryCheckpointListRequest{} }
func (m *QueryCheckpointListRequest) String() string { return proto.CompactTextString(m) }
func (*QueryCheckpointListRequest) ProtoMessage()    {}
func (*QueryCheckpointListRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_01834be0e35c5db2, []int{16}
}
func (m *QueryCheckpointListRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryCheckpointListRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryCheckpointListRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryCheckpointListRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryCheckpointListRequest.Merge(m, src)
}
func (m *QueryCheckpointListRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryCheckpointListRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryCheckpointListRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryCheckpointListRequest proto.InternalMessageInfo

func (m *QueryCheckpointListRequest) GetPagination() query.PageRequest {
	if m != nil {
		return m.Pagination
	}
	return query.PageRequest{}
}

type QueryCheckpointListResponse struct {
	CheckpointList []Checkpoint       `protobuf:"bytes,1,rep,name=checkpoint_list,json=checkpointList,proto3" json:"checkpoint_list"`
	Pagination     query.PageResponse `protobuf:"bytes,2,opt,name=pagination,proto3" json:"pagination"`
}

func (m *QueryCheckpointListResponse) Reset()         { *m = QueryCheckpointListResponse{} }
func (m *QueryCheckpointListResponse) String() string { return proto.CompactTextString(m) }
func (*QueryCheckpointListResponse) ProtoMessage()    {}
func (*QueryCheckpointListResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_01834be0e35c5db2, []int{17}
}
func (m *QueryCheckpointListResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryCheckpointListResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryCheckpointListResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryCheckpointListResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryCheckpointListResponse.Merge(m, src)
}
func (m *QueryCheckpointListResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryCheckpointListResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryCheckpointListResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryCheckpointListResponse proto.InternalMessageInfo

func (m *QueryCheckpointListResponse) GetCheckpointList() []Checkpoint {
	if m != nil {
		return m.CheckpointList
	}
	return nil
}

func (m *QueryCheckpointListResponse) GetPagination() query.PageResponse {
	if m != nil {
		return m.Pagination
	}
	return query.PageResponse{}
}

type QueryCheckpointOverviewRequest struct {
}

func (m *QueryCheckpointOverviewRequest) Reset()         { *m = QueryCheckpointOverviewRequest{} }
func (m *QueryCheckpointOverviewRequest) String() string { return proto.CompactTextString(m) }
func (*QueryCheckpointOverviewRequest) ProtoMessage()    {}
func (*QueryCheckpointOverviewRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_01834be0e35c5db2, []int{18}
}
func (m *QueryCheckpointOverviewRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryCheckpointOverviewRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryCheckpointOverviewRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryCheckpointOverviewRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryCheckpointOverviewRequest.Merge(m, src)
}
func (m *QueryCheckpointOverviewRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryCheckpointOverviewRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryCheckpointOverviewRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryCheckpointOverviewRequest proto.InternalMessageInfo

type QueryCheckpointOverviewResponse struct {
	AckCount         uint64             `protobuf:"varint,1,opt,name=ack_count,json=ackCount,proto3" json:"ack_count,omitempty"`
	LastNoAckId      uint64             `protobuf:"varint,2,opt,name=last_no_ack_id,json=lastNoAckId,proto3" json:"last_no_ack_id,omitempty"`
	BufferCheckpoint Checkpoint         `protobuf:"bytes,3,opt,name=buffer_checkpoint,json=bufferCheckpoint,proto3" json:"buffer_checkpoint"`
	ValidatorCount   uint64             `protobuf:"varint,4,opt,name=validator_count,json=validatorCount,proto3" json:"validator_count,omitempty"`
	ValidatorSet     types.ValidatorSet `protobuf:"bytes,5,opt,name=validator_set,json=validatorSet,proto3" json:"validator_set"`
}

func (m *QueryCheckpointOverviewResponse) Reset()         { *m = QueryCheckpointOverviewResponse{} }
func (m *QueryCheckpointOverviewResponse) String() string { return proto.CompactTextString(m) }
func (*QueryCheckpointOverviewResponse) ProtoMessage()    {}
func (*QueryCheckpointOverviewResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_01834be0e35c5db2, []int{19}
}
func (m *QueryCheckpointOverviewResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryCheckpointOverviewResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryCheckpointOverviewResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryCheckpointOverviewResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryCheckpointOverviewResponse.Merge(m, src)
}
func (m *QueryCheckpointOverviewResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryCheckpointOverviewResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryCheckpointOverviewResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryCheckpointOverviewResponse proto.InternalMessageInfo

func (m *QueryCheckpointOverviewResponse) GetAckCount() uint64 {
	if m != nil {
		return m.AckCount
	}
	return 0
}

func (m *QueryCheckpointOverviewResponse) GetLastNoAckId() uint64 {
	if m != nil {
		return m.LastNoAckId
	}
	return 0
}

func (m *QueryCheckpointOverviewResponse) GetBufferCheckpoint() Checkpoint {
	if m != nil {
		return m.BufferCheckpoint
	}
	return Checkpoint{}
}

func (m *QueryCheckpointOverviewResponse) GetValidatorCount() uint64 {
	if m != nil {
		return m.ValidatorCount
	}
	return 0
}

func (m *QueryCheckpointOverviewResponse) GetValidatorSet() types.ValidatorSet {
	if m != nil {
		return m.ValidatorSet
	}
	return types.ValidatorSet{}
}

func init() {
	proto.RegisterType((*QueryCheckpointSignaturesRequest)(nil), "heimdallv2.checkpoint.QueryCheckpointSignaturesRequest")
	proto.RegisterType((*QueryCheckpointSignaturesResponse)(nil), "heimdallv2.checkpoint.QueryCheckpointSignaturesResponse")
	proto.RegisterType((*QueryParamsRequest)(nil), "heimdallv2.checkpoint.QueryParamsRequest")
	proto.RegisterType((*QueryParamsResponse)(nil), "heimdallv2.checkpoint.QueryParamsResponse")
	proto.RegisterType((*QueryAckCountRequest)(nil), "heimdallv2.checkpoint.QueryAckCountRequest")
	proto.RegisterType((*QueryAckCountResponse)(nil), "heimdallv2.checkpoint.QueryAckCountResponse")
	proto.RegisterType((*QueryLastNoAckRequest)(nil), "heimdallv2.checkpoint.QueryLastNoAckRequest")
	proto.RegisterType((*QueryLastNoAckResponse)(nil), "heimdallv2.checkpoint.QueryLastNoAckResponse")
	proto.RegisterType((*QueryCheckpointBufferRequest)(nil), "heimdallv2.checkpoint.QueryCheckpointBufferRequest")
	proto.RegisterType((*QueryCheckpointBufferResponse)(nil), "heimdallv2.checkpoint.QueryCheckpointBufferResponse")
	proto.RegisterType((*QueryCheckpointRequest)(nil), "heimdallv2.checkpoint.QueryCheckpointRequest")
	proto.RegisterType((*QueryCheckpointResponse)(nil), "heimdallv2.checkpoint.QueryCheckpointResponse")
	proto.RegisterType((*QueryCheckpointLatestRequest)(nil), "heimdallv2.checkpoint.QueryCheckpointLatestRequest")
	proto.RegisterType((*QueryCheckpointLatestResponse)(nil), "heimdallv2.checkpoint.QueryCheckpointLatestResponse")
	proto.RegisterType((*QueryNextCheckpointRequest)(nil), "heimdallv2.checkpoint.QueryNextCheckpointRequest")
	proto.RegisterType((*QueryNextCheckpointResponse)(nil), "heimdallv2.checkpoint.QueryNextCheckpointResponse")
	proto.RegisterType((*QueryCheckpointListRequest)(nil), "heimdallv2.checkpoint.QueryCheckpointListRequest")
	proto.RegisterType((*QueryCheckpointListResponse)(nil), "heimdallv2.checkpoint.QueryCheckpointListResponse")
	proto.RegisterType((*QueryCheckpointOverviewRequest)(nil), "heimdallv2.checkpoint.QueryCheckpointOverviewRequest")
	proto.RegisterType((*QueryCheckpointOverviewResponse)(nil), "heimdallv2.checkpoint.QueryCheckpointOverviewResponse")
}

func init() { proto.RegisterFile("heimdallv2/checkpoint/query.proto", fileDescriptor_01834be0e35c5db2) }

var fileDescriptor_01834be0e35c5db2 = []byte{
	// 1089 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xb4, 0x97, 0x41, 0x6f, 0x1b, 0x45,
	0x14, 0xc7, 0xb3, 0x69, 0x13, 0xc8, 0x24, 0x4d, 0xc9, 0x24, 0x6e, 0xc2, 0x26, 0xd9, 0xd8, 0x0b,
	0x94, 0x62, 0xf0, 0x2e, 0x71, 0x80, 0x22, 0x71, 0xa1, 0x2e, 0x52, 0x40, 0x4a, 0xd3, 0x34, 0x15,
	0x20, 0xb8, 0x58, 0xe3, 0xcd, 0x74, 0xbd, 0xb2, 0xbd, 0xe3, 0xee, 0x8c, 0x8d, 0x43, 0xd5, 0x0b,
	0x27, 0xb8, 0x20, 0x04, 0x37, 0x24, 0x2e, 0x9c, 0x10, 0x27, 0x3e, 0x00, 0x17, 0x6e, 0x39, 0x70,
	0xa8, 0xc4, 0x85, 0x13, 0x42, 0x09, 0x12, 0x5f, 0x03, 0x79, 0x67, 0xd6, 0xb3, 0x63, 0xef, 0xda,
	0x6b, 0xa4, 0x5e, 0x2c, 0x6b, 0xe7, 0xbd, 0xf7, 0xff, 0xbd, 0x37, 0xb3, 0xef, 0xcd, 0x82, 0x42,
	0x1d, 0x7b, 0xad, 0x13, 0xd4, 0x6c, 0x76, 0xcb, 0xb6, 0x53, 0xc7, 0x4e, 0xa3, 0x4d, 0x3c, 0x9f,
	0xd9, 0x0f, 0x3b, 0x38, 0x38, 0xb5, 0xda, 0x01, 0x61, 0x04, 0xe6, 0xa4, 0x89, 0x25, 0x4d, 0xf4,
	0x15, 0xd4, 0xf2, 0x7c, 0x62, 0x87, 0xbf, 0xdc, 0x52, 0x2f, 0x3a, 0x84, 0xb6, 0x08, 0xb5, 0x6b,
	0x88, 0x62, 0x1e, 0xc2, 0xee, 0xee, 0xd6, 0x30, 0x43, 0xbb, 0x76, 0x1b, 0xb9, 0x9e, 0x8f, 0x98,
	0x47, 0x7c, 0x61, 0xbb, 0x29, 0x6c, 0x23, 0xb3, 0xb8, 0xa4, 0xbe, 0xe6, 0x12, 0x97, 0x84, 0x7f,
	0xed, 0xfe, 0x3f, 0xf1, 0x74, 0xcb, 0x25, 0xc4, 0x6d, 0x62, 0x1b, 0xb5, 0x3d, 0x1b, 0xf9, 0x3e,
	0x61, 0x61, 0x3c, 0x2a, 0x56, 0xaf, 0x27, 0x67, 0x22, 0xff, 0x0a, 0xbb, 0xdd, 0x49, 0x76, 0x55,
	0xea, 0xb9, 0x3e, 0x62, 0x9d, 0x00, 0x47, 0xa1, 0x8d, 0x64, 0x17, 0xd6, 0x13, 0xeb, 0xf9, 0xd8,
	0x3a, 0x65, 0xa8, 0x81, 0xed, 0x2e, 0x6a, 0x7a, 0x27, 0x88, 0x91, 0x80, 0x5b, 0x98, 0x15, 0x90,
	0xbf, 0xd7, 0xcf, 0xef, 0xf6, 0xc0, 0xfb, 0xfe, 0x40, 0xe4, 0x18, 0x3f, 0xec, 0x60, 0xca, 0xa0,
	0x01, 0x9e, 0x61, 0xbd, 0x6a, 0x1d, 0xd1, 0xfa, 0x86, 0x96, 0xd7, 0x6e, 0x2c, 0x54, 0xe6, 0x7e,
	0xfa, 0xf7, 0x97, 0xa2, 0x76, 0x3c, 0xcf, 0x7a, 0xef, 0x23, 0x5a, 0x37, 0x3f, 0x07, 0x85, 0x31,
	0x31, 0x68, 0x9b, 0xf8, 0x14, 0xc3, 0x0f, 0x01, 0x90, 0xf8, 0x1b, 0x5a, 0xfe, 0xd2, 0x8d, 0xc5,
	0x72, 0xd1, 0x4a, 0xdc, 0x41, 0x2b, 0x21, 0x50, 0x65, 0xe1, 0xec, 0xaf, 0x9d, 0x19, 0xae, 0x1b,
	0x0b, 0x64, 0xae, 0x01, 0x18, 0x6a, 0x1f, 0xa1, 0x00, 0xb5, 0x22, 0x62, 0xf3, 0x63, 0xb0, 0xaa,
	0x3c, 0x15, 0x0c, 0xef, 0x82, 0xf9, 0x76, 0xf8, 0x24, 0xcc, 0x63, 0xb1, 0xbc, 0x9d, 0xa2, 0xcf,
	0xdd, 0xe2, 0x92, 0xc2, 0xcf, 0xbc, 0x06, 0xd6, 0xc2, 0xc0, 0xb7, 0x9c, 0xc6, 0x6d, 0xd2, 0xf1,
	0x59, 0x24, 0xf8, 0x0e, 0xc8, 0x0d, 0x3d, 0x17, 0x92, 0x26, 0x58, 0x40, 0x4e, 0xa3, 0xea, 0xf4,
	0x1f, 0x86, 0xaa, 0x97, 0xa3, 0xea, 0x3d, 0x8b, 0x84, 0xad, 0xb9, 0x2e, 0x9c, 0x0f, 0x10, 0x65,
	0x87, 0xe4, 0x96, 0xd3, 0x88, 0xa2, 0xbe, 0x07, 0xae, 0x0d, 0x2f, 0x88, 0xb0, 0x45, 0xb0, 0xdc,
	0x44, 0x94, 0x55, 0x7d, 0x52, 0xed, 0x87, 0xf7, 0x4e, 0xd4, 0xd8, 0x8b, 0xcd, 0xc8, 0xe3, 0x83,
	0x13, 0xd3, 0x00, 0x5b, 0x43, 0xdb, 0x53, 0xe9, 0x3c, 0x78, 0x80, 0x83, 0x48, 0xa5, 0x05, 0xb6,
	0x53, 0xd6, 0x85, 0xd8, 0x01, 0x00, 0xb2, 0x38, 0xa2, 0x74, 0x85, 0x89, 0x5b, 0xa7, 0xec, 0x98,
	0xb4, 0x30, 0x6f, 0x8a, 0xa4, 0xa4, 0x65, 0x74, 0xce, 0xb6, 0xc1, 0xbc, 0xdf, 0x69, 0xd5, 0x70,
	0xa0, 0x26, 0x23, 0x1e, 0x9a, 0x2e, 0x58, 0x1f, 0x71, 0x7c, 0x2a, 0x84, 0xa3, 0x05, 0x3b, 0x40,
	0x0c, 0x53, 0x96, 0x5e, 0xb0, 0x68, 0xfd, 0xa9, 0xe0, 0x6c, 0x01, 0x3d, 0x94, 0x3b, 0xc4, 0x3d,
	0x36, 0x52, 0x34, 0xd3, 0x07, 0x9b, 0x89, 0xab, 0x02, 0xe5, 0x6e, 0x02, 0xca, 0x8b, 0x29, 0x28,
	0x77, 0xa8, 0x3b, 0x99, 0x86, 0x08, 0x9a, 0x58, 0xf2, 0xde, 0xa0, 0x34, 0xf0, 0x1e, 0x00, 0xb2,
	0xa1, 0x0a, 0xb9, 0xeb, 0x16, 0xef, 0xa8, 0x56, 0xbf, 0xfb, 0x5a, 0xbc, 0x9b, 0x8a, 0xee, 0x6b,
	0x1d, 0x21, 0x17, 0x0b, 0x5f, 0x45, 0x50, 0x06, 0x31, 0xcf, 0x34, 0x91, 0xe1, 0xb0, 0xe2, 0xa0,
	0xb1, 0x5c, 0x8d, 0xb5, 0xc8, 0xa6, 0x47, 0x99, 0xe8, 0x2e, 0xd3, 0x55, 0x7c, 0xd9, 0x51, 0xc2,
	0xc3, 0x63, 0x25, 0x93, 0xd9, 0x30, 0x93, 0x97, 0x27, 0x66, 0xc2, 0x99, 0xd2, 0x52, 0xc9, 0x03,
	0x63, 0x28, 0x93, 0xbb, 0x5d, 0x1c, 0x74, 0x3d, 0xfc, 0x59, 0xb4, 0x9b, 0xbf, 0xcf, 0x82, 0x9d,
	0x54, 0x93, 0xec, 0x2d, 0x25, 0xa1, 0x3f, 0xcc, 0xa6, 0xf5, 0x07, 0xf8, 0x09, 0x58, 0xa9, 0x85,
	0x2f, 0x7c, 0x35, 0x76, 0x52, 0x2e, 0xfd, 0x8f, 0x43, 0xfb, 0x1c, 0x0f, 0x23, 0x17, 0xa1, 0x05,
	0xae, 0x0e, 0x06, 0x8e, 0x00, 0xbe, 0x1c, 0xe7, 0x58, 0x1e, 0xac, 0x72, 0xec, 0x43, 0x70, 0x45,
	0xda, 0x53, 0xcc, 0x36, 0xe6, 0x42, 0x0c, 0x23, 0x8e, 0x11, 0xce, 0x31, 0xeb, 0xa3, 0xc8, 0xec,
	0x3e, 0x56, 0x18, 0x96, 0xba, 0xb1, 0x85, 0xf2, 0x6f, 0x4b, 0x60, 0x2e, 0x2c, 0x27, 0xfc, 0x5a,
	0x03, 0xab, 0xfb, 0x38, 0xf6, 0x86, 0xf0, 0x1e, 0x0f, 0x5f, 0x49, 0xc9, 0x70, 0x74, 0xa8, 0xe8,
	0xc5, 0x2c, 0xa6, 0x7c, 0x8f, 0xcc, 0xfc, 0x97, 0x7d, 0x9a, 0x2f, 0xfe, 0xf8, 0xe7, 0xbb, 0xd9,
	0x1c, 0x5c, 0x8d, 0xcd, 0x66, 0x6a, 0xf3, 0x49, 0x02, 0x7f, 0xd6, 0x40, 0x4e, 0x01, 0x8a, 0xf6,
	0x19, 0xbe, 0x39, 0x4e, 0x27, 0xf5, 0xe8, 0xe8, 0x6f, 0x4d, 0xeb, 0x26, 0x50, 0x4d, 0x89, 0xba,
	0x0e, 0x73, 0x0a, 0x2a, 0x89, 0x90, 0xbe, 0xd2, 0xc0, 0xe2, 0x3e, 0x66, 0xd1, 0x74, 0x83, 0xaf,
	0x8e, 0xd3, 0x1a, 0x9a, 0x8d, 0xfa, 0x6b, 0xd9, 0x8c, 0x05, 0xce, 0x8e, 0xc4, 0x59, 0x83, 0x50,
	0xc1, 0x09, 0x0f, 0x10, 0xfc, 0x71, 0x78, 0x27, 0x79, 0xf3, 0x85, 0x7b, 0xd9, 0xf2, 0x57, 0x5a,
	0xb9, 0xfe, 0xc6, 0x74, 0x4e, 0x93, 0x77, 0xb7, 0xc9, 0x61, 0x46, 0x20, 0xf9, 0x48, 0xcd, 0x0a,
	0xa9, 0x0c, 0xe8, 0xac, 0x90, 0xea, 0xd4, 0x1e, 0x07, 0xc9, 0xdf, 0x53, 0xf8, 0xad, 0x06, 0x96,
	0xf6, 0x31, 0x1b, 0xdc, 0x2e, 0xe0, 0xd8, 0x9d, 0x1a, 0xbe, 0x9d, 0xe8, 0xa5, 0x8c, 0xd6, 0x82,
	0xe7, 0x25, 0xc9, 0xa3, 0xc3, 0x8d, 0xa1, 0xa2, 0x51, 0x56, 0xf2, 0x49, 0x09, 0x39, 0x0d, 0xf8,
	0x83, 0x06, 0x56, 0xf6, 0x31, 0x53, 0xc7, 0x19, 0xdc, 0x1d, 0xa7, 0x95, 0x38, 0x18, 0xf5, 0xf2,
	0x34, 0x2e, 0x82, 0xb1, 0x10, 0xe2, 0x6d, 0xc2, 0xe7, 0xd5, 0x37, 0x36, 0xc0, 0x6d, 0x14, 0xe0,
	0x92, 0x8f, 0x7b, 0x0c, 0x7e, 0xcf, 0xf9, 0xd4, 0x61, 0x34, 0x9e, 0x2f, 0x71, 0x54, 0x8e, 0xe7,
	0x4b, 0x9e, 0x75, 0xa6, 0x21, 0x6b, 0xb8, 0x0a, 0x57, 0xd4, 0x1a, 0xf6, 0x31, 0x7e, 0xd5, 0xc0,
	0xba, 0x02, 0x27, 0x2f, 0xe2, 0xf0, 0x66, 0x36, 0xbd, 0x91, 0xeb, 0xbf, 0xfe, 0xf6, 0xf4, 0x8e,
	0x02, 0xd7, 0x92, 0xb8, 0x2f, 0xc0, 0x82, 0x82, 0x2b, 0xaf, 0xf0, 0xf6, 0x23, 0xf1, 0x71, 0xf1,
	0xb8, 0x7f, 0x20, 0xaf, 0x28, 0xf8, 0xb0, 0x94, 0x4d, 0x3b, 0x42, 0xb5, 0xb2, 0x9a, 0x4f, 0xee,
	0x7d, 0x8f, 0xf8, 0xad, 0xf3, 0x71, 0xe5, 0xce, 0xd9, 0xb9, 0xa1, 0x3d, 0x39, 0x37, 0xb4, 0xbf,
	0xcf, 0x0d, 0xed, 0x9b, 0x0b, 0x63, 0xe6, 0xc9, 0x85, 0x31, 0xf3, 0xe7, 0x85, 0x31, 0xf3, 0xe9,
	0x9e, 0xeb, 0xb1, 0x7a, 0xa7, 0x66, 0x39, 0xa4, 0x65, 0xbf, 0xde, 0x3b, 0x22, 0xcd, 0x53, 0x97,
	0xf8, 0x76, 0x44, 0x50, 0xea, 0x96, 0xed, 0x9e, 0xf2, 0x55, 0x76, 0xda, 0xc6, 0xb4, 0x36, 0x1f,
	0x7e, 0x77, 0xed, 0xfd, 0x17, 0x00, 0x00, 0xff, 0xff, 0xfc, 0x64, 0x09, 0xa0, 0xe0, 0x0e, 0x00,
	0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// QueryClient is the client API for Query service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type QueryClient interface {
	// GetCheckpointParams queries for the x/checkpoint params
	GetCheckpointParams(ctx context.Context, in *QueryParamsRequest, opts ...grpc.CallOption) (*QueryParamsResponse, error)
	// GetCheckpointOverview queries for the checkpoint overview
	GetCheckpointOverview(ctx context.Context, in *QueryCheckpointOverviewRequest, opts ...grpc.CallOption) (*QueryCheckpointOverviewResponse, error)
	// GetAckCount queries for the ack count
	GetAckCount(ctx context.Context, in *QueryAckCountRequest, opts ...grpc.CallOption) (*QueryAckCountResponse, error)
	// GetCheckpointLatest queries for the latest checkpoint
	GetCheckpointLatest(ctx context.Context, in *QueryCheckpointLatestRequest, opts ...grpc.CallOption) (*QueryCheckpointLatestResponse, error)
	// GetCheckpointBuffer queries for the checkpoint in the buffer
	GetCheckpointBuffer(ctx context.Context, in *QueryCheckpointBufferRequest, opts ...grpc.CallOption) (*QueryCheckpointBufferResponse, error)
	// GetLastNoAck queries for the last last-no-ack
	GetLastNoAck(ctx context.Context, in *QueryLastNoAckRequest, opts ...grpc.CallOption) (*QueryLastNoAckResponse, error)
	// GetNextCheckpoint queries for the next checkpoint
	GetNextCheckpoint(ctx context.Context, in *QueryNextCheckpointRequest, opts ...grpc.CallOption) (*QueryNextCheckpointResponse, error)
	// GetCheckpointList queries for the list of checkpoints
	GetCheckpointList(ctx context.Context, in *QueryCheckpointListRequest, opts ...grpc.CallOption) (*QueryCheckpointListResponse, error)
	// GetCheckpointSignatures queries signatures for latest checkpoint
	GetCheckpointSignatures(ctx context.Context, in *QueryCheckpointSignaturesRequest, opts ...grpc.CallOption) (*QueryCheckpointSignaturesResponse, error)
	// GetCheckpoint queries for the checkpoint based on the number
	GetCheckpoint(ctx context.Context, in *QueryCheckpointRequest, opts ...grpc.CallOption) (*QueryCheckpointResponse, error)
}

type queryClient struct {
	cc grpc1.ClientConn
}

func NewQueryClient(cc grpc1.ClientConn) QueryClient {
	return &queryClient{cc}
}

func (c *queryClient) GetCheckpointParams(ctx context.Context, in *QueryParamsRequest, opts ...grpc.CallOption) (*QueryParamsResponse, error) {
	out := new(QueryParamsResponse)
	err := c.cc.Invoke(ctx, "/heimdallv2.checkpoint.Query/GetCheckpointParams", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) GetCheckpointOverview(ctx context.Context, in *QueryCheckpointOverviewRequest, opts ...grpc.CallOption) (*QueryCheckpointOverviewResponse, error) {
	out := new(QueryCheckpointOverviewResponse)
	err := c.cc.Invoke(ctx, "/heimdallv2.checkpoint.Query/GetCheckpointOverview", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) GetAckCount(ctx context.Context, in *QueryAckCountRequest, opts ...grpc.CallOption) (*QueryAckCountResponse, error) {
	out := new(QueryAckCountResponse)
	err := c.cc.Invoke(ctx, "/heimdallv2.checkpoint.Query/GetAckCount", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) GetCheckpointLatest(ctx context.Context, in *QueryCheckpointLatestRequest, opts ...grpc.CallOption) (*QueryCheckpointLatestResponse, error) {
	out := new(QueryCheckpointLatestResponse)
	err := c.cc.Invoke(ctx, "/heimdallv2.checkpoint.Query/GetCheckpointLatest", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) GetCheckpointBuffer(ctx context.Context, in *QueryCheckpointBufferRequest, opts ...grpc.CallOption) (*QueryCheckpointBufferResponse, error) {
	out := new(QueryCheckpointBufferResponse)
	err := c.cc.Invoke(ctx, "/heimdallv2.checkpoint.Query/GetCheckpointBuffer", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) GetLastNoAck(ctx context.Context, in *QueryLastNoAckRequest, opts ...grpc.CallOption) (*QueryLastNoAckResponse, error) {
	out := new(QueryLastNoAckResponse)
	err := c.cc.Invoke(ctx, "/heimdallv2.checkpoint.Query/GetLastNoAck", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) GetNextCheckpoint(ctx context.Context, in *QueryNextCheckpointRequest, opts ...grpc.CallOption) (*QueryNextCheckpointResponse, error) {
	out := new(QueryNextCheckpointResponse)
	err := c.cc.Invoke(ctx, "/heimdallv2.checkpoint.Query/GetNextCheckpoint", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) GetCheckpointList(ctx context.Context, in *QueryCheckpointListRequest, opts ...grpc.CallOption) (*QueryCheckpointListResponse, error) {
	out := new(QueryCheckpointListResponse)
	err := c.cc.Invoke(ctx, "/heimdallv2.checkpoint.Query/GetCheckpointList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) GetCheckpointSignatures(ctx context.Context, in *QueryCheckpointSignaturesRequest, opts ...grpc.CallOption) (*QueryCheckpointSignaturesResponse, error) {
	out := new(QueryCheckpointSignaturesResponse)
	err := c.cc.Invoke(ctx, "/heimdallv2.checkpoint.Query/GetCheckpointSignatures", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) GetCheckpoint(ctx context.Context, in *QueryCheckpointRequest, opts ...grpc.CallOption) (*QueryCheckpointResponse, error) {
	out := new(QueryCheckpointResponse)
	err := c.cc.Invoke(ctx, "/heimdallv2.checkpoint.Query/GetCheckpoint", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// QueryServer is the server API for Query service.
type QueryServer interface {
	// GetCheckpointParams queries for the x/checkpoint params
	GetCheckpointParams(context.Context, *QueryParamsRequest) (*QueryParamsResponse, error)
	// GetCheckpointOverview queries for the checkpoint overview
	GetCheckpointOverview(context.Context, *QueryCheckpointOverviewRequest) (*QueryCheckpointOverviewResponse, error)
	// GetAckCount queries for the ack count
	GetAckCount(context.Context, *QueryAckCountRequest) (*QueryAckCountResponse, error)
	// GetCheckpointLatest queries for the latest checkpoint
	GetCheckpointLatest(context.Context, *QueryCheckpointLatestRequest) (*QueryCheckpointLatestResponse, error)
	// GetCheckpointBuffer queries for the checkpoint in the buffer
	GetCheckpointBuffer(context.Context, *QueryCheckpointBufferRequest) (*QueryCheckpointBufferResponse, error)
	// GetLastNoAck queries for the last last-no-ack
	GetLastNoAck(context.Context, *QueryLastNoAckRequest) (*QueryLastNoAckResponse, error)
	// GetNextCheckpoint queries for the next checkpoint
	GetNextCheckpoint(context.Context, *QueryNextCheckpointRequest) (*QueryNextCheckpointResponse, error)
	// GetCheckpointList queries for the list of checkpoints
	GetCheckpointList(context.Context, *QueryCheckpointListRequest) (*QueryCheckpointListResponse, error)
	// GetCheckpointSignatures queries signatures for latest checkpoint
	GetCheckpointSignatures(context.Context, *QueryCheckpointSignaturesRequest) (*QueryCheckpointSignaturesResponse, error)
	// GetCheckpoint queries for the checkpoint based on the number
	GetCheckpoint(context.Context, *QueryCheckpointRequest) (*QueryCheckpointResponse, error)
}

// UnimplementedQueryServer can be embedded to have forward compatible implementations.
type UnimplementedQueryServer struct {
}

func (*UnimplementedQueryServer) GetCheckpointParams(ctx context.Context, req *QueryParamsRequest) (*QueryParamsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCheckpointParams not implemented")
}
func (*UnimplementedQueryServer) GetCheckpointOverview(ctx context.Context, req *QueryCheckpointOverviewRequest) (*QueryCheckpointOverviewResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCheckpointOverview not implemented")
}
func (*UnimplementedQueryServer) GetAckCount(ctx context.Context, req *QueryAckCountRequest) (*QueryAckCountResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAckCount not implemented")
}
func (*UnimplementedQueryServer) GetCheckpointLatest(ctx context.Context, req *QueryCheckpointLatestRequest) (*QueryCheckpointLatestResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCheckpointLatest not implemented")
}
func (*UnimplementedQueryServer) GetCheckpointBuffer(ctx context.Context, req *QueryCheckpointBufferRequest) (*QueryCheckpointBufferResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCheckpointBuffer not implemented")
}
func (*UnimplementedQueryServer) GetLastNoAck(ctx context.Context, req *QueryLastNoAckRequest) (*QueryLastNoAckResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetLastNoAck not implemented")
}
func (*UnimplementedQueryServer) GetNextCheckpoint(ctx context.Context, req *QueryNextCheckpointRequest) (*QueryNextCheckpointResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetNextCheckpoint not implemented")
}
func (*UnimplementedQueryServer) GetCheckpointList(ctx context.Context, req *QueryCheckpointListRequest) (*QueryCheckpointListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCheckpointList not implemented")
}
func (*UnimplementedQueryServer) GetCheckpointSignatures(ctx context.Context, req *QueryCheckpointSignaturesRequest) (*QueryCheckpointSignaturesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCheckpointSignatures not implemented")
}
func (*UnimplementedQueryServer) GetCheckpoint(ctx context.Context, req *QueryCheckpointRequest) (*QueryCheckpointResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCheckpoint not implemented")
}

func RegisterQueryServer(s grpc1.Server, srv QueryServer) {
	s.RegisterService(&_Query_serviceDesc, srv)
}

func _Query_GetCheckpointParams_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryParamsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).GetCheckpointParams(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/heimdallv2.checkpoint.Query/GetCheckpointParams",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).GetCheckpointParams(ctx, req.(*QueryParamsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_GetCheckpointOverview_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryCheckpointOverviewRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).GetCheckpointOverview(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/heimdallv2.checkpoint.Query/GetCheckpointOverview",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).GetCheckpointOverview(ctx, req.(*QueryCheckpointOverviewRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_GetAckCount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryAckCountRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).GetAckCount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/heimdallv2.checkpoint.Query/GetAckCount",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).GetAckCount(ctx, req.(*QueryAckCountRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_GetCheckpointLatest_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryCheckpointLatestRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).GetCheckpointLatest(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/heimdallv2.checkpoint.Query/GetCheckpointLatest",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).GetCheckpointLatest(ctx, req.(*QueryCheckpointLatestRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_GetCheckpointBuffer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryCheckpointBufferRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).GetCheckpointBuffer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/heimdallv2.checkpoint.Query/GetCheckpointBuffer",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).GetCheckpointBuffer(ctx, req.(*QueryCheckpointBufferRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_GetLastNoAck_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryLastNoAckRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).GetLastNoAck(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/heimdallv2.checkpoint.Query/GetLastNoAck",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).GetLastNoAck(ctx, req.(*QueryLastNoAckRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_GetNextCheckpoint_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryNextCheckpointRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).GetNextCheckpoint(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/heimdallv2.checkpoint.Query/GetNextCheckpoint",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).GetNextCheckpoint(ctx, req.(*QueryNextCheckpointRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_GetCheckpointList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryCheckpointListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).GetCheckpointList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/heimdallv2.checkpoint.Query/GetCheckpointList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).GetCheckpointList(ctx, req.(*QueryCheckpointListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_GetCheckpointSignatures_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryCheckpointSignaturesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).GetCheckpointSignatures(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/heimdallv2.checkpoint.Query/GetCheckpointSignatures",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).GetCheckpointSignatures(ctx, req.(*QueryCheckpointSignaturesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_GetCheckpoint_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryCheckpointRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).GetCheckpoint(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/heimdallv2.checkpoint.Query/GetCheckpoint",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).GetCheckpoint(ctx, req.(*QueryCheckpointRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Query_serviceDesc = grpc.ServiceDesc{
	ServiceName: "heimdallv2.checkpoint.Query",
	HandlerType: (*QueryServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetCheckpointParams",
			Handler:    _Query_GetCheckpointParams_Handler,
		},
		{
			MethodName: "GetCheckpointOverview",
			Handler:    _Query_GetCheckpointOverview_Handler,
		},
		{
			MethodName: "GetAckCount",
			Handler:    _Query_GetAckCount_Handler,
		},
		{
			MethodName: "GetCheckpointLatest",
			Handler:    _Query_GetCheckpointLatest_Handler,
		},
		{
			MethodName: "GetCheckpointBuffer",
			Handler:    _Query_GetCheckpointBuffer_Handler,
		},
		{
			MethodName: "GetLastNoAck",
			Handler:    _Query_GetLastNoAck_Handler,
		},
		{
			MethodName: "GetNextCheckpoint",
			Handler:    _Query_GetNextCheckpoint_Handler,
		},
		{
			MethodName: "GetCheckpointList",
			Handler:    _Query_GetCheckpointList_Handler,
		},
		{
			MethodName: "GetCheckpointSignatures",
			Handler:    _Query_GetCheckpointSignatures_Handler,
		},
		{
			MethodName: "GetCheckpoint",
			Handler:    _Query_GetCheckpoint_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "heimdallv2/checkpoint/query.proto",
}

func (m *QueryCheckpointSignaturesRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryCheckpointSignaturesRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryCheckpointSignaturesRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.TxHash) > 0 {
		i -= len(m.TxHash)
		copy(dAtA[i:], m.TxHash)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.TxHash)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryCheckpointSignaturesResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryCheckpointSignaturesResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryCheckpointSignaturesResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Signatures) > 0 {
		for iNdEx := len(m.Signatures) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Signatures[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryParamsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryParamsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryParamsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *QueryParamsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryParamsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryParamsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.Params.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryAckCountRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAckCountRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAckCountRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *QueryAckCountResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAckCountResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAckCountResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.AckCount != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.AckCount))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *QueryLastNoAckRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryLastNoAckRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryLastNoAckRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *QueryLastNoAckResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryLastNoAckResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryLastNoAckResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.LastNoAckId != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.LastNoAckId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *QueryCheckpointBufferRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryCheckpointBufferRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryCheckpointBufferRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *QueryCheckpointBufferResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryCheckpointBufferResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryCheckpointBufferResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.Checkpoint.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryCheckpointRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryCheckpointRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryCheckpointRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Number != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.Number))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *QueryCheckpointResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryCheckpointResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryCheckpointResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.Checkpoint.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryCheckpointLatestRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryCheckpointLatestRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryCheckpointLatestRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *QueryCheckpointLatestResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryCheckpointLatestResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryCheckpointLatestResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.Checkpoint.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryNextCheckpointRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryNextCheckpointRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryNextCheckpointRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *QueryNextCheckpointResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryNextCheckpointResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryNextCheckpointResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.Checkpoint.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryCheckpointListRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryCheckpointListRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryCheckpointListRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryCheckpointListResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryCheckpointListResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryCheckpointListResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.Pagination.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	if len(m.CheckpointList) > 0 {
		for iNdEx := len(m.CheckpointList) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.CheckpointList[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryCheckpointOverviewRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryCheckpointOverviewRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryCheckpointOverviewRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *QueryCheckpointOverviewResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryCheckpointOverviewResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryCheckpointOverviewResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.ValidatorSet.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x2a
	if m.ValidatorCount != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.ValidatorCount))
		i--
		dAtA[i] = 0x20
	}
	{
		size, err := m.BufferCheckpoint.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x1a
	if m.LastNoAckId != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.LastNoAckId))
		i--
		dAtA[i] = 0x10
	}
	if m.AckCount != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.AckCount))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintQuery(dAtA []byte, offset int, v uint64) int {
	offset -= sovQuery(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *QueryCheckpointSignaturesRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.TxHash)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryCheckpointSignaturesResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Signatures) > 0 {
		for _, e := range m.Signatures {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	return n
}

func (m *QueryParamsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *QueryParamsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Params.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryAckCountRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *QueryAckCountResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.AckCount != 0 {
		n += 1 + sovQuery(uint64(m.AckCount))
	}
	return n
}

func (m *QueryLastNoAckRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *QueryLastNoAckResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.LastNoAckId != 0 {
		n += 1 + sovQuery(uint64(m.LastNoAckId))
	}
	return n
}

func (m *QueryCheckpointBufferRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *QueryCheckpointBufferResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Checkpoint.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryCheckpointRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Number != 0 {
		n += 1 + sovQuery(uint64(m.Number))
	}
	return n
}

func (m *QueryCheckpointResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Checkpoint.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryCheckpointLatestRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *QueryCheckpointLatestResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Checkpoint.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryNextCheckpointRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *QueryNextCheckpointResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Checkpoint.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryCheckpointListRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Pagination.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryCheckpointListResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.CheckpointList) > 0 {
		for _, e := range m.CheckpointList {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	l = m.Pagination.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryCheckpointOverviewRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *QueryCheckpointOverviewResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.AckCount != 0 {
		n += 1 + sovQuery(uint64(m.AckCount))
	}
	if m.LastNoAckId != 0 {
		n += 1 + sovQuery(uint64(m.LastNoAckId))
	}
	l = m.BufferCheckpoint.Size()
	n += 1 + l + sovQuery(uint64(l))
	if m.ValidatorCount != 0 {
		n += 1 + sovQuery(uint64(m.ValidatorCount))
	}
	l = m.ValidatorSet.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func sovQuery(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozQuery(x uint64) (n int) {
	return sovQuery(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *QueryCheckpointSignaturesRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryCheckpointSignaturesRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryCheckpointSignaturesRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TxHash", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TxHash = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryCheckpointSignaturesResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryCheckpointSignaturesResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryCheckpointSignaturesResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Signatures", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Signatures = append(m.Signatures, CheckpointSignature{})
			if err := m.Signatures[len(m.Signatures)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryParamsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryParamsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryParamsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryParamsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryParamsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryParamsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Params", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Params.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAckCountRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAckCountRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAckCountRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAckCountResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAckCountResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAckCountResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AckCount", wireType)
			}
			m.AckCount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AckCount |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryLastNoAckRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryLastNoAckRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryLastNoAckRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryLastNoAckResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryLastNoAckResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryLastNoAckResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LastNoAckId", wireType)
			}
			m.LastNoAckId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.LastNoAckId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryCheckpointBufferRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryCheckpointBufferRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryCheckpointBufferRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryCheckpointBufferResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryCheckpointBufferResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryCheckpointBufferResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Checkpoint", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Checkpoint.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryCheckpointRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryCheckpointRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryCheckpointRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Number", wireType)
			}
			m.Number = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Number |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryCheckpointResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryCheckpointResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryCheckpointResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Checkpoint", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Checkpoint.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryCheckpointLatestRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryCheckpointLatestRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryCheckpointLatestRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryCheckpointLatestResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryCheckpointLatestResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryCheckpointLatestResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Checkpoint", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Checkpoint.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryNextCheckpointRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryNextCheckpointRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryNextCheckpointRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryNextCheckpointResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryNextCheckpointResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryNextCheckpointResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Checkpoint", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Checkpoint.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryCheckpointListRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryCheckpointListRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryCheckpointListRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryCheckpointListResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryCheckpointListResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryCheckpointListResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CheckpointList", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CheckpointList = append(m.CheckpointList, Checkpoint{})
			if err := m.CheckpointList[len(m.CheckpointList)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pagination", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Pagination.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryCheckpointOverviewRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryCheckpointOverviewRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryCheckpointOverviewRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryCheckpointOverviewResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryCheckpointOverviewResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryCheckpointOverviewResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AckCount", wireType)
			}
			m.AckCount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AckCount |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LastNoAckId", wireType)
			}
			m.LastNoAckId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.LastNoAckId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BufferCheckpoint", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.BufferCheckpoint.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ValidatorCount", wireType)
			}
			m.ValidatorCount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ValidatorCount |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ValidatorSet", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.ValidatorSet.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipQuery(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthQuery
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupQuery
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthQuery
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthQuery        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowQuery          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupQuery = fmt.Errorf("proto: unexpected end of group")
)
