// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: heimdallv2/checkpoint/v1/query.proto

package types

import (
	context "context"
	fmt "fmt"
	types "github.com/0xPolygon/heimdall-v2/x/stake/types"
	_ "github.com/cosmos/cosmos-sdk/types/query"
	_ "github.com/cosmos/cosmos-sdk/types/tx/amino"
	_ "github.com/cosmos/gogoproto/gogoproto"
	grpc1 "github.com/cosmos/gogoproto/grpc"
	proto "github.com/cosmos/gogoproto/proto"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// QueryParamsRequest is request type for Query/Params
// RPC method.
type QueryParamsRequest struct {
}

func (m *QueryParamsRequest) Reset()         { *m = QueryParamsRequest{} }
func (m *QueryParamsRequest) String() string { return proto.CompactTextString(m) }
func (*QueryParamsRequest) ProtoMessage()    {}
func (*QueryParamsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_41f68716c1744236, []int{0}
}
func (m *QueryParamsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryParamsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryParamsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryParamsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryParamsRequest.Merge(m, src)
}
func (m *QueryParamsRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryParamsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryParamsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryParamsRequest proto.InternalMessageInfo

// QueryParamsResponse is response type for the Query/Params
// RPC method
type QueryParamsResponse struct {
	Params Params `protobuf:"bytes,1,opt,name=params,proto3" json:"params"`
}

func (m *QueryParamsResponse) Reset()         { *m = QueryParamsResponse{} }
func (m *QueryParamsResponse) String() string { return proto.CompactTextString(m) }
func (*QueryParamsResponse) ProtoMessage()    {}
func (*QueryParamsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_41f68716c1744236, []int{1}
}
func (m *QueryParamsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryParamsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryParamsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryParamsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryParamsResponse.Merge(m, src)
}
func (m *QueryParamsResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryParamsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryParamsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryParamsResponse proto.InternalMessageInfo

func (m *QueryParamsResponse) GetParams() Params {
	if m != nil {
		return m.Params
	}
	return Params{}
}

// QueryAckCountRequest is response type for the Query/AckCount RPC method
type QueryAckCountRequest struct {
}

func (m *QueryAckCountRequest) Reset()         { *m = QueryAckCountRequest{} }
func (m *QueryAckCountRequest) String() string { return proto.CompactTextString(m) }
func (*QueryAckCountRequest) ProtoMessage()    {}
func (*QueryAckCountRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_41f68716c1744236, []int{2}
}
func (m *QueryAckCountRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAckCountRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAckCountRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAckCountRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAckCountRequest.Merge(m, src)
}
func (m *QueryAckCountRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryAckCountRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAckCountRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAckCountRequest proto.InternalMessageInfo

// QueryAckCountResponse is response type for the Query/AckCount RPC method
type QueryAckCountResponse struct {
	Count uint64 `protobuf:"varint,1,opt,name=count,proto3" json:"count,omitempty"`
}

func (m *QueryAckCountResponse) Reset()         { *m = QueryAckCountResponse{} }
func (m *QueryAckCountResponse) String() string { return proto.CompactTextString(m) }
func (*QueryAckCountResponse) ProtoMessage()    {}
func (*QueryAckCountResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_41f68716c1744236, []int{3}
}
func (m *QueryAckCountResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAckCountResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAckCountResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAckCountResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAckCountResponse.Merge(m, src)
}
func (m *QueryAckCountResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryAckCountResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAckCountResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAckCountResponse proto.InternalMessageInfo

func (m *QueryAckCountResponse) GetCount() uint64 {
	if m != nil {
		return m.Count
	}
	return 0
}

// QueryAckCountRequest is response type for the Query/LastNoAckCount RPC method
type QueryLastNoAckRequest struct {
}

func (m *QueryLastNoAckRequest) Reset()         { *m = QueryLastNoAckRequest{} }
func (m *QueryLastNoAckRequest) String() string { return proto.CompactTextString(m) }
func (*QueryLastNoAckRequest) ProtoMessage()    {}
func (*QueryLastNoAckRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_41f68716c1744236, []int{4}
}
func (m *QueryLastNoAckRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryLastNoAckRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryLastNoAckRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryLastNoAckRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryLastNoAckRequest.Merge(m, src)
}
func (m *QueryLastNoAckRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryLastNoAckRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryLastNoAckRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryLastNoAckRequest proto.InternalMessageInfo

// QueryAckCountResponse is response type for the Query/LastNoAckCount RPC
// method
type QueryLastNoAckResponse struct {
	Result uint64 `protobuf:"varint,1,opt,name=result,proto3" json:"result,omitempty"`
}

func (m *QueryLastNoAckResponse) Reset()         { *m = QueryLastNoAckResponse{} }
func (m *QueryLastNoAckResponse) String() string { return proto.CompactTextString(m) }
func (*QueryLastNoAckResponse) ProtoMessage()    {}
func (*QueryLastNoAckResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_41f68716c1744236, []int{5}
}
func (m *QueryLastNoAckResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryLastNoAckResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryLastNoAckResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryLastNoAckResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryLastNoAckResponse.Merge(m, src)
}
func (m *QueryLastNoAckResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryLastNoAckResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryLastNoAckResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryLastNoAckResponse proto.InternalMessageInfo

func (m *QueryLastNoAckResponse) GetResult() uint64 {
	if m != nil {
		return m.Result
	}
	return 0
}

// QueryCheckpointBufferRequest is response type for the Query/Buffer RPC method
type QueryCheckpointBufferRequest struct {
}

func (m *QueryCheckpointBufferRequest) Reset()         { *m = QueryCheckpointBufferRequest{} }
func (m *QueryCheckpointBufferRequest) String() string { return proto.CompactTextString(m) }
func (*QueryCheckpointBufferRequest) ProtoMessage()    {}
func (*QueryCheckpointBufferRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_41f68716c1744236, []int{6}
}
func (m *QueryCheckpointBufferRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryCheckpointBufferRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryCheckpointBufferRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryCheckpointBufferRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryCheckpointBufferRequest.Merge(m, src)
}
func (m *QueryCheckpointBufferRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryCheckpointBufferRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryCheckpointBufferRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryCheckpointBufferRequest proto.InternalMessageInfo

// QueryCheckpointBufferResponse is response type for the Query/Buffer RPC
// method
type QueryCheckpointBufferResponse struct {
	Checkpoint Checkpoint `protobuf:"bytes,1,opt,name=checkpoint,proto3" json:"checkpoint"`
}

func (m *QueryCheckpointBufferResponse) Reset()         { *m = QueryCheckpointBufferResponse{} }
func (m *QueryCheckpointBufferResponse) String() string { return proto.CompactTextString(m) }
func (*QueryCheckpointBufferResponse) ProtoMessage()    {}
func (*QueryCheckpointBufferResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_41f68716c1744236, []int{7}
}
func (m *QueryCheckpointBufferResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryCheckpointBufferResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryCheckpointBufferResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryCheckpointBufferResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryCheckpointBufferResponse.Merge(m, src)
}
func (m *QueryCheckpointBufferResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryCheckpointBufferResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryCheckpointBufferResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryCheckpointBufferResponse proto.InternalMessageInfo

func (m *QueryCheckpointBufferResponse) GetCheckpoint() Checkpoint {
	if m != nil {
		return m.Checkpoint
	}
	return Checkpoint{}
}

// QueryCheckpointRequest is response type for the Query/Checkpoint/{number} RPC
// method
type QueryCheckpointRequest struct {
	Number uint64 `protobuf:"varint,1,opt,name=number,proto3" json:"number,omitempty"`
}

func (m *QueryCheckpointRequest) Reset()         { *m = QueryCheckpointRequest{} }
func (m *QueryCheckpointRequest) String() string { return proto.CompactTextString(m) }
func (*QueryCheckpointRequest) ProtoMessage()    {}
func (*QueryCheckpointRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_41f68716c1744236, []int{8}
}
func (m *QueryCheckpointRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryCheckpointRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryCheckpointRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryCheckpointRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryCheckpointRequest.Merge(m, src)
}
func (m *QueryCheckpointRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryCheckpointRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryCheckpointRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryCheckpointRequest proto.InternalMessageInfo

func (m *QueryCheckpointRequest) GetNumber() uint64 {
	if m != nil {
		return m.Number
	}
	return 0
}

// QueryCheckpointResponse is response type for the Query/Checkpoint/{number}
// RPC method
type QueryCheckpointResponse struct {
	Checkpoint Checkpoint `protobuf:"bytes,1,opt,name=checkpoint,proto3" json:"checkpoint"`
}

func (m *QueryCheckpointResponse) Reset()         { *m = QueryCheckpointResponse{} }
func (m *QueryCheckpointResponse) String() string { return proto.CompactTextString(m) }
func (*QueryCheckpointResponse) ProtoMessage()    {}
func (*QueryCheckpointResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_41f68716c1744236, []int{9}
}
func (m *QueryCheckpointResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryCheckpointResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryCheckpointResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryCheckpointResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryCheckpointResponse.Merge(m, src)
}
func (m *QueryCheckpointResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryCheckpointResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryCheckpointResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryCheckpointResponse proto.InternalMessageInfo

func (m *QueryCheckpointResponse) GetCheckpoint() Checkpoint {
	if m != nil {
		return m.Checkpoint
	}
	return Checkpoint{}
}

// QueryCheckpointLatestRequest is response type for the Query/Checkpoint/latest
// RPC method
type QueryCheckpointLatestRequest struct {
}

func (m *QueryCheckpointLatestRequest) Reset()         { *m = QueryCheckpointLatestRequest{} }
func (m *QueryCheckpointLatestRequest) String() string { return proto.CompactTextString(m) }
func (*QueryCheckpointLatestRequest) ProtoMessage()    {}
func (*QueryCheckpointLatestRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_41f68716c1744236, []int{10}
}
func (m *QueryCheckpointLatestRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryCheckpointLatestRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryCheckpointLatestRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryCheckpointLatestRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryCheckpointLatestRequest.Merge(m, src)
}
func (m *QueryCheckpointLatestRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryCheckpointLatestRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryCheckpointLatestRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryCheckpointLatestRequest proto.InternalMessageInfo

// QueryCheckpointLatestResponse is response type for the
// Query/Checkpoints/latest RPC method
type QueryCheckpointLatestResponse struct {
	Checkpoint Checkpoint `protobuf:"bytes,1,opt,name=checkpoint,proto3" json:"checkpoint"`
}

func (m *QueryCheckpointLatestResponse) Reset()         { *m = QueryCheckpointLatestResponse{} }
func (m *QueryCheckpointLatestResponse) String() string { return proto.CompactTextString(m) }
func (*QueryCheckpointLatestResponse) ProtoMessage()    {}
func (*QueryCheckpointLatestResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_41f68716c1744236, []int{11}
}
func (m *QueryCheckpointLatestResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryCheckpointLatestResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryCheckpointLatestResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryCheckpointLatestResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryCheckpointLatestResponse.Merge(m, src)
}
func (m *QueryCheckpointLatestResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryCheckpointLatestResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryCheckpointLatestResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryCheckpointLatestResponse proto.InternalMessageInfo

func (m *QueryCheckpointLatestResponse) GetCheckpoint() Checkpoint {
	if m != nil {
		return m.Checkpoint
	}
	return Checkpoint{}
}

// QueryNextCheckpointRequest is response type for the Query/Checkpoints/prepare
// RPC method
type QueryNextCheckpointRequest struct {
	BorChainId string `protobuf:"bytes,1,opt,name=bor_chain_id,json=borChainId,proto3" json:"bor_chain_id,omitempty"`
}

func (m *QueryNextCheckpointRequest) Reset()         { *m = QueryNextCheckpointRequest{} }
func (m *QueryNextCheckpointRequest) String() string { return proto.CompactTextString(m) }
func (*QueryNextCheckpointRequest) ProtoMessage()    {}
func (*QueryNextCheckpointRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_41f68716c1744236, []int{12}
}
func (m *QueryNextCheckpointRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryNextCheckpointRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryNextCheckpointRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryNextCheckpointRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryNextCheckpointRequest.Merge(m, src)
}
func (m *QueryNextCheckpointRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryNextCheckpointRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryNextCheckpointRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryNextCheckpointRequest proto.InternalMessageInfo

func (m *QueryNextCheckpointRequest) GetBorChainId() string {
	if m != nil {
		return m.BorChainId
	}
	return ""
}

// QueryNextCheckpointResponse is response type for the
// Query/Checkpoints/prepare RPC method
type QueryNextCheckpointResponse struct {
	Checkpoint MsgCheckpoint `protobuf:"bytes,1,opt,name=checkpoint,proto3" json:"checkpoint"`
}

func (m *QueryNextCheckpointResponse) Reset()         { *m = QueryNextCheckpointResponse{} }
func (m *QueryNextCheckpointResponse) String() string { return proto.CompactTextString(m) }
func (*QueryNextCheckpointResponse) ProtoMessage()    {}
func (*QueryNextCheckpointResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_41f68716c1744236, []int{13}
}
func (m *QueryNextCheckpointResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryNextCheckpointResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryNextCheckpointResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryNextCheckpointResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryNextCheckpointResponse.Merge(m, src)
}
func (m *QueryNextCheckpointResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryNextCheckpointResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryNextCheckpointResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryNextCheckpointResponse proto.InternalMessageInfo

func (m *QueryNextCheckpointResponse) GetCheckpoint() MsgCheckpoint {
	if m != nil {
		return m.Checkpoint
	}
	return MsgCheckpoint{}
}

// QueryCurrentProposerRequest is request type for the Query/CurrentProposer RPC
// method
type QueryCurrentProposerRequest struct {
}

func (m *QueryCurrentProposerRequest) Reset()         { *m = QueryCurrentProposerRequest{} }
func (m *QueryCurrentProposerRequest) String() string { return proto.CompactTextString(m) }
func (*QueryCurrentProposerRequest) ProtoMessage()    {}
func (*QueryCurrentProposerRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_41f68716c1744236, []int{14}
}
func (m *QueryCurrentProposerRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryCurrentProposerRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryCurrentProposerRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryCurrentProposerRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryCurrentProposerRequest.Merge(m, src)
}
func (m *QueryCurrentProposerRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryCurrentProposerRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryCurrentProposerRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryCurrentProposerRequest proto.InternalMessageInfo

// QueryCurrentProposerRequest is response type for the Query/CurrentProposer
// RPC method
type QueryCurrentProposerResponse struct {
	// validator defines the validator info.
	Validator types.Validator `protobuf:"bytes,1,opt,name=validator,proto3" json:"validator"`
}

func (m *QueryCurrentProposerResponse) Reset()         { *m = QueryCurrentProposerResponse{} }
func (m *QueryCurrentProposerResponse) String() string { return proto.CompactTextString(m) }
func (*QueryCurrentProposerResponse) ProtoMessage()    {}
func (*QueryCurrentProposerResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_41f68716c1744236, []int{15}
}
func (m *QueryCurrentProposerResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryCurrentProposerResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryCurrentProposerResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryCurrentProposerResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryCurrentProposerResponse.Merge(m, src)
}
func (m *QueryCurrentProposerResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryCurrentProposerResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryCurrentProposerResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryCurrentProposerResponse proto.InternalMessageInfo

func (m *QueryCurrentProposerResponse) GetValidator() types.Validator {
	if m != nil {
		return m.Validator
	}
	return types.Validator{}
}

// QuerySignerRequest is response type for the Query/Proposer RPC method
type QueryProposerRequest struct {
	Times uint64 `protobuf:"varint,1,opt,name=times,proto3" json:"times,omitempty"`
}

func (m *QueryProposerRequest) Reset()         { *m = QueryProposerRequest{} }
func (m *QueryProposerRequest) String() string { return proto.CompactTextString(m) }
func (*QueryProposerRequest) ProtoMessage()    {}
func (*QueryProposerRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_41f68716c1744236, []int{16}
}
func (m *QueryProposerRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryProposerRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryProposerRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryProposerRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryProposerRequest.Merge(m, src)
}
func (m *QueryProposerRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryProposerRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryProposerRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryProposerRequest proto.InternalMessageInfo

func (m *QueryProposerRequest) GetTimes() uint64 {
	if m != nil {
		return m.Times
	}
	return 0
}

// QuerySignerResponse is response type for the Query/Proposer RPC method
type QueryProposerResponse struct {
	Proposers []types.Validator `protobuf:"bytes,1,rep,name=proposers,proto3" json:"proposers"`
}

func (m *QueryProposerResponse) Reset()         { *m = QueryProposerResponse{} }
func (m *QueryProposerResponse) String() string { return proto.CompactTextString(m) }
func (*QueryProposerResponse) ProtoMessage()    {}
func (*QueryProposerResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_41f68716c1744236, []int{17}
}
func (m *QueryProposerResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryProposerResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryProposerResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryProposerResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryProposerResponse.Merge(m, src)
}
func (m *QueryProposerResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryProposerResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryProposerResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryProposerResponse proto.InternalMessageInfo

func (m *QueryProposerResponse) GetProposers() []types.Validator {
	if m != nil {
		return m.Proposers
	}
	return nil
}

func init() {
	proto.RegisterType((*QueryParamsRequest)(nil), "heimdallv2.checkpoint.v1.QueryParamsRequest")
	proto.RegisterType((*QueryParamsResponse)(nil), "heimdallv2.checkpoint.v1.QueryParamsResponse")
	proto.RegisterType((*QueryAckCountRequest)(nil), "heimdallv2.checkpoint.v1.QueryAckCountRequest")
	proto.RegisterType((*QueryAckCountResponse)(nil), "heimdallv2.checkpoint.v1.QueryAckCountResponse")
	proto.RegisterType((*QueryLastNoAckRequest)(nil), "heimdallv2.checkpoint.v1.QueryLastNoAckRequest")
	proto.RegisterType((*QueryLastNoAckResponse)(nil), "heimdallv2.checkpoint.v1.QueryLastNoAckResponse")
	proto.RegisterType((*QueryCheckpointBufferRequest)(nil), "heimdallv2.checkpoint.v1.QueryCheckpointBufferRequest")
	proto.RegisterType((*QueryCheckpointBufferResponse)(nil), "heimdallv2.checkpoint.v1.QueryCheckpointBufferResponse")
	proto.RegisterType((*QueryCheckpointRequest)(nil), "heimdallv2.checkpoint.v1.QueryCheckpointRequest")
	proto.RegisterType((*QueryCheckpointResponse)(nil), "heimdallv2.checkpoint.v1.QueryCheckpointResponse")
	proto.RegisterType((*QueryCheckpointLatestRequest)(nil), "heimdallv2.checkpoint.v1.QueryCheckpointLatestRequest")
	proto.RegisterType((*QueryCheckpointLatestResponse)(nil), "heimdallv2.checkpoint.v1.QueryCheckpointLatestResponse")
	proto.RegisterType((*QueryNextCheckpointRequest)(nil), "heimdallv2.checkpoint.v1.QueryNextCheckpointRequest")
	proto.RegisterType((*QueryNextCheckpointResponse)(nil), "heimdallv2.checkpoint.v1.QueryNextCheckpointResponse")
	proto.RegisterType((*QueryCurrentProposerRequest)(nil), "heimdallv2.checkpoint.v1.QueryCurrentProposerRequest")
	proto.RegisterType((*QueryCurrentProposerResponse)(nil), "heimdallv2.checkpoint.v1.QueryCurrentProposerResponse")
	proto.RegisterType((*QueryProposerRequest)(nil), "heimdallv2.checkpoint.v1.QueryProposerRequest")
	proto.RegisterType((*QueryProposerResponse)(nil), "heimdallv2.checkpoint.v1.QueryProposerResponse")
}

func init() {
	proto.RegisterFile("heimdallv2/checkpoint/v1/query.proto", fileDescriptor_41f68716c1744236)
}

var fileDescriptor_41f68716c1744236 = []byte{
	// 868 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xb4, 0x96, 0xcf, 0x4f, 0xdb, 0x48,
	0x14, 0xc7, 0xe3, 0xdd, 0x25, 0x22, 0xc3, 0x6a, 0x7f, 0x0c, 0xe1, 0x87, 0x0c, 0x98, 0xe0, 0x65,
	0xb5, 0xcb, 0x6a, 0x13, 0x43, 0x60, 0xe1, 0xb6, 0x12, 0xc9, 0x61, 0xb5, 0x12, 0xb0, 0x6c, 0x0e,
	0x3d, 0x70, 0xa1, 0x8e, 0x33, 0x38, 0x6e, 0x12, 0x8f, 0xf1, 0x8c, 0xa3, 0x20, 0xc4, 0xa5, 0x97,
	0x56, 0x55, 0x0f, 0x95, 0x2a, 0x7a, 0xee, 0xa5, 0x52, 0xa5, 0x5e, 0xfa, 0x67, 0x70, 0x44, 0xea,
	0xa5, 0xa7, 0xaa, 0x82, 0x4a, 0xfd, 0x37, 0x2a, 0x7b, 0xc6, 0xf1, 0x8f, 0xc4, 0x75, 0x72, 0xe0,
	0x82, 0xd0, 0x9b, 0xf7, 0x7d, 0xef, 0xe3, 0x17, 0xbf, 0xef, 0x18, 0xac, 0x36, 0x91, 0xd1, 0x69,
	0xa8, 0xed, 0x76, 0xb7, 0xac, 0x68, 0x4d, 0xa4, 0xb5, 0x2c, 0x6c, 0x98, 0x54, 0xe9, 0x6e, 0x28,
	0xa7, 0x0e, 0xb2, 0xcf, 0x4a, 0x96, 0x8d, 0x29, 0x86, 0xf3, 0x41, 0x56, 0x29, 0xc8, 0x2a, 0x75,
	0x37, 0xc4, 0xbc, 0x8e, 0x75, 0xec, 0x25, 0x29, 0xee, 0x7f, 0x2c, 0x5f, 0x5c, 0xd4, 0x31, 0xd6,
	0xdb, 0x48, 0x51, 0x2d, 0x43, 0x51, 0x4d, 0x13, 0x53, 0x95, 0x1a, 0xd8, 0x24, 0xfc, 0x74, 0x41,
	0xc3, 0xa4, 0x83, 0x09, 0xeb, 0x10, 0x6b, 0x25, 0xfe, 0xac, 0x76, 0x0c, 0x13, 0x2b, 0xde, 0x5f,
	0x1e, 0x5a, 0x4b, 0x64, 0x0c, 0xb1, 0xb0, 0xd4, 0x95, 0xc4, 0x54, 0xda, 0xe3, 0x29, 0xbf, 0x84,
	0x52, 0x08, 0x55, 0x5b, 0xc8, 0x3d, 0xed, 0xaa, 0x6d, 0xa3, 0xa1, 0x52, 0x6c, 0xb3, 0x24, 0x39,
	0x0f, 0xe0, 0xff, 0x2e, 0xd4, 0xa1, 0x6a, 0xab, 0x1d, 0x52, 0x43, 0xa7, 0x0e, 0x22, 0x54, 0x3e,
	0x02, 0xd3, 0x91, 0x28, 0xb1, 0xb0, 0x49, 0x10, 0xac, 0x82, 0xac, 0xe5, 0x45, 0xe6, 0x85, 0x82,
	0xf0, 0xfb, 0x54, 0xb9, 0x50, 0x4a, 0x1a, 0x57, 0x89, 0x29, 0x2b, 0xb9, 0xab, 0x0f, 0xcb, 0x99,
	0xd7, 0x9f, 0xdf, 0xfe, 0x21, 0xd4, 0xb8, 0x54, 0x9e, 0x05, 0x79, 0xaf, 0xf6, 0xae, 0xd6, 0xaa,
	0x62, 0xc7, 0xa4, 0x7e, 0xcf, 0x2d, 0x30, 0x13, 0x8b, 0xf3, 0xae, 0x0b, 0x60, 0x42, 0x73, 0x03,
	0x5e, 0xd3, 0xef, 0x2a, 0x13, 0xac, 0x1c, 0x8b, 0xc9, 0x73, 0x5c, 0xb5, 0xa7, 0x12, 0x7a, 0x80,
	0x77, 0xb5, 0x96, 0x5f, 0x6e, 0x07, 0xcc, 0xc6, 0x0f, 0x78, 0xbd, 0x25, 0x90, 0xb5, 0x11, 0x71,
	0xda, 0xb1, 0x82, 0x3c, 0x28, 0x4b, 0x60, 0xd1, 0x13, 0x56, 0xfb, 0xcf, 0x53, 0x71, 0x4e, 0x4e,
	0x90, 0xed, 0x17, 0xb6, 0xc0, 0x52, 0xc2, 0x39, 0xaf, 0xff, 0x1f, 0x00, 0xc1, 0x2c, 0xf8, 0xa4,
	0x56, 0x93, 0x27, 0x15, 0xaa, 0x13, 0x9a, 0x56, 0xa8, 0x44, 0xff, 0x51, 0x82, 0x4c, 0xce, 0xe2,
	0x3e, 0x8a, 0xe9, 0x74, 0xea, 0xc8, 0x8e, 0x3d, 0x0a, 0x0b, 0xca, 0x0f, 0xc0, 0xdc, 0x80, 0xf0,
	0xae, 0x20, 0x07, 0xc7, 0xb6, 0xa7, 0x52, 0x44, 0x68, 0xf2, 0xd8, 0xfc, 0xf3, 0xbb, 0x22, 0xfa,
	0x1b, 0x88, 0x5e, 0xc7, 0x03, 0xd4, 0xa3, 0x83, 0xa3, 0x2b, 0x80, 0xef, 0xeb, 0xd8, 0x3e, 0xd6,
	0x9a, 0xaa, 0x61, 0x1e, 0x1b, 0x0d, 0xaf, 0x61, 0xae, 0x06, 0xea, 0xd8, 0xae, 0xba, 0xa1, 0x7f,
	0x1b, 0xf2, 0x29, 0x58, 0x18, 0xaa, 0xe7, 0xbc, 0xb5, 0x21, 0xbc, 0xbf, 0x25, 0xf3, 0xee, 0x13,
	0x3d, 0x1d, 0x79, 0x89, 0xb7, 0xac, 0x3a, 0xb6, 0x8d, 0x4c, 0x7a, 0x68, 0x63, 0x0b, 0x93, 0xe0,
	0xd5, 0xd3, 0xfd, 0x19, 0xc7, 0x8f, 0x39, 0xd2, 0x3f, 0x20, 0xd7, 0xdf, 0x6f, 0x4e, 0x24, 0x85,
	0x89, 0x3c, 0x17, 0x70, 0x61, 0xee, 0xf9, 0x59, 0x61, 0x90, 0x40, 0x2b, 0x6f, 0xf2, 0x1d, 0x8d,
	0x01, 0xb8, 0xab, 0x48, 0x8d, 0x0e, 0x22, 0xb1, 0x55, 0xf4, 0x62, 0xf2, 0x7d, 0xbe, 0x8a, 0xc3,
	0xb0, 0x2c, 0x1e, 0x73, 0x95, 0xdf, 0x8e, 0x89, 0xd5, 0xd7, 0x96, 0x9f, 0x4c, 0x81, 0x09, 0xaf,
	0x05, 0x7c, 0x24, 0x80, 0x2c, 0xb3, 0x18, 0xf8, 0x67, 0xf2, 0xcc, 0x07, 0x9d, 0x4d, 0x2c, 0x8e,
	0x98, 0xcd, 0xd0, 0xe5, 0xc2, 0x63, 0x97, 0xe1, 0xe1, 0xbb, 0x4f, 0xcf, 0xbf, 0x99, 0x81, 0xd3,
	0x21, 0xa7, 0x25, 0x0a, 0xb3, 0x33, 0xf8, 0x54, 0x00, 0x93, 0xbe, 0x65, 0xc1, 0x52, 0x4a, 0xf5,
	0x98, 0xe7, 0x89, 0xca, 0xc8, 0xf9, 0x9c, 0x67, 0x39, 0xe0, 0xc9, 0x43, 0x18, 0xe1, 0xf1, 0xfc,
	0x10, 0x5e, 0x0a, 0x00, 0x04, 0xef, 0x19, 0x5c, 0x4f, 0x69, 0x30, 0xb0, 0x17, 0xe2, 0xc6, 0x18,
	0x0a, 0x0e, 0x25, 0x07, 0x50, 0x73, 0x70, 0x26, 0x02, 0x75, 0xce, 0x9c, 0xe8, 0x02, 0xbe, 0x12,
	0xc0, 0x4f, 0xf1, 0xd5, 0x87, 0xdb, 0x23, 0xf7, 0x8a, 0x78, 0x89, 0xb8, 0x33, 0xb6, 0x2e, 0xfd,
	0xe7, 0x6c, 0x33, 0xa4, 0x28, 0x27, 0x73, 0xf6, 0x31, 0x38, 0x23, 0x57, 0xc5, 0x18, 0x9c, 0xd1,
	0x2b, 0xe4, 0x6b, 0x9c, 0x75, 0x86, 0x74, 0x29, 0x80, 0x5c, 0xff, 0x6a, 0x83, 0x69, 0xef, 0x51,
	0xfc, 0x76, 0x14, 0xd7, 0x47, 0x17, 0x70, 0xa4, 0x5f, 0x03, 0x24, 0x11, 0xce, 0xc7, 0x46, 0x47,
	0x68, 0xd1, 0xc4, 0x45, 0x55, 0x6b, 0xc1, 0x97, 0x02, 0xf8, 0x21, 0x6a, 0x98, 0x70, 0x2b, 0xa5,
	0xd7, 0x50, 0x7f, 0x16, 0xff, 0x1a, 0x53, 0xc5, 0x31, 0x57, 0x02, 0xcc, 0x59, 0x98, 0x8f, 0x2e,
	0xac, 0x8d, 0x2c, 0xd5, 0x46, 0xf0, 0x8d, 0x00, 0x7e, 0x8c, 0x39, 0x28, 0x4c, 0xeb, 0x36, 0xdc,
	0x90, 0xc5, 0xed, 0x71, 0x65, 0x9c, 0x72, 0x2d, 0xa0, 0x94, 0xe0, 0x62, 0xf8, 0x03, 0x4e, 0x63,
	0x8a, 0xa2, 0x6f, 0x7a, 0xf0, 0x85, 0x00, 0x26, 0xfb, 0x98, 0x69, 0xfe, 0x12, 0xe7, 0x53, 0x46,
	0xce, 0x4f, 0x05, 0xf3, 0x81, 0x94, 0x73, 0xcf, 0xed, 0x2f, 0x2a, 0xfb, 0x57, 0x37, 0x92, 0x70,
	0x7d, 0x23, 0x09, 0x1f, 0x6f, 0x24, 0xe1, 0xd9, 0xad, 0x94, 0xb9, 0xbe, 0x95, 0x32, 0xef, 0x6f,
	0xa5, 0xcc, 0xd1, 0xa6, 0x6e, 0xd0, 0xa6, 0x53, 0x2f, 0x69, 0xb8, 0xa3, 0xac, 0xf7, 0x0e, 0x71,
	0xfb, 0x4c, 0xc7, 0xa6, 0xe2, 0x93, 0x14, 0xbb, 0x65, 0xa5, 0x17, 0xae, 0x4c, 0xcf, 0x2c, 0x44,
	0xea, 0x59, 0xef, 0x7b, 0x74, 0xf3, 0x4b, 0x00, 0x00, 0x00, 0xff, 0xff, 0x5d, 0xe8, 0xb0, 0x57,
	0xa8, 0x0b, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// QueryClient is the client API for Query service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type QueryClient interface {
	// Validators queries all validators that match the given status.
	//
	// When called from another module, this query might consume a high amount of
	// gas if the pagination field is incorrectly set.
	Params(ctx context.Context, in *QueryParamsRequest, opts ...grpc.CallOption) (*QueryParamsResponse, error)
	// AckCount queries for the ack count
	AckCount(ctx context.Context, in *QueryAckCountRequest, opts ...grpc.CallOption) (*QueryAckCountResponse, error)
	// Checkpoint queries for the checkpoint based on the number
	Checkpoint(ctx context.Context, in *QueryCheckpointRequest, opts ...grpc.CallOption) (*QueryCheckpointResponse, error)
	// CheckpointLatest queries for the latest checkpoint
	CheckpointLatest(ctx context.Context, in *QueryCheckpointLatestRequest, opts ...grpc.CallOption) (*QueryCheckpointLatestResponse, error)
	// CheckpointBuffer queries for the checkpoint in the buffer
	CheckpointBuffer(ctx context.Context, in *QueryCheckpointBufferRequest, opts ...grpc.CallOption) (*QueryCheckpointBufferResponse, error)
	// LastNoAck query for the last last-no-ack
	LastNoAck(ctx context.Context, in *QueryLastNoAckRequest, opts ...grpc.CallOption) (*QueryLastNoAckResponse, error)
	// NextCheckpoint query for the next checkpoint
	NextCheckpoint(ctx context.Context, in *QueryNextCheckpointRequest, opts ...grpc.CallOption) (*QueryNextCheckpointResponse, error)
	// CurrentProposer queries validator info for the current proposer
	CurrentProposer(ctx context.Context, in *QueryCurrentProposerRequest, opts ...grpc.CallOption) (*QueryCurrentProposerResponse, error)
	// Proposer queries for the proposer
	Proposer(ctx context.Context, in *QueryProposerRequest, opts ...grpc.CallOption) (*QueryProposerResponse, error)
}

type queryClient struct {
	cc grpc1.ClientConn
}

func NewQueryClient(cc grpc1.ClientConn) QueryClient {
	return &queryClient{cc}
}

func (c *queryClient) Params(ctx context.Context, in *QueryParamsRequest, opts ...grpc.CallOption) (*QueryParamsResponse, error) {
	out := new(QueryParamsResponse)
	err := c.cc.Invoke(ctx, "/heimdallv2.checkpoint.v1.Query/Params", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) AckCount(ctx context.Context, in *QueryAckCountRequest, opts ...grpc.CallOption) (*QueryAckCountResponse, error) {
	out := new(QueryAckCountResponse)
	err := c.cc.Invoke(ctx, "/heimdallv2.checkpoint.v1.Query/AckCount", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) Checkpoint(ctx context.Context, in *QueryCheckpointRequest, opts ...grpc.CallOption) (*QueryCheckpointResponse, error) {
	out := new(QueryCheckpointResponse)
	err := c.cc.Invoke(ctx, "/heimdallv2.checkpoint.v1.Query/Checkpoint", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) CheckpointLatest(ctx context.Context, in *QueryCheckpointLatestRequest, opts ...grpc.CallOption) (*QueryCheckpointLatestResponse, error) {
	out := new(QueryCheckpointLatestResponse)
	err := c.cc.Invoke(ctx, "/heimdallv2.checkpoint.v1.Query/CheckpointLatest", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) CheckpointBuffer(ctx context.Context, in *QueryCheckpointBufferRequest, opts ...grpc.CallOption) (*QueryCheckpointBufferResponse, error) {
	out := new(QueryCheckpointBufferResponse)
	err := c.cc.Invoke(ctx, "/heimdallv2.checkpoint.v1.Query/CheckpointBuffer", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) LastNoAck(ctx context.Context, in *QueryLastNoAckRequest, opts ...grpc.CallOption) (*QueryLastNoAckResponse, error) {
	out := new(QueryLastNoAckResponse)
	err := c.cc.Invoke(ctx, "/heimdallv2.checkpoint.v1.Query/LastNoAck", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) NextCheckpoint(ctx context.Context, in *QueryNextCheckpointRequest, opts ...grpc.CallOption) (*QueryNextCheckpointResponse, error) {
	out := new(QueryNextCheckpointResponse)
	err := c.cc.Invoke(ctx, "/heimdallv2.checkpoint.v1.Query/NextCheckpoint", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) CurrentProposer(ctx context.Context, in *QueryCurrentProposerRequest, opts ...grpc.CallOption) (*QueryCurrentProposerResponse, error) {
	out := new(QueryCurrentProposerResponse)
	err := c.cc.Invoke(ctx, "/heimdallv2.checkpoint.v1.Query/CurrentProposer", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) Proposer(ctx context.Context, in *QueryProposerRequest, opts ...grpc.CallOption) (*QueryProposerResponse, error) {
	out := new(QueryProposerResponse)
	err := c.cc.Invoke(ctx, "/heimdallv2.checkpoint.v1.Query/Proposer", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// QueryServer is the server API for Query service.
type QueryServer interface {
	// Validators queries all validators that match the given status.
	//
	// When called from another module, this query might consume a high amount of
	// gas if the pagination field is incorrectly set.
	Params(context.Context, *QueryParamsRequest) (*QueryParamsResponse, error)
	// AckCount queries for the ack count
	AckCount(context.Context, *QueryAckCountRequest) (*QueryAckCountResponse, error)
	// Checkpoint queries for the checkpoint based on the number
	Checkpoint(context.Context, *QueryCheckpointRequest) (*QueryCheckpointResponse, error)
	// CheckpointLatest queries for the latest checkpoint
	CheckpointLatest(context.Context, *QueryCheckpointLatestRequest) (*QueryCheckpointLatestResponse, error)
	// CheckpointBuffer queries for the checkpoint in the buffer
	CheckpointBuffer(context.Context, *QueryCheckpointBufferRequest) (*QueryCheckpointBufferResponse, error)
	// LastNoAck query for the last last-no-ack
	LastNoAck(context.Context, *QueryLastNoAckRequest) (*QueryLastNoAckResponse, error)
	// NextCheckpoint query for the next checkpoint
	NextCheckpoint(context.Context, *QueryNextCheckpointRequest) (*QueryNextCheckpointResponse, error)
	// CurrentProposer queries validator info for the current proposer
	CurrentProposer(context.Context, *QueryCurrentProposerRequest) (*QueryCurrentProposerResponse, error)
	// Proposer queries for the proposer
	Proposer(context.Context, *QueryProposerRequest) (*QueryProposerResponse, error)
}

// UnimplementedQueryServer can be embedded to have forward compatible implementations.
type UnimplementedQueryServer struct {
}

func (*UnimplementedQueryServer) Params(ctx context.Context, req *QueryParamsRequest) (*QueryParamsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Params not implemented")
}
func (*UnimplementedQueryServer) AckCount(ctx context.Context, req *QueryAckCountRequest) (*QueryAckCountResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AckCount not implemented")
}
func (*UnimplementedQueryServer) Checkpoint(ctx context.Context, req *QueryCheckpointRequest) (*QueryCheckpointResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Checkpoint not implemented")
}
func (*UnimplementedQueryServer) CheckpointLatest(ctx context.Context, req *QueryCheckpointLatestRequest) (*QueryCheckpointLatestResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CheckpointLatest not implemented")
}
func (*UnimplementedQueryServer) CheckpointBuffer(ctx context.Context, req *QueryCheckpointBufferRequest) (*QueryCheckpointBufferResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CheckpointBuffer not implemented")
}
func (*UnimplementedQueryServer) LastNoAck(ctx context.Context, req *QueryLastNoAckRequest) (*QueryLastNoAckResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LastNoAck not implemented")
}
func (*UnimplementedQueryServer) NextCheckpoint(ctx context.Context, req *QueryNextCheckpointRequest) (*QueryNextCheckpointResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method NextCheckpoint not implemented")
}
func (*UnimplementedQueryServer) CurrentProposer(ctx context.Context, req *QueryCurrentProposerRequest) (*QueryCurrentProposerResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CurrentProposer not implemented")
}
func (*UnimplementedQueryServer) Proposer(ctx context.Context, req *QueryProposerRequest) (*QueryProposerResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Proposer not implemented")
}

func RegisterQueryServer(s grpc1.Server, srv QueryServer) {
	s.RegisterService(&_Query_serviceDesc, srv)
}

func _Query_Params_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryParamsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).Params(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/heimdallv2.checkpoint.v1.Query/Params",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).Params(ctx, req.(*QueryParamsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_AckCount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryAckCountRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).AckCount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/heimdallv2.checkpoint.v1.Query/AckCount",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).AckCount(ctx, req.(*QueryAckCountRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_Checkpoint_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryCheckpointRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).Checkpoint(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/heimdallv2.checkpoint.v1.Query/Checkpoint",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).Checkpoint(ctx, req.(*QueryCheckpointRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_CheckpointLatest_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryCheckpointLatestRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).CheckpointLatest(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/heimdallv2.checkpoint.v1.Query/CheckpointLatest",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).CheckpointLatest(ctx, req.(*QueryCheckpointLatestRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_CheckpointBuffer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryCheckpointBufferRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).CheckpointBuffer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/heimdallv2.checkpoint.v1.Query/CheckpointBuffer",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).CheckpointBuffer(ctx, req.(*QueryCheckpointBufferRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_LastNoAck_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryLastNoAckRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).LastNoAck(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/heimdallv2.checkpoint.v1.Query/LastNoAck",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).LastNoAck(ctx, req.(*QueryLastNoAckRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_NextCheckpoint_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryNextCheckpointRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).NextCheckpoint(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/heimdallv2.checkpoint.v1.Query/NextCheckpoint",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).NextCheckpoint(ctx, req.(*QueryNextCheckpointRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_CurrentProposer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryCurrentProposerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).CurrentProposer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/heimdallv2.checkpoint.v1.Query/CurrentProposer",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).CurrentProposer(ctx, req.(*QueryCurrentProposerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_Proposer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryProposerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).Proposer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/heimdallv2.checkpoint.v1.Query/Proposer",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).Proposer(ctx, req.(*QueryProposerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Query_serviceDesc = grpc.ServiceDesc{
	ServiceName: "heimdallv2.checkpoint.v1.Query",
	HandlerType: (*QueryServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Params",
			Handler:    _Query_Params_Handler,
		},
		{
			MethodName: "AckCount",
			Handler:    _Query_AckCount_Handler,
		},
		{
			MethodName: "Checkpoint",
			Handler:    _Query_Checkpoint_Handler,
		},
		{
			MethodName: "CheckpointLatest",
			Handler:    _Query_CheckpointLatest_Handler,
		},
		{
			MethodName: "CheckpointBuffer",
			Handler:    _Query_CheckpointBuffer_Handler,
		},
		{
			MethodName: "LastNoAck",
			Handler:    _Query_LastNoAck_Handler,
		},
		{
			MethodName: "NextCheckpoint",
			Handler:    _Query_NextCheckpoint_Handler,
		},
		{
			MethodName: "CurrentProposer",
			Handler:    _Query_CurrentProposer_Handler,
		},
		{
			MethodName: "Proposer",
			Handler:    _Query_Proposer_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "heimdallv2/checkpoint/v1/query.proto",
}

func (m *QueryParamsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryParamsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryParamsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *QueryParamsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryParamsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryParamsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.Params.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryAckCountRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAckCountRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAckCountRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *QueryAckCountResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAckCountResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAckCountResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Count != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.Count))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *QueryLastNoAckRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryLastNoAckRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryLastNoAckRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *QueryLastNoAckResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryLastNoAckResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryLastNoAckResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Result != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.Result))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *QueryCheckpointBufferRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryCheckpointBufferRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryCheckpointBufferRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *QueryCheckpointBufferResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryCheckpointBufferResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryCheckpointBufferResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.Checkpoint.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryCheckpointRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryCheckpointRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryCheckpointRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Number != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.Number))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *QueryCheckpointResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryCheckpointResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryCheckpointResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.Checkpoint.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryCheckpointLatestRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryCheckpointLatestRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryCheckpointLatestRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *QueryCheckpointLatestResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryCheckpointLatestResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryCheckpointLatestResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.Checkpoint.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryNextCheckpointRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryNextCheckpointRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryNextCheckpointRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.BorChainId) > 0 {
		i -= len(m.BorChainId)
		copy(dAtA[i:], m.BorChainId)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.BorChainId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryNextCheckpointResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryNextCheckpointResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryNextCheckpointResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.Checkpoint.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryCurrentProposerRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryCurrentProposerRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryCurrentProposerRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *QueryCurrentProposerResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryCurrentProposerResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryCurrentProposerResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.Validator.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryProposerRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryProposerRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryProposerRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Times != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.Times))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *QueryProposerResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryProposerResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryProposerResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Proposers) > 0 {
		for iNdEx := len(m.Proposers) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Proposers[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func encodeVarintQuery(dAtA []byte, offset int, v uint64) int {
	offset -= sovQuery(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *QueryParamsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *QueryParamsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Params.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryAckCountRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *QueryAckCountResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Count != 0 {
		n += 1 + sovQuery(uint64(m.Count))
	}
	return n
}

func (m *QueryLastNoAckRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *QueryLastNoAckResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Result != 0 {
		n += 1 + sovQuery(uint64(m.Result))
	}
	return n
}

func (m *QueryCheckpointBufferRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *QueryCheckpointBufferResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Checkpoint.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryCheckpointRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Number != 0 {
		n += 1 + sovQuery(uint64(m.Number))
	}
	return n
}

func (m *QueryCheckpointResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Checkpoint.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryCheckpointLatestRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *QueryCheckpointLatestResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Checkpoint.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryNextCheckpointRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.BorChainId)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryNextCheckpointResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Checkpoint.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryCurrentProposerRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *QueryCurrentProposerResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Validator.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryProposerRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Times != 0 {
		n += 1 + sovQuery(uint64(m.Times))
	}
	return n
}

func (m *QueryProposerResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Proposers) > 0 {
		for _, e := range m.Proposers {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	return n
}

func sovQuery(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozQuery(x uint64) (n int) {
	return sovQuery(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *QueryParamsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryParamsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryParamsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryParamsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryParamsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryParamsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Params", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Params.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAckCountRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAckCountRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAckCountRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAckCountResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAckCountResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAckCountResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Count", wireType)
			}
			m.Count = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Count |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryLastNoAckRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryLastNoAckRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryLastNoAckRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryLastNoAckResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryLastNoAckResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryLastNoAckResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Result", wireType)
			}
			m.Result = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Result |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryCheckpointBufferRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryCheckpointBufferRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryCheckpointBufferRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryCheckpointBufferResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryCheckpointBufferResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryCheckpointBufferResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Checkpoint", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Checkpoint.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryCheckpointRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryCheckpointRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryCheckpointRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Number", wireType)
			}
			m.Number = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Number |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryCheckpointResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryCheckpointResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryCheckpointResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Checkpoint", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Checkpoint.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryCheckpointLatestRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryCheckpointLatestRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryCheckpointLatestRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryCheckpointLatestResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryCheckpointLatestResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryCheckpointLatestResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Checkpoint", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Checkpoint.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryNextCheckpointRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryNextCheckpointRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryNextCheckpointRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BorChainId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BorChainId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryNextCheckpointResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryNextCheckpointResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryNextCheckpointResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Checkpoint", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Checkpoint.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryCurrentProposerRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryCurrentProposerRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryCurrentProposerRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryCurrentProposerResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryCurrentProposerResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryCurrentProposerResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Validator", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Validator.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryProposerRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryProposerRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryProposerRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Times", wireType)
			}
			m.Times = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Times |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryProposerResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryProposerResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryProposerResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Proposers", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Proposers = append(m.Proposers, types.Validator{})
			if err := m.Proposers[len(m.Proposers)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipQuery(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthQuery
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupQuery
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthQuery
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthQuery        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowQuery          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupQuery = fmt.Errorf("proto: unexpected end of group")
)
