// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: heimdallv2/clerk/v1beta1/genesis.proto

package types

import (
	fmt "fmt"
	types "github.com/0xPolygon/heimdall-v2/types"
	_ "github.com/cosmos/cosmos-proto"
	_ "github.com/cosmos/cosmos-sdk/types/tx/amino"
	_ "github.com/cosmos/gogoproto/gogoproto"
	proto "github.com/cosmos/gogoproto/proto"
	github_com_cosmos_gogoproto_types "github.com/cosmos/gogoproto/types"
	_ "google.golang.org/protobuf/types/known/timestamppb"
	io "io"
	math "math"
	math_bits "math/bits"
	time "time"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf
var _ = time.Kitchen

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// GenesisState defines the clerk module's genesis state.
type GenesisState struct {
	EventRecords    []*EventRecord `protobuf:"bytes,1,rep,name=event_records,json=eventRecords,proto3" json:"event_records,omitempty"`
	RecordSequences []string       `protobuf:"bytes,2,rep,name=record_sequences,json=recordSequences,proto3" json:"record_sequences,omitempty"`
}

func (m *GenesisState) Reset()         { *m = GenesisState{} }
func (m *GenesisState) String() string { return proto.CompactTextString(m) }
func (*GenesisState) ProtoMessage()    {}
func (*GenesisState) Descriptor() ([]byte, []int) {
	return fileDescriptor_b65b1f4af56a22db, []int{0}
}
func (m *GenesisState) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GenesisState) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GenesisState.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GenesisState) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GenesisState.Merge(m, src)
}
func (m *GenesisState) XXX_Size() int {
	return m.Size()
}
func (m *GenesisState) XXX_DiscardUnknown() {
	xxx_messageInfo_GenesisState.DiscardUnknown(m)
}

var xxx_messageInfo_GenesisState proto.InternalMessageInfo

func (m *GenesisState) GetEventRecords() []*EventRecord {
	if m != nil {
		return m.EventRecords
	}
	return nil
}

func (m *GenesisState) GetRecordSequences() []string {
	if m != nil {
		return m.RecordSequences
	}
	return nil
}

type EventRecord struct {
	ID         uint64             `protobuf:"varint,1,opt,name=i_d,json=iD,proto3" json:"i_d,omitempty"`
	Contract   string             `protobuf:"bytes,2,opt,name=contract,proto3" json:"contract,omitempty"`
	Data       types.HexBytes     `protobuf:"bytes,3,opt,name=data,proto3" json:"data"`
	TxHash     types.HeimdallHash `protobuf:"bytes,4,opt,name=tx_hash,json=txHash,proto3" json:"tx_hash"`
	LogIndex   uint64             `protobuf:"varint,5,opt,name=log_index,json=logIndex,proto3" json:"log_index,omitempty"`
	BorChainID string             `protobuf:"bytes,6,opt,name=bor_chain_i_d,json=borChainID,proto3" json:"bor_chain_i_d,omitempty"`
	RecordTime time.Time          `protobuf:"bytes,7,opt,name=record_time,json=recordTime,proto3,stdtime" json:"record_time"`
}

func (m *EventRecord) Reset()         { *m = EventRecord{} }
func (m *EventRecord) String() string { return proto.CompactTextString(m) }
func (*EventRecord) ProtoMessage()    {}
func (*EventRecord) Descriptor() ([]byte, []int) {
	return fileDescriptor_b65b1f4af56a22db, []int{1}
}
func (m *EventRecord) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *EventRecord) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_EventRecord.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *EventRecord) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EventRecord.Merge(m, src)
}
func (m *EventRecord) XXX_Size() int {
	return m.Size()
}
func (m *EventRecord) XXX_DiscardUnknown() {
	xxx_messageInfo_EventRecord.DiscardUnknown(m)
}

var xxx_messageInfo_EventRecord proto.InternalMessageInfo

func init() {
	proto.RegisterType((*GenesisState)(nil), "heimdallv2.clerk.v1beta1.GenesisState")
	proto.RegisterType((*EventRecord)(nil), "heimdallv2.clerk.v1beta1.EventRecord")
}

func init() {
	proto.RegisterFile("heimdallv2/clerk/v1beta1/genesis.proto", fileDescriptor_b65b1f4af56a22db)
}

var fileDescriptor_b65b1f4af56a22db = []byte{
	// 542 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x74, 0x93, 0x31, 0x6f, 0xd3, 0x40,
	0x14, 0xc7, 0x7d, 0x49, 0x48, 0x93, 0x4b, 0xab, 0x52, 0xab, 0x83, 0x09, 0xc2, 0x36, 0x95, 0x40,
	0x51, 0xa5, 0xfa, 0x68, 0xe8, 0x02, 0x12, 0x03, 0xa1, 0x15, 0xe9, 0x86, 0x1c, 0x58, 0x58, 0xac,
	0xb3, 0x7d, 0xd8, 0x27, 0x6c, 0x5f, 0xf0, 0x5d, 0x22, 0xe7, 0x1b, 0x20, 0xa6, 0xee, 0x2c, 0x1d,
	0x19, 0x3b, 0xf0, 0x21, 0x32, 0x56, 0x4c, 0x4c, 0x05, 0x25, 0x43, 0xf9, 0x02, 0xec, 0xc8, 0x77,
	0x0e, 0xcd, 0x00, 0x8b, 0xe5, 0xf7, 0xee, 0xf7, 0xee, 0xde, 0xff, 0x7f, 0xef, 0xe0, 0xc3, 0x98,
	0xd0, 0x34, 0xc4, 0x49, 0x32, 0xed, 0xa3, 0x20, 0x21, 0xf9, 0x7b, 0x34, 0x3d, 0xf4, 0x89, 0xc0,
	0x87, 0x28, 0x22, 0x19, 0xe1, 0x94, 0x3b, 0xe3, 0x9c, 0x09, 0xa6, 0x1b, 0x37, 0x9c, 0x23, 0x39,
	0xa7, 0xe2, 0xba, 0xbb, 0x11, 0x8b, 0x98, 0x84, 0x50, 0xf9, 0xa7, 0xf8, 0xee, 0x0e, 0x4e, 0x69,
	0xc6, 0x90, 0xfc, 0x56, 0xa9, 0x3b, 0x01, 0xe3, 0x29, 0xe3, 0x9e, 0x62, 0x55, 0x50, 0x2d, 0x59,
	0x11, 0x63, 0x51, 0x42, 0x90, 0x8c, 0xfc, 0xc9, 0x3b, 0x24, 0x68, 0x4a, 0xb8, 0xc0, 0xe9, 0xb8,
	0x02, 0xec, 0xb5, 0x36, 0xc5, 0x6c, 0x4c, 0x38, 0x9a, 0xe2, 0x84, 0x86, 0x58, 0xb0, 0x5c, 0x11,
	0x7b, 0x9f, 0x01, 0xdc, 0x7c, 0xa9, 0x5a, 0x1e, 0x09, 0x2c, 0x88, 0xfe, 0x06, 0x6e, 0x91, 0x29,
	0xc9, 0x84, 0x97, 0x93, 0x80, 0xe5, 0x21, 0x37, 0x80, 0x5d, 0xef, 0x75, 0xfa, 0x0f, 0x9c, 0xff,
	0x29, 0x71, 0x4e, 0x4a, 0xdc, 0x95, 0xf4, 0xa0, 0x3d, 0xbf, 0xb2, 0xc0, 0x97, 0xeb, 0x8b, 0x7d,
	0xe0, 0x6e, 0x92, 0x9b, 0x3c, 0xd7, 0x8f, 0xe0, 0x6d, 0xb5, 0xa1, 0xc7, 0xc9, 0x87, 0x09, 0xc9,
	0x02, 0xc2, 0x8d, 0x9a, 0x5d, 0xef, 0xb5, 0xd7, 0x4b, 0xb6, 0x15, 0x32, 0x5a, 0x11, 0x7b, 0xbf,
	0x6b, 0xb0, 0xb3, 0xb6, 0xbd, 0xbe, 0x0d, 0xeb, 0xd4, 0x0b, 0x0d, 0x60, 0x83, 0x5e, 0xc3, 0xad,
	0xd1, 0x63, 0xfd, 0x09, 0x6c, 0x05, 0x2c, 0x13, 0x39, 0x0e, 0x84, 0x51, 0xb3, 0x41, 0xaf, 0x3d,
	0xb8, 0xf7, 0xed, 0xeb, 0xc1, 0x6e, 0xe5, 0xd2, 0xf3, 0x30, 0xcc, 0x09, 0xe7, 0x23, 0x91, 0xd3,
	0x2c, 0x52, 0x47, 0xfc, 0xc5, 0xf5, 0x23, 0xd8, 0x08, 0xb1, 0xc0, 0x46, 0xdd, 0x06, 0xbd, 0x4e,
	0xbf, 0xbb, 0xae, 0x4f, 0x5a, 0xe5, 0x0c, 0x49, 0x31, 0x98, 0x09, 0xc2, 0x07, 0x8d, 0xf9, 0x95,
	0xa5, 0xb9, 0x92, 0xd6, 0x9f, 0xc1, 0x0d, 0x51, 0x78, 0x31, 0xe6, 0xb1, 0xd1, 0x90, 0x85, 0xe6,
	0xbf, 0x0a, 0x55, 0x62, 0x88, 0x79, 0x5c, 0x15, 0x37, 0x45, 0x51, 0x46, 0xfa, 0x5d, 0xd8, 0x4e,
	0x58, 0xe4, 0xd1, 0x2c, 0x24, 0x85, 0x71, 0x4b, 0xca, 0x68, 0x25, 0x2c, 0x3a, 0x2d, 0x63, 0xfd,
	0x3e, 0xdc, 0xf2, 0x59, 0xee, 0x05, 0x31, 0xa6, 0x99, 0x57, 0xea, 0x6c, 0x96, 0x8a, 0x5c, 0xe8,
	0xb3, 0xfc, 0x45, 0x99, 0x3b, 0x3d, 0xd6, 0x4f, 0x60, 0xa7, 0xb2, 0xb1, 0xbc, 0x6a, 0x63, 0xa3,
	0xea, 0x5d, 0xcd, 0x81, 0xb3, 0x9a, 0x03, 0xe7, 0xf5, 0x6a, 0x0e, 0x06, 0xad, 0xf2, 0xf8, 0xb3,
	0x1f, 0x16, 0x70, 0xa1, 0x2a, 0x2c, 0x97, 0x9e, 0x9a, 0x1f, 0xcf, 0x2d, 0xed, 0xd7, 0xb9, 0xa5,
	0x7d, 0xba, 0xbe, 0xd8, 0xdf, 0x51, 0x03, 0xbc, 0x7e, 0x8d, 0xc3, 0xf9, 0xc2, 0x04, 0x97, 0x0b,
	0x13, 0xfc, 0x5c, 0x98, 0xe0, 0x6c, 0x69, 0x6a, 0x97, 0x4b, 0x53, 0xfb, 0xbe, 0x34, 0xb5, 0xb7,
	0x4e, 0x44, 0x45, 0x3c, 0xf1, 0x9d, 0x80, 0xa5, 0xe8, 0x51, 0xf1, 0x8a, 0x25, 0xb3, 0x88, 0x65,
	0x68, 0x65, 0xc1, 0xc1, 0xb4, 0x8f, 0x8a, 0xea, 0x41, 0x48, 0x2f, 0xfc, 0xa6, 0xec, 0xe9, 0xf1,
	0x9f, 0x00, 0x00, 0x00, 0xff, 0xff, 0x11, 0x4e, 0x81, 0xb5, 0x31, 0x03, 0x00, 0x00,
}

func (m *GenesisState) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GenesisState) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GenesisState) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.RecordSequences) > 0 {
		for iNdEx := len(m.RecordSequences) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.RecordSequences[iNdEx])
			copy(dAtA[i:], m.RecordSequences[iNdEx])
			i = encodeVarintGenesis(dAtA, i, uint64(len(m.RecordSequences[iNdEx])))
			i--
			dAtA[i] = 0x12
		}
	}
	if len(m.EventRecords) > 0 {
		for iNdEx := len(m.EventRecords) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.EventRecords[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintGenesis(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *EventRecord) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EventRecord) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *EventRecord) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	n1, err1 := github_com_cosmos_gogoproto_types.StdTimeMarshalTo(m.RecordTime, dAtA[i-github_com_cosmos_gogoproto_types.SizeOfStdTime(m.RecordTime):])
	if err1 != nil {
		return 0, err1
	}
	i -= n1
	i = encodeVarintGenesis(dAtA, i, uint64(n1))
	i--
	dAtA[i] = 0x3a
	if len(m.BorChainID) > 0 {
		i -= len(m.BorChainID)
		copy(dAtA[i:], m.BorChainID)
		i = encodeVarintGenesis(dAtA, i, uint64(len(m.BorChainID)))
		i--
		dAtA[i] = 0x32
	}
	if m.LogIndex != 0 {
		i = encodeVarintGenesis(dAtA, i, uint64(m.LogIndex))
		i--
		dAtA[i] = 0x28
	}
	{
		size, err := m.TxHash.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintGenesis(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x22
	{
		size, err := m.Data.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintGenesis(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x1a
	if len(m.Contract) > 0 {
		i -= len(m.Contract)
		copy(dAtA[i:], m.Contract)
		i = encodeVarintGenesis(dAtA, i, uint64(len(m.Contract)))
		i--
		dAtA[i] = 0x12
	}
	if m.ID != 0 {
		i = encodeVarintGenesis(dAtA, i, uint64(m.ID))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintGenesis(dAtA []byte, offset int, v uint64) int {
	offset -= sovGenesis(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *GenesisState) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.EventRecords) > 0 {
		for _, e := range m.EventRecords {
			l = e.Size()
			n += 1 + l + sovGenesis(uint64(l))
		}
	}
	if len(m.RecordSequences) > 0 {
		for _, s := range m.RecordSequences {
			l = len(s)
			n += 1 + l + sovGenesis(uint64(l))
		}
	}
	return n
}

func (m *EventRecord) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ID != 0 {
		n += 1 + sovGenesis(uint64(m.ID))
	}
	l = len(m.Contract)
	if l > 0 {
		n += 1 + l + sovGenesis(uint64(l))
	}
	l = m.Data.Size()
	n += 1 + l + sovGenesis(uint64(l))
	l = m.TxHash.Size()
	n += 1 + l + sovGenesis(uint64(l))
	if m.LogIndex != 0 {
		n += 1 + sovGenesis(uint64(m.LogIndex))
	}
	l = len(m.BorChainID)
	if l > 0 {
		n += 1 + l + sovGenesis(uint64(l))
	}
	l = github_com_cosmos_gogoproto_types.SizeOfStdTime(m.RecordTime)
	n += 1 + l + sovGenesis(uint64(l))
	return n
}

func sovGenesis(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozGenesis(x uint64) (n int) {
	return sovGenesis(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *GenesisState) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGenesis
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GenesisState: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GenesisState: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EventRecords", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenesis
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.EventRecords = append(m.EventRecords, &EventRecord{})
			if err := m.EventRecords[len(m.EventRecords)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RecordSequences", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenesis
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RecordSequences = append(m.RecordSequences, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGenesis(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGenesis
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *EventRecord) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGenesis
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EventRecord: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EventRecord: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ID", wireType)
			}
			m.ID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ID |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Contract", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenesis
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Contract = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Data", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenesis
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Data.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TxHash", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenesis
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.TxHash.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LogIndex", wireType)
			}
			m.LogIndex = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.LogIndex |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BorChainID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGenesis
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BorChainID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RecordTime", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGenesis
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGenesis
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := github_com_cosmos_gogoproto_types.StdTimeUnmarshal(&m.RecordTime, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGenesis(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthGenesis
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipGenesis(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowGenesis
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowGenesis
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthGenesis
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupGenesis
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthGenesis
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthGenesis        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowGenesis          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupGenesis = fmt.Errorf("proto: unexpected end of group")
)
