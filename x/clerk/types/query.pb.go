// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: heimdallv2/clerk/v1beta1/query.proto

package types

import (
	context "context"
	fmt "fmt"
	_ "github.com/cosmos/cosmos-sdk/types/query"
	_ "github.com/cosmos/gogoproto/gogoproto"
	grpc1 "github.com/cosmos/gogoproto/grpc"
	proto "github.com/cosmos/gogoproto/proto"
	github_com_cosmos_gogoproto_types "github.com/cosmos/gogoproto/types"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	_ "google.golang.org/protobuf/types/known/timestamppb"
	io "io"
	math "math"
	math_bits "math/bits"
	time "time"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf
var _ = time.Kitchen

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type NewQueryRecordParamsRequest struct {
	RecordID uint64 `protobuf:"varint,1,opt,name=record_i_d,json=recordID,proto3" json:"record_i_d,omitempty"`
}

func (m *NewQueryRecordParamsRequest) Reset()         { *m = NewQueryRecordParamsRequest{} }
func (m *NewQueryRecordParamsRequest) String() string { return proto.CompactTextString(m) }
func (*NewQueryRecordParamsRequest) ProtoMessage()    {}
func (*NewQueryRecordParamsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_f561213cfa77c154, []int{0}
}
func (m *NewQueryRecordParamsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *NewQueryRecordParamsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_NewQueryRecordParamsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *NewQueryRecordParamsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NewQueryRecordParamsRequest.Merge(m, src)
}
func (m *NewQueryRecordParamsRequest) XXX_Size() int {
	return m.Size()
}
func (m *NewQueryRecordParamsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_NewQueryRecordParamsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_NewQueryRecordParamsRequest proto.InternalMessageInfo

func (m *NewQueryRecordParamsRequest) GetRecordID() uint64 {
	if m != nil {
		return m.RecordID
	}
	return 0
}

// QueryRecordParams defines the params for querying accounts.
type QueryRecordParams struct {
	RecordID uint64 `protobuf:"varint,1,opt,name=record_i_d,json=recordID,proto3" json:"record_i_d,omitempty"`
}

func (m *QueryRecordParams) Reset()         { *m = QueryRecordParams{} }
func (m *QueryRecordParams) String() string { return proto.CompactTextString(m) }
func (*QueryRecordParams) ProtoMessage()    {}
func (*QueryRecordParams) Descriptor() ([]byte, []int) {
	return fileDescriptor_f561213cfa77c154, []int{1}
}
func (m *QueryRecordParams) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryRecordParams) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryRecordParams.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryRecordParams) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryRecordParams.Merge(m, src)
}
func (m *QueryRecordParams) XXX_Size() int {
	return m.Size()
}
func (m *QueryRecordParams) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryRecordParams.DiscardUnknown(m)
}

var xxx_messageInfo_QueryRecordParams proto.InternalMessageInfo

func (m *QueryRecordParams) GetRecordID() uint64 {
	if m != nil {
		return m.RecordID
	}
	return 0
}

type NewQueryRecordSequenceParamsRequest struct {
	TxHash   string `protobuf:"bytes,1,opt,name=tx_hash,json=txHash,proto3" json:"tx_hash,omitempty"`
	LogIndex uint64 `protobuf:"varint,2,opt,name=log_index,json=logIndex,proto3" json:"log_index,omitempty"`
}

func (m *NewQueryRecordSequenceParamsRequest) Reset()         { *m = NewQueryRecordSequenceParamsRequest{} }
func (m *NewQueryRecordSequenceParamsRequest) String() string { return proto.CompactTextString(m) }
func (*NewQueryRecordSequenceParamsRequest) ProtoMessage()    {}
func (*NewQueryRecordSequenceParamsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_f561213cfa77c154, []int{2}
}
func (m *NewQueryRecordSequenceParamsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *NewQueryRecordSequenceParamsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_NewQueryRecordSequenceParamsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *NewQueryRecordSequenceParamsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NewQueryRecordSequenceParamsRequest.Merge(m, src)
}
func (m *NewQueryRecordSequenceParamsRequest) XXX_Size() int {
	return m.Size()
}
func (m *NewQueryRecordSequenceParamsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_NewQueryRecordSequenceParamsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_NewQueryRecordSequenceParamsRequest proto.InternalMessageInfo

func (m *NewQueryRecordSequenceParamsRequest) GetTxHash() string {
	if m != nil {
		return m.TxHash
	}
	return ""
}

func (m *NewQueryRecordSequenceParamsRequest) GetLogIndex() uint64 {
	if m != nil {
		return m.LogIndex
	}
	return 0
}

// QueryRecordSequenceParams defines the params for querying an account
// Sequence.
type QueryRecordSequenceParams struct {
	TxHash   string `protobuf:"bytes,1,opt,name=tx_hash,json=txHash,proto3" json:"tx_hash,omitempty"`
	LogIndex uint64 `protobuf:"varint,2,opt,name=log_index,json=logIndex,proto3" json:"log_index,omitempty"`
}

func (m *QueryRecordSequenceParams) Reset()         { *m = QueryRecordSequenceParams{} }
func (m *QueryRecordSequenceParams) String() string { return proto.CompactTextString(m) }
func (*QueryRecordSequenceParams) ProtoMessage()    {}
func (*QueryRecordSequenceParams) Descriptor() ([]byte, []int) {
	return fileDescriptor_f561213cfa77c154, []int{3}
}
func (m *QueryRecordSequenceParams) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryRecordSequenceParams) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryRecordSequenceParams.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryRecordSequenceParams) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryRecordSequenceParams.Merge(m, src)
}
func (m *QueryRecordSequenceParams) XXX_Size() int {
	return m.Size()
}
func (m *QueryRecordSequenceParams) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryRecordSequenceParams.DiscardUnknown(m)
}

var xxx_messageInfo_QueryRecordSequenceParams proto.InternalMessageInfo

func (m *QueryRecordSequenceParams) GetTxHash() string {
	if m != nil {
		return m.TxHash
	}
	return ""
}

func (m *QueryRecordSequenceParams) GetLogIndex() uint64 {
	if m != nil {
		return m.LogIndex
	}
	return 0
}

type NewQueryTimeRangePaginationParamsRequest struct {
	FromTime *time.Time `protobuf:"bytes,1,opt,name=from_time,json=fromTime,proto3,stdtime" json:"from_time,omitempty"`
	ToTime   *time.Time `protobuf:"bytes,2,opt,name=to_time,json=toTime,proto3,stdtime" json:"to_time,omitempty"`
	Page     uint64     `protobuf:"varint,3,opt,name=page,proto3" json:"page,omitempty"`
	Limit    uint64     `protobuf:"varint,4,opt,name=limit,proto3" json:"limit,omitempty"`
}

func (m *NewQueryTimeRangePaginationParamsRequest) Reset() {
	*m = NewQueryTimeRangePaginationParamsRequest{}
}
func (m *NewQueryTimeRangePaginationParamsRequest) String() string { return proto.CompactTextString(m) }
func (*NewQueryTimeRangePaginationParamsRequest) ProtoMessage()    {}
func (*NewQueryTimeRangePaginationParamsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_f561213cfa77c154, []int{4}
}
func (m *NewQueryTimeRangePaginationParamsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *NewQueryTimeRangePaginationParamsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_NewQueryTimeRangePaginationParamsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *NewQueryTimeRangePaginationParamsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NewQueryTimeRangePaginationParamsRequest.Merge(m, src)
}
func (m *NewQueryTimeRangePaginationParamsRequest) XXX_Size() int {
	return m.Size()
}
func (m *NewQueryTimeRangePaginationParamsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_NewQueryTimeRangePaginationParamsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_NewQueryTimeRangePaginationParamsRequest proto.InternalMessageInfo

func (m *NewQueryTimeRangePaginationParamsRequest) GetFromTime() *time.Time {
	if m != nil {
		return m.FromTime
	}
	return nil
}

func (m *NewQueryTimeRangePaginationParamsRequest) GetToTime() *time.Time {
	if m != nil {
		return m.ToTime
	}
	return nil
}

func (m *NewQueryTimeRangePaginationParamsRequest) GetPage() uint64 {
	if m != nil {
		return m.Page
	}
	return 0
}

func (m *NewQueryTimeRangePaginationParamsRequest) GetLimit() uint64 {
	if m != nil {
		return m.Limit
	}
	return 0
}

// QueryRecordTimePaginationParams defines the params for querying records with
// time.
type QueryRecordTimePaginationParams struct {
	FromTime *time.Time `protobuf:"bytes,1,opt,name=from_time,json=fromTime,proto3,stdtime" json:"from_time,omitempty"`
	ToTime   *time.Time `protobuf:"bytes,2,opt,name=to_time,json=toTime,proto3,stdtime" json:"to_time,omitempty"`
	Page     uint64     `protobuf:"varint,3,opt,name=page,proto3" json:"page,omitempty"`
	Limit    uint64     `protobuf:"varint,4,opt,name=limit,proto3" json:"limit,omitempty"`
}

func (m *QueryRecordTimePaginationParams) Reset()         { *m = QueryRecordTimePaginationParams{} }
func (m *QueryRecordTimePaginationParams) String() string { return proto.CompactTextString(m) }
func (*QueryRecordTimePaginationParams) ProtoMessage()    {}
func (*QueryRecordTimePaginationParams) Descriptor() ([]byte, []int) {
	return fileDescriptor_f561213cfa77c154, []int{5}
}
func (m *QueryRecordTimePaginationParams) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryRecordTimePaginationParams) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryRecordTimePaginationParams.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryRecordTimePaginationParams) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryRecordTimePaginationParams.Merge(m, src)
}
func (m *QueryRecordTimePaginationParams) XXX_Size() int {
	return m.Size()
}
func (m *QueryRecordTimePaginationParams) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryRecordTimePaginationParams.DiscardUnknown(m)
}

var xxx_messageInfo_QueryRecordTimePaginationParams proto.InternalMessageInfo

func (m *QueryRecordTimePaginationParams) GetFromTime() *time.Time {
	if m != nil {
		return m.FromTime
	}
	return nil
}

func (m *QueryRecordTimePaginationParams) GetToTime() *time.Time {
	if m != nil {
		return m.ToTime
	}
	return nil
}

func (m *QueryRecordTimePaginationParams) GetPage() uint64 {
	if m != nil {
		return m.Page
	}
	return 0
}

func (m *QueryRecordTimePaginationParams) GetLimit() uint64 {
	if m != nil {
		return m.Limit
	}
	return 0
}

func init() {
	proto.RegisterType((*NewQueryRecordParamsRequest)(nil), "heimdallv2.clerk.v1beta1.NewQueryRecordParamsRequest")
	proto.RegisterType((*QueryRecordParams)(nil), "heimdallv2.clerk.v1beta1.QueryRecordParams")
	proto.RegisterType((*NewQueryRecordSequenceParamsRequest)(nil), "heimdallv2.clerk.v1beta1.NewQueryRecordSequenceParamsRequest")
	proto.RegisterType((*QueryRecordSequenceParams)(nil), "heimdallv2.clerk.v1beta1.QueryRecordSequenceParams")
	proto.RegisterType((*NewQueryTimeRangePaginationParamsRequest)(nil), "heimdallv2.clerk.v1beta1.NewQueryTimeRangePaginationParamsRequest")
	proto.RegisterType((*QueryRecordTimePaginationParams)(nil), "heimdallv2.clerk.v1beta1.QueryRecordTimePaginationParams")
}

func init() {
	proto.RegisterFile("heimdallv2/clerk/v1beta1/query.proto", fileDescriptor_f561213cfa77c154)
}

var fileDescriptor_f561213cfa77c154 = []byte{
	// 617 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xd4, 0x54, 0x41, 0x6b, 0x13, 0x41,
	0x14, 0xee, 0xc4, 0x34, 0x4d, 0x46, 0x29, 0x75, 0xc8, 0x61, 0xdd, 0x84, 0x8d, 0x6e, 0x15, 0xda,
	0x4a, 0x77, 0x6c, 0x8a, 0x07, 0x0f, 0x22, 0x44, 0x91, 0x06, 0x44, 0xe2, 0x9a, 0x93, 0x97, 0x30,
	0xc9, 0x4e, 0x36, 0x43, 0x77, 0x77, 0xd2, 0xdd, 0x49, 0xdc, 0x5c, 0x3d, 0x79, 0x2c, 0xf8, 0x0b,
	0xfc, 0x01, 0x82, 0x7f, 0x40, 0xbc, 0x7a, 0x2c, 0x78, 0x11, 0x84, 0x2a, 0x49, 0xc1, 0xbf, 0x21,
	0x3b, 0xbb, 0x31, 0xc6, 0x26, 0x4d, 0x04, 0x2f, 0x9e, 0xf2, 0xe6, 0xed, 0x7b, 0xdf, 0xfb, 0xbe,
	0xbc, 0xf9, 0x06, 0xde, 0xec, 0x50, 0xe6, 0x5a, 0xc4, 0x71, 0xfa, 0x65, 0xdc, 0x72, 0xa8, 0x7f,
	0x88, 0xfb, 0x7b, 0x4d, 0x2a, 0xc8, 0x1e, 0x3e, 0xea, 0x51, 0x7f, 0x60, 0x74, 0x7d, 0x2e, 0x38,
	0x52, 0x26, 0x55, 0x86, 0xac, 0x32, 0x92, 0x2a, 0x35, 0x6f, 0x73, 0x9b, 0xcb, 0x22, 0x1c, 0x45,
	0x71, 0xbd, 0x5a, 0xb4, 0x39, 0xb7, 0x1d, 0x8a, 0x49, 0x97, 0x61, 0xe2, 0x79, 0x5c, 0x10, 0xc1,
	0xb8, 0x17, 0x24, 0x5f, 0x4b, 0xc9, 0x57, 0x79, 0x6a, 0xf6, 0xda, 0x58, 0x30, 0x97, 0x06, 0x82,
	0xb8, 0xdd, 0xa4, 0xa0, 0xd0, 0xe2, 0x81, 0xcb, 0x83, 0x98, 0x02, 0xee, 0x4f, 0x71, 0xd1, 0xab,
	0xb0, 0xf0, 0x94, 0xbe, 0x7c, 0x16, 0x65, 0x4c, 0xda, 0xe2, 0xbe, 0x55, 0x23, 0x3e, 0x71, 0x03,
	0x93, 0x1e, 0xf5, 0x68, 0x20, 0xd0, 0x0e, 0x84, 0xbe, 0x4c, 0x37, 0x58, 0xc3, 0x52, 0xc0, 0x75,
	0xb0, 0x95, 0xae, 0x5c, 0x19, 0x9e, 0x96, 0xb2, 0x71, 0x71, 0xf5, 0x91, 0x99, 0xf5, 0x93, 0x48,
	0x7f, 0x00, 0xaf, 0x9e, 0xc3, 0xf9, 0x2b, 0x80, 0x1e, 0xdc, 0x9c, 0xe6, 0xf2, 0x3c, 0x62, 0xe1,
	0xb5, 0xe8, 0x34, 0xa7, 0x4d, 0xb8, 0x26, 0xc2, 0x46, 0x87, 0x04, 0x1d, 0x89, 0x97, 0xab, 0xc0,
	0xe1, 0x69, 0x29, 0x53, 0x0f, 0x0f, 0x48, 0xd0, 0x31, 0x33, 0x42, 0xfe, 0xa2, 0x6d, 0x98, 0x73,
	0xb8, 0xdd, 0x60, 0x9e, 0x45, 0x43, 0x25, 0x35, 0x19, 0xfb, 0x84, 0xdb, 0xd5, 0x28, 0x67, 0x66,
	0x9d, 0x24, 0xd2, 0x0f, 0xe1, 0xb5, 0xb9, 0x33, 0xff, 0xf9, 0xb0, 0x33, 0x00, 0xb7, 0xc6, 0x22,
	0xeb, 0xcc, 0xa5, 0x26, 0xf1, 0x6c, 0x5a, 0x23, 0x36, 0xf3, 0xe4, 0x52, 0xa7, 0x95, 0x56, 0x61,
	0xae, 0xed, 0x73, 0xb7, 0x11, 0x6d, 0x54, 0x8e, 0xbf, 0x5c, 0x56, 0x8d, 0x78, 0xdd, 0xc6, 0x78,
	0xdd, 0x46, 0x7d, 0xbc, 0xee, 0xca, 0x46, 0x34, 0xf3, 0xb1, 0xcf, 0xdd, 0x28, 0x75, 0xfc, 0xad,
	0x04, 0xcc, 0x6c, 0x3b, 0x39, 0xa1, 0x87, 0x70, 0x4d, 0xf0, 0x18, 0x28, 0xb5, 0x10, 0x68, 0x5d,
	0x6a, 0xe4, 0xbf, 0x60, 0x32, 0x42, 0xc6, 0x08, 0xc1, 0x74, 0x97, 0xd8, 0x54, 0xb9, 0x14, 0x49,
	0x34, 0x65, 0x8c, 0xf2, 0x70, 0xd5, 0x61, 0x2e, 0x13, 0x4a, 0x5a, 0x26, 0xe3, 0x83, 0xfe, 0x15,
	0xc0, 0xd2, 0x6f, 0x7f, 0x6a, 0xd4, 0xfd, 0xa7, 0xc8, 0xff, 0x57, 0x5d, 0xf9, 0x5d, 0x1a, 0xae,
	0x4a, 0x75, 0xe8, 0x2d, 0x80, 0xf9, 0x59, 0xfe, 0x41, 0x77, 0x8d, 0x79, 0x26, 0x37, 0x2e, 0xf0,
	0x9b, 0x7a, 0x7b, 0x7e, 0xdb, 0xb9, 0x1e, 0xfd, 0xd6, 0xeb, 0x1f, 0xef, 0x77, 0xc0, 0xab, 0xcf,
	0x67, 0x6f, 0x52, 0x2a, 0x52, 0x92, 0x07, 0x87, 0xf6, 0xa9, 0x27, 0x76, 0x63, 0x4f, 0x61, 0x87,
	0x05, 0x02, 0x7d, 0x00, 0xb0, 0x78, 0x91, 0xaf, 0xd0, 0xfd, 0x65, 0xb9, 0xce, 0xf4, 0xa3, 0xba,
	0xbf, 0x14, 0xe7, 0xe9, 0x5e, 0x7d, 0x7b, 0xc2, 0x5d, 0x43, 0xc5, 0x59, 0xdc, 0x93, 0x67, 0xc1,
	0x42, 0x1f, 0x01, 0xbc, 0xb1, 0xd0, 0x32, 0xa8, 0xb2, 0x58, 0xc4, 0x22, 0xbf, 0xa9, 0xf7, 0x96,
	0x52, 0x32, 0xeb, 0x32, 0xeb, 0x85, 0x89, 0x9e, 0x0d, 0xb4, 0x9e, 0xe8, 0x61, 0x01, 0x77, 0x2c,
	0x11, 0x56, 0x0e, 0x3e, 0x0d, 0x35, 0x70, 0x32, 0xd4, 0xc0, 0xf7, 0xa1, 0x06, 0x8e, 0x47, 0xda,
	0xca, 0xc9, 0x48, 0x5b, 0xf9, 0x32, 0xd2, 0x56, 0x5e, 0x18, 0x36, 0x13, 0x9d, 0x5e, 0xd3, 0x68,
	0x71, 0x17, 0xdf, 0x09, 0x6b, 0xdc, 0x19, 0xd8, 0xdc, 0xc3, 0x63, 0x16, 0xbb, 0xfd, 0x32, 0x0e,
	0x13, 0x2c, 0x31, 0xe8, 0xd2, 0xa0, 0x99, 0x91, 0xf7, 0x79, 0xff, 0x67, 0x00, 0x00, 0x00, 0xff,
	0xff, 0x19, 0x73, 0xb4, 0x91, 0x69, 0x06, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// QueryClient is the client API for Query service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type QueryClient interface {
	// TODO HV2 - check url
	NewQueryRecordParams(ctx context.Context, in *NewQueryRecordParamsRequest, opts ...grpc.CallOption) (*QueryRecordParams, error)
	// TODO HV2 - check url
	NewQueryRecordSequenceParams(ctx context.Context, in *NewQueryRecordSequenceParamsRequest, opts ...grpc.CallOption) (*QueryRecordSequenceParams, error)
	// TODO HV2 - check url
	NewQueryTimeRangePaginationParams(ctx context.Context, in *NewQueryTimeRangePaginationParamsRequest, opts ...grpc.CallOption) (*QueryRecordTimePaginationParams, error)
}

type queryClient struct {
	cc grpc1.ClientConn
}

func NewQueryClient(cc grpc1.ClientConn) QueryClient {
	return &queryClient{cc}
}

func (c *queryClient) NewQueryRecordParams(ctx context.Context, in *NewQueryRecordParamsRequest, opts ...grpc.CallOption) (*QueryRecordParams, error) {
	out := new(QueryRecordParams)
	err := c.cc.Invoke(ctx, "/heimdallv2.clerk.v1beta1.Query/NewQueryRecordParams", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) NewQueryRecordSequenceParams(ctx context.Context, in *NewQueryRecordSequenceParamsRequest, opts ...grpc.CallOption) (*QueryRecordSequenceParams, error) {
	out := new(QueryRecordSequenceParams)
	err := c.cc.Invoke(ctx, "/heimdallv2.clerk.v1beta1.Query/NewQueryRecordSequenceParams", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) NewQueryTimeRangePaginationParams(ctx context.Context, in *NewQueryTimeRangePaginationParamsRequest, opts ...grpc.CallOption) (*QueryRecordTimePaginationParams, error) {
	out := new(QueryRecordTimePaginationParams)
	err := c.cc.Invoke(ctx, "/heimdallv2.clerk.v1beta1.Query/NewQueryTimeRangePaginationParams", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// QueryServer is the server API for Query service.
type QueryServer interface {
	// TODO HV2 - check url
	NewQueryRecordParams(context.Context, *NewQueryRecordParamsRequest) (*QueryRecordParams, error)
	// TODO HV2 - check url
	NewQueryRecordSequenceParams(context.Context, *NewQueryRecordSequenceParamsRequest) (*QueryRecordSequenceParams, error)
	// TODO HV2 - check url
	NewQueryTimeRangePaginationParams(context.Context, *NewQueryTimeRangePaginationParamsRequest) (*QueryRecordTimePaginationParams, error)
}

// UnimplementedQueryServer can be embedded to have forward compatible implementations.
type UnimplementedQueryServer struct {
}

func (*UnimplementedQueryServer) NewQueryRecordParams(ctx context.Context, req *NewQueryRecordParamsRequest) (*QueryRecordParams, error) {
	return nil, status.Errorf(codes.Unimplemented, "method NewQueryRecordParams not implemented")
}
func (*UnimplementedQueryServer) NewQueryRecordSequenceParams(ctx context.Context, req *NewQueryRecordSequenceParamsRequest) (*QueryRecordSequenceParams, error) {
	return nil, status.Errorf(codes.Unimplemented, "method NewQueryRecordSequenceParams not implemented")
}
func (*UnimplementedQueryServer) NewQueryTimeRangePaginationParams(ctx context.Context, req *NewQueryTimeRangePaginationParamsRequest) (*QueryRecordTimePaginationParams, error) {
	return nil, status.Errorf(codes.Unimplemented, "method NewQueryTimeRangePaginationParams not implemented")
}

func RegisterQueryServer(s grpc1.Server, srv QueryServer) {
	s.RegisterService(&_Query_serviceDesc, srv)
}

func _Query_NewQueryRecordParams_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NewQueryRecordParamsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).NewQueryRecordParams(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/heimdallv2.clerk.v1beta1.Query/NewQueryRecordParams",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).NewQueryRecordParams(ctx, req.(*NewQueryRecordParamsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_NewQueryRecordSequenceParams_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NewQueryRecordSequenceParamsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).NewQueryRecordSequenceParams(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/heimdallv2.clerk.v1beta1.Query/NewQueryRecordSequenceParams",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).NewQueryRecordSequenceParams(ctx, req.(*NewQueryRecordSequenceParamsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_NewQueryTimeRangePaginationParams_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NewQueryTimeRangePaginationParamsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).NewQueryTimeRangePaginationParams(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/heimdallv2.clerk.v1beta1.Query/NewQueryTimeRangePaginationParams",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).NewQueryTimeRangePaginationParams(ctx, req.(*NewQueryTimeRangePaginationParamsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Query_serviceDesc = grpc.ServiceDesc{
	ServiceName: "heimdallv2.clerk.v1beta1.Query",
	HandlerType: (*QueryServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "NewQueryRecordParams",
			Handler:    _Query_NewQueryRecordParams_Handler,
		},
		{
			MethodName: "NewQueryRecordSequenceParams",
			Handler:    _Query_NewQueryRecordSequenceParams_Handler,
		},
		{
			MethodName: "NewQueryTimeRangePaginationParams",
			Handler:    _Query_NewQueryTimeRangePaginationParams_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "heimdallv2/clerk/v1beta1/query.proto",
}

func (m *NewQueryRecordParamsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *NewQueryRecordParamsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *NewQueryRecordParamsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.RecordID != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.RecordID))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *QueryRecordParams) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryRecordParams) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryRecordParams) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.RecordID != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.RecordID))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *NewQueryRecordSequenceParamsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *NewQueryRecordSequenceParamsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *NewQueryRecordSequenceParamsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.LogIndex != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.LogIndex))
		i--
		dAtA[i] = 0x10
	}
	if len(m.TxHash) > 0 {
		i -= len(m.TxHash)
		copy(dAtA[i:], m.TxHash)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.TxHash)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryRecordSequenceParams) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryRecordSequenceParams) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryRecordSequenceParams) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.LogIndex != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.LogIndex))
		i--
		dAtA[i] = 0x10
	}
	if len(m.TxHash) > 0 {
		i -= len(m.TxHash)
		copy(dAtA[i:], m.TxHash)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.TxHash)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *NewQueryTimeRangePaginationParamsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *NewQueryTimeRangePaginationParamsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *NewQueryTimeRangePaginationParamsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Limit != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.Limit))
		i--
		dAtA[i] = 0x20
	}
	if m.Page != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.Page))
		i--
		dAtA[i] = 0x18
	}
	if m.ToTime != nil {
		n1, err1 := github_com_cosmos_gogoproto_types.StdTimeMarshalTo(*m.ToTime, dAtA[i-github_com_cosmos_gogoproto_types.SizeOfStdTime(*m.ToTime):])
		if err1 != nil {
			return 0, err1
		}
		i -= n1
		i = encodeVarintQuery(dAtA, i, uint64(n1))
		i--
		dAtA[i] = 0x12
	}
	if m.FromTime != nil {
		n2, err2 := github_com_cosmos_gogoproto_types.StdTimeMarshalTo(*m.FromTime, dAtA[i-github_com_cosmos_gogoproto_types.SizeOfStdTime(*m.FromTime):])
		if err2 != nil {
			return 0, err2
		}
		i -= n2
		i = encodeVarintQuery(dAtA, i, uint64(n2))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryRecordTimePaginationParams) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryRecordTimePaginationParams) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryRecordTimePaginationParams) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Limit != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.Limit))
		i--
		dAtA[i] = 0x20
	}
	if m.Page != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.Page))
		i--
		dAtA[i] = 0x18
	}
	if m.ToTime != nil {
		n3, err3 := github_com_cosmos_gogoproto_types.StdTimeMarshalTo(*m.ToTime, dAtA[i-github_com_cosmos_gogoproto_types.SizeOfStdTime(*m.ToTime):])
		if err3 != nil {
			return 0, err3
		}
		i -= n3
		i = encodeVarintQuery(dAtA, i, uint64(n3))
		i--
		dAtA[i] = 0x12
	}
	if m.FromTime != nil {
		n4, err4 := github_com_cosmos_gogoproto_types.StdTimeMarshalTo(*m.FromTime, dAtA[i-github_com_cosmos_gogoproto_types.SizeOfStdTime(*m.FromTime):])
		if err4 != nil {
			return 0, err4
		}
		i -= n4
		i = encodeVarintQuery(dAtA, i, uint64(n4))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintQuery(dAtA []byte, offset int, v uint64) int {
	offset -= sovQuery(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *NewQueryRecordParamsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.RecordID != 0 {
		n += 1 + sovQuery(uint64(m.RecordID))
	}
	return n
}

func (m *QueryRecordParams) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.RecordID != 0 {
		n += 1 + sovQuery(uint64(m.RecordID))
	}
	return n
}

func (m *NewQueryRecordSequenceParamsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.TxHash)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	if m.LogIndex != 0 {
		n += 1 + sovQuery(uint64(m.LogIndex))
	}
	return n
}

func (m *QueryRecordSequenceParams) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.TxHash)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	if m.LogIndex != 0 {
		n += 1 + sovQuery(uint64(m.LogIndex))
	}
	return n
}

func (m *NewQueryTimeRangePaginationParamsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.FromTime != nil {
		l = github_com_cosmos_gogoproto_types.SizeOfStdTime(*m.FromTime)
		n += 1 + l + sovQuery(uint64(l))
	}
	if m.ToTime != nil {
		l = github_com_cosmos_gogoproto_types.SizeOfStdTime(*m.ToTime)
		n += 1 + l + sovQuery(uint64(l))
	}
	if m.Page != 0 {
		n += 1 + sovQuery(uint64(m.Page))
	}
	if m.Limit != 0 {
		n += 1 + sovQuery(uint64(m.Limit))
	}
	return n
}

func (m *QueryRecordTimePaginationParams) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.FromTime != nil {
		l = github_com_cosmos_gogoproto_types.SizeOfStdTime(*m.FromTime)
		n += 1 + l + sovQuery(uint64(l))
	}
	if m.ToTime != nil {
		l = github_com_cosmos_gogoproto_types.SizeOfStdTime(*m.ToTime)
		n += 1 + l + sovQuery(uint64(l))
	}
	if m.Page != 0 {
		n += 1 + sovQuery(uint64(m.Page))
	}
	if m.Limit != 0 {
		n += 1 + sovQuery(uint64(m.Limit))
	}
	return n
}

func sovQuery(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozQuery(x uint64) (n int) {
	return sovQuery(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *NewQueryRecordParamsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: NewQueryRecordParamsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: NewQueryRecordParamsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RecordID", wireType)
			}
			m.RecordID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RecordID |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryRecordParams) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryRecordParams: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryRecordParams: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RecordID", wireType)
			}
			m.RecordID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RecordID |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *NewQueryRecordSequenceParamsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: NewQueryRecordSequenceParamsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: NewQueryRecordSequenceParamsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TxHash", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TxHash = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LogIndex", wireType)
			}
			m.LogIndex = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.LogIndex |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryRecordSequenceParams) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryRecordSequenceParams: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryRecordSequenceParams: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TxHash", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TxHash = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LogIndex", wireType)
			}
			m.LogIndex = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.LogIndex |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *NewQueryTimeRangePaginationParamsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: NewQueryTimeRangePaginationParamsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: NewQueryTimeRangePaginationParamsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FromTime", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.FromTime == nil {
				m.FromTime = new(time.Time)
			}
			if err := github_com_cosmos_gogoproto_types.StdTimeUnmarshal(m.FromTime, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ToTime", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ToTime == nil {
				m.ToTime = new(time.Time)
			}
			if err := github_com_cosmos_gogoproto_types.StdTimeUnmarshal(m.ToTime, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Page", wireType)
			}
			m.Page = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Page |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Limit", wireType)
			}
			m.Limit = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Limit |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryRecordTimePaginationParams) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryRecordTimePaginationParams: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryRecordTimePaginationParams: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FromTime", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.FromTime == nil {
				m.FromTime = new(time.Time)
			}
			if err := github_com_cosmos_gogoproto_types.StdTimeUnmarshal(m.FromTime, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ToTime", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ToTime == nil {
				m.ToTime = new(time.Time)
			}
			if err := github_com_cosmos_gogoproto_types.StdTimeUnmarshal(m.ToTime, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Page", wireType)
			}
			m.Page = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Page |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Limit", wireType)
			}
			m.Limit = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Limit |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipQuery(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthQuery
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupQuery
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthQuery
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthQuery        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowQuery          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupQuery = fmt.Errorf("proto: unexpected end of group")
)
