// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: heimdallv2/clerk/query.proto

package types

import (
	context "context"
	fmt "fmt"
	_ "github.com/cosmos/cosmos-sdk/types/query"
	_ "github.com/cosmos/cosmos-sdk/types/tx/amino"
	_ "github.com/cosmos/gogoproto/gogoproto"
	grpc1 "github.com/cosmos/gogoproto/grpc"
	proto "github.com/cosmos/gogoproto/proto"
	github_com_cosmos_gogoproto_types "github.com/cosmos/gogoproto/types"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	_ "google.golang.org/protobuf/types/known/timestamppb"
	io "io"
	math "math"
	math_bits "math/bits"
	time "time"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf
var _ = time.Kitchen

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type RecordRequest struct {
	RecordId uint64 `protobuf:"varint,1,opt,name=record_id,json=recordId,proto3" json:"record_id,omitempty"`
}

func (m *RecordRequest) Reset()         { *m = RecordRequest{} }
func (m *RecordRequest) String() string { return proto.CompactTextString(m) }
func (*RecordRequest) ProtoMessage()    {}
func (*RecordRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_9015e8f88cd9cb1b, []int{0}
}
func (m *RecordRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RecordRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RecordRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RecordRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RecordRequest.Merge(m, src)
}
func (m *RecordRequest) XXX_Size() int {
	return m.Size()
}
func (m *RecordRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_RecordRequest.DiscardUnknown(m)
}

var xxx_messageInfo_RecordRequest proto.InternalMessageInfo

func (m *RecordRequest) GetRecordId() uint64 {
	if m != nil {
		return m.RecordId
	}
	return 0
}

type RecordResponse struct {
	Record EventRecord `protobuf:"bytes,1,opt,name=record,proto3" json:"record"`
}

func (m *RecordResponse) Reset()         { *m = RecordResponse{} }
func (m *RecordResponse) String() string { return proto.CompactTextString(m) }
func (*RecordResponse) ProtoMessage()    {}
func (*RecordResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_9015e8f88cd9cb1b, []int{1}
}
func (m *RecordResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RecordResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RecordResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RecordResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RecordResponse.Merge(m, src)
}
func (m *RecordResponse) XXX_Size() int {
	return m.Size()
}
func (m *RecordResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_RecordResponse.DiscardUnknown(m)
}

var xxx_messageInfo_RecordResponse proto.InternalMessageInfo

func (m *RecordResponse) GetRecord() EventRecord {
	if m != nil {
		return m.Record
	}
	return EventRecord{}
}

type RecordListRequest struct {
	Page  uint64 `protobuf:"varint,1,opt,name=page,proto3" json:"page,omitempty"`
	Limit uint64 `protobuf:"varint,2,opt,name=limit,proto3" json:"limit,omitempty"`
}

func (m *RecordListRequest) Reset()         { *m = RecordListRequest{} }
func (m *RecordListRequest) String() string { return proto.CompactTextString(m) }
func (*RecordListRequest) ProtoMessage()    {}
func (*RecordListRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_9015e8f88cd9cb1b, []int{2}
}
func (m *RecordListRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RecordListRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RecordListRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RecordListRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RecordListRequest.Merge(m, src)
}
func (m *RecordListRequest) XXX_Size() int {
	return m.Size()
}
func (m *RecordListRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_RecordListRequest.DiscardUnknown(m)
}

var xxx_messageInfo_RecordListRequest proto.InternalMessageInfo

func (m *RecordListRequest) GetPage() uint64 {
	if m != nil {
		return m.Page
	}
	return 0
}

func (m *RecordListRequest) GetLimit() uint64 {
	if m != nil {
		return m.Limit
	}
	return 0
}

type RecordListResponse struct {
	EventRecords []EventRecord `protobuf:"bytes,1,rep,name=event_records,json=eventRecords,proto3" json:"event_records"`
}

func (m *RecordListResponse) Reset()         { *m = RecordListResponse{} }
func (m *RecordListResponse) String() string { return proto.CompactTextString(m) }
func (*RecordListResponse) ProtoMessage()    {}
func (*RecordListResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_9015e8f88cd9cb1b, []int{3}
}
func (m *RecordListResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RecordListResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RecordListResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RecordListResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RecordListResponse.Merge(m, src)
}
func (m *RecordListResponse) XXX_Size() int {
	return m.Size()
}
func (m *RecordListResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_RecordListResponse.DiscardUnknown(m)
}

var xxx_messageInfo_RecordListResponse proto.InternalMessageInfo

func (m *RecordListResponse) GetEventRecords() []EventRecord {
	if m != nil {
		return m.EventRecords
	}
	return nil
}

type RecordListWithTimeRequest struct {
	FromTime time.Time `protobuf:"bytes,1,opt,name=from_time,json=fromTime,proto3,stdtime" json:"from_time"`
	ToTime   time.Time `protobuf:"bytes,2,opt,name=to_time,json=toTime,proto3,stdtime" json:"to_time"`
	Page     uint64    `protobuf:"varint,3,opt,name=page,proto3" json:"page,omitempty"`
	Limit    uint64    `protobuf:"varint,4,opt,name=limit,proto3" json:"limit,omitempty"`
}

func (m *RecordListWithTimeRequest) Reset()         { *m = RecordListWithTimeRequest{} }
func (m *RecordListWithTimeRequest) String() string { return proto.CompactTextString(m) }
func (*RecordListWithTimeRequest) ProtoMessage()    {}
func (*RecordListWithTimeRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_9015e8f88cd9cb1b, []int{4}
}
func (m *RecordListWithTimeRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RecordListWithTimeRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RecordListWithTimeRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RecordListWithTimeRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RecordListWithTimeRequest.Merge(m, src)
}
func (m *RecordListWithTimeRequest) XXX_Size() int {
	return m.Size()
}
func (m *RecordListWithTimeRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_RecordListWithTimeRequest.DiscardUnknown(m)
}

var xxx_messageInfo_RecordListWithTimeRequest proto.InternalMessageInfo

func (m *RecordListWithTimeRequest) GetFromTime() time.Time {
	if m != nil {
		return m.FromTime
	}
	return time.Time{}
}

func (m *RecordListWithTimeRequest) GetToTime() time.Time {
	if m != nil {
		return m.ToTime
	}
	return time.Time{}
}

func (m *RecordListWithTimeRequest) GetPage() uint64 {
	if m != nil {
		return m.Page
	}
	return 0
}

func (m *RecordListWithTimeRequest) GetLimit() uint64 {
	if m != nil {
		return m.Limit
	}
	return 0
}

type RecordListWithTimeResponse struct {
	EventRecords []EventRecord `protobuf:"bytes,1,rep,name=event_records,json=eventRecords,proto3" json:"event_records"`
}

func (m *RecordListWithTimeResponse) Reset()         { *m = RecordListWithTimeResponse{} }
func (m *RecordListWithTimeResponse) String() string { return proto.CompactTextString(m) }
func (*RecordListWithTimeResponse) ProtoMessage()    {}
func (*RecordListWithTimeResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_9015e8f88cd9cb1b, []int{5}
}
func (m *RecordListWithTimeResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RecordListWithTimeResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RecordListWithTimeResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RecordListWithTimeResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RecordListWithTimeResponse.Merge(m, src)
}
func (m *RecordListWithTimeResponse) XXX_Size() int {
	return m.Size()
}
func (m *RecordListWithTimeResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_RecordListWithTimeResponse.DiscardUnknown(m)
}

var xxx_messageInfo_RecordListWithTimeResponse proto.InternalMessageInfo

func (m *RecordListWithTimeResponse) GetEventRecords() []EventRecord {
	if m != nil {
		return m.EventRecords
	}
	return nil
}

type RecordSequenceRequest struct {
	TxHash   string `protobuf:"bytes,1,opt,name=tx_hash,json=txHash,proto3" json:"tx_hash,omitempty"`
	LogIndex uint64 `protobuf:"varint,2,opt,name=log_index,json=logIndex,proto3" json:"log_index,omitempty"`
}

func (m *RecordSequenceRequest) Reset()         { *m = RecordSequenceRequest{} }
func (m *RecordSequenceRequest) String() string { return proto.CompactTextString(m) }
func (*RecordSequenceRequest) ProtoMessage()    {}
func (*RecordSequenceRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_9015e8f88cd9cb1b, []int{6}
}
func (m *RecordSequenceRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RecordSequenceRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RecordSequenceRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RecordSequenceRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RecordSequenceRequest.Merge(m, src)
}
func (m *RecordSequenceRequest) XXX_Size() int {
	return m.Size()
}
func (m *RecordSequenceRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_RecordSequenceRequest.DiscardUnknown(m)
}

var xxx_messageInfo_RecordSequenceRequest proto.InternalMessageInfo

func (m *RecordSequenceRequest) GetTxHash() string {
	if m != nil {
		return m.TxHash
	}
	return ""
}

func (m *RecordSequenceRequest) GetLogIndex() uint64 {
	if m != nil {
		return m.LogIndex
	}
	return 0
}

type RecordSequenceResponse struct {
	Sequence uint64 `protobuf:"varint,1,opt,name=sequence,proto3" json:"sequence,omitempty"`
}

func (m *RecordSequenceResponse) Reset()         { *m = RecordSequenceResponse{} }
func (m *RecordSequenceResponse) String() string { return proto.CompactTextString(m) }
func (*RecordSequenceResponse) ProtoMessage()    {}
func (*RecordSequenceResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_9015e8f88cd9cb1b, []int{7}
}
func (m *RecordSequenceResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RecordSequenceResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RecordSequenceResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RecordSequenceResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RecordSequenceResponse.Merge(m, src)
}
func (m *RecordSequenceResponse) XXX_Size() int {
	return m.Size()
}
func (m *RecordSequenceResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_RecordSequenceResponse.DiscardUnknown(m)
}

var xxx_messageInfo_RecordSequenceResponse proto.InternalMessageInfo

func (m *RecordSequenceResponse) GetSequence() uint64 {
	if m != nil {
		return m.Sequence
	}
	return 0
}

func init() {
	proto.RegisterType((*RecordRequest)(nil), "heimdallv2.clerk.RecordRequest")
	proto.RegisterType((*RecordResponse)(nil), "heimdallv2.clerk.RecordResponse")
	proto.RegisterType((*RecordListRequest)(nil), "heimdallv2.clerk.RecordListRequest")
	proto.RegisterType((*RecordListResponse)(nil), "heimdallv2.clerk.RecordListResponse")
	proto.RegisterType((*RecordListWithTimeRequest)(nil), "heimdallv2.clerk.RecordListWithTimeRequest")
	proto.RegisterType((*RecordListWithTimeResponse)(nil), "heimdallv2.clerk.RecordListWithTimeResponse")
	proto.RegisterType((*RecordSequenceRequest)(nil), "heimdallv2.clerk.RecordSequenceRequest")
	proto.RegisterType((*RecordSequenceResponse)(nil), "heimdallv2.clerk.RecordSequenceResponse")
}

func init() { proto.RegisterFile("heimdallv2/clerk/query.proto", fileDescriptor_9015e8f88cd9cb1b) }

var fileDescriptor_9015e8f88cd9cb1b = []byte{
	// 678 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xb4, 0x93, 0x4f, 0x4f, 0x13, 0x4f,
	0x18, 0xc7, 0xbb, 0x50, 0x0a, 0x1d, 0x7e, 0xfd, 0x69, 0x27, 0x62, 0xca, 0x82, 0x5b, 0x58, 0x35,
	0x12, 0x85, 0x1d, 0x2d, 0x47, 0x2f, 0xa6, 0x89, 0x0a, 0x51, 0x13, 0xad, 0x24, 0x26, 0x7a, 0x68,
	0x96, 0x76, 0xd8, 0x4e, 0xd8, 0xdd, 0x29, 0x9d, 0x69, 0xd3, 0xc6, 0x98, 0xa8, 0xf1, 0xe0, 0xc1,
	0x03, 0x89, 0x6f, 0xc1, 0x83, 0x47, 0x5f, 0x06, 0x47, 0x12, 0x2f, 0x9e, 0xc4, 0x80, 0x89, 0x6f,
	0xc3, 0xcc, 0x3f, 0xb6, 0x2d, 0x7f, 0x94, 0x83, 0x97, 0x66, 0xfb, 0xfc, 0xfd, 0xcc, 0xf7, 0x79,
	0x1e, 0x30, 0xdb, 0xc0, 0x24, 0xaa, 0xfb, 0x61, 0xd8, 0x29, 0xa1, 0x5a, 0x88, 0x5b, 0x9b, 0x68,
	0xab, 0x8d, 0x5b, 0x3d, 0xaf, 0xd9, 0xa2, 0x9c, 0xc2, 0xf3, 0x89, 0xd7, 0x93, 0x5e, 0x7b, 0xa6,
	0x46, 0x59, 0x44, 0x99, 0x8a, 0x42, 0x9d, 0x5b, 0xfd, 0xe1, 0xf6, 0x85, 0x80, 0x06, 0x54, 0x7e,
	0x22, 0xf1, 0xa5, 0xad, 0xb3, 0x01, 0xa5, 0x41, 0x88, 0x91, 0xdf, 0x24, 0xc8, 0x8f, 0x63, 0xca,
	0x7d, 0x4e, 0x68, 0xcc, 0xb4, 0xb7, 0xa8, 0xbd, 0xf2, 0xdf, 0x7a, 0x7b, 0x03, 0x71, 0x12, 0x61,
	0xc6, 0xfd, 0xa8, 0x69, 0xd2, 0x8f, 0x10, 0xca, 0x5f, 0xed, 0xcd, 0xfb, 0x11, 0x89, 0x29, 0x92,
	0xbf, 0xca, 0xe4, 0x2e, 0x83, 0x5c, 0x05, 0xd7, 0x68, 0xab, 0x5e, 0xc1, 0x5b, 0x6d, 0xcc, 0x38,
	0x74, 0x41, 0xb6, 0x25, 0x0d, 0x55, 0x52, 0x2f, 0x58, 0x73, 0xd6, 0x42, 0xba, 0x3c, 0xf6, 0xf9,
	0xd7, 0x97, 0xeb, 0x56, 0x65, 0x42, 0xd9, 0x57, 0xeb, 0x6e, 0x05, 0xfc, 0x6f, 0x92, 0x58, 0x93,
	0xc6, 0x0c, 0xc3, 0x3b, 0x20, 0xa3, 0xbc, 0x32, 0x65, 0xb2, 0x74, 0xc9, 0x1b, 0x16, 0xc3, 0xbb,
	0xdb, 0xc1, 0x31, 0x57, 0x69, 0xe5, 0xec, 0xce, 0xf7, 0x62, 0x4a, 0x55, 0xd5, 0x79, 0xee, 0x03,
	0x90, 0x57, 0xce, 0x87, 0x84, 0x71, 0x03, 0x33, 0x0d, 0xd2, 0x4d, 0x3f, 0xc0, 0x83, 0x1c, 0xd2,
	0x04, 0x67, 0xc0, 0x58, 0x48, 0x22, 0xc2, 0x0b, 0x23, 0xfd, 0x3e, 0x65, 0x73, 0x6b, 0x00, 0xf6,
	0x17, 0xd3, 0x90, 0x8f, 0x40, 0x0e, 0x0b, 0x88, 0xaa, 0x6a, 0xc9, 0x0a, 0xd6, 0xdc, 0xe8, 0x99,
	0x58, 0xff, 0xc3, 0x89, 0x9d, 0xb9, 0x7b, 0x16, 0x98, 0x4e, 0xba, 0x3c, 0x23, 0xbc, 0xb1, 0x46,
	0x22, 0x6c, 0xd0, 0xef, 0x81, 0xec, 0x46, 0x8b, 0x46, 0x55, 0x31, 0x21, 0x2d, 0x8a, 0xed, 0xa9,
	0xf1, 0x79, 0x66, 0x7c, 0xde, 0x9a, 0x19, 0x5f, 0x39, 0x27, 0xba, 0x6c, 0xef, 0x15, 0x2d, 0xad,
	0xb5, 0xc8, 0x15, 0x5e, 0x58, 0x06, 0xe3, 0x9c, 0xaa, 0x2a, 0x23, 0x67, 0xad, 0x92, 0xe1, 0x54,
	0xd6, 0x30, 0x32, 0x8e, 0x9e, 0x22, 0x63, 0xfa, 0x18, 0x19, 0x37, 0x81, 0x7d, 0xdc, 0x03, 0xff,
	0x8d, 0x9c, 0x2f, 0xc0, 0x94, 0xfa, 0x7c, 0x2a, 0x14, 0x8c, 0x6b, 0x87, 0x4a, 0x3a, 0x60, 0x9c,
	0x77, 0xab, 0x0d, 0x9f, 0x35, 0xa4, 0x8e, 0x59, 0x03, 0x99, 0xe1, 0xdd, 0x15, 0x9f, 0x35, 0xc4,
	0xc6, 0x86, 0x34, 0xa8, 0x92, 0xb8, 0x8e, 0xbb, 0x83, 0xdb, 0x30, 0x11, 0xd2, 0x60, 0x55, 0x98,
	0xdd, 0xdb, 0xe0, 0xe2, 0x70, 0x71, 0xfd, 0x8a, 0x79, 0x30, 0xc1, 0xb4, 0x6d, 0x68, 0xdd, 0x8d,
	0xb9, 0xf4, 0x29, 0x0d, 0xc6, 0x9e, 0x88, 0xcb, 0x85, 0xaf, 0x2d, 0x90, 0xbb, 0x8f, 0xcd, 0x53,
	0x7a, 0xab, 0x75, 0x58, 0x3c, 0xfa, 0xda, 0x81, 0x7b, 0xb2, 0xe7, 0x4e, 0x0e, 0x50, 0x04, 0xee,
	0xe2, 0x7b, 0xd1, 0xef, 0xed, 0xd7, 0x9f, 0x1f, 0x47, 0xe6, 0x61, 0x51, 0x9f, 0xad, 0x94, 0x66,
	0x49, 0x29, 0x8b, 0x5e, 0x1e, 0x5e, 0xe4, 0x2b, 0xf8, 0xa6, 0x1f, 0x41, 0xcc, 0x05, 0x5e, 0x3e,
	0xa9, 0x43, 0xdf, 0x25, 0xd9, 0x57, 0x4e, 0x0f, 0xd2, 0x28, 0x57, 0x13, 0x14, 0x1b, 0x16, 0x8e,
	0x43, 0x09, 0x45, 0xc7, 0x0f, 0x16, 0x98, 0x1a, 0x60, 0x30, 0xbb, 0x01, 0x6f, 0x9c, 0xd6, 0x66,
	0xe8, 0x44, 0xec, 0xc5, 0xbf, 0x0b, 0xd6, 0x6c, 0x85, 0x84, 0x2d, 0x07, 0x27, 0x35, 0x9b, 0xb8,
	0x0b, 0xf8, 0xce, 0x02, 0xf9, 0x43, 0x1c, 0x33, 0x60, 0x78, 0xed, 0xa4, 0xea, 0x43, 0xfb, 0x65,
	0x2f, 0xfc, 0x39, 0x50, 0x23, 0xcc, 0x26, 0x08, 0x79, 0x78, 0x4e, 0x23, 0x98, 0x35, 0x29, 0xaf,
	0xec, 0xec, 0x3b, 0xd6, 0xee, 0xbe, 0x63, 0xfd, 0xd8, 0x77, 0xac, 0xed, 0x03, 0x27, 0xb5, 0x7b,
	0xe0, 0xa4, 0xbe, 0x1d, 0x38, 0xa9, 0xe7, 0x5e, 0x40, 0x78, 0xa3, 0xbd, 0xee, 0xd5, 0x68, 0x84,
	0x6e, 0x76, 0x1f, 0xd3, 0xb0, 0x17, 0xd0, 0x18, 0x99, 0xae, 0x4b, 0x9d, 0x12, 0xea, 0x9a, 0xf7,
	0xf4, 0x9a, 0x98, 0xad, 0x67, 0xe4, 0x69, 0x2f, 0xff, 0x0e, 0x00, 0x00, 0xff, 0xff, 0xd5, 0x5d,
	0x05, 0xa0, 0x70, 0x06, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// QueryClient is the client API for Query service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type QueryClient interface {
	// GetRecordById retrieves a record by its id
	GetRecordById(ctx context.Context, in *RecordRequest, opts ...grpc.CallOption) (*RecordResponse, error)
	// GetRecordList queries a list of records
	GetRecordList(ctx context.Context, in *RecordListRequest, opts ...grpc.CallOption) (*RecordListResponse, error)
	// GetRecordListWithTime queries a list of records with time
	GetRecordListWithTime(ctx context.Context, in *RecordListWithTimeRequest, opts ...grpc.CallOption) (*RecordListWithTimeResponse, error)
	// GetRecordSequence queries the sequence of the record
	GetRecordSequence(ctx context.Context, in *RecordSequenceRequest, opts ...grpc.CallOption) (*RecordSequenceResponse, error)
}

type queryClient struct {
	cc grpc1.ClientConn
}

func NewQueryClient(cc grpc1.ClientConn) QueryClient {
	return &queryClient{cc}
}

func (c *queryClient) GetRecordById(ctx context.Context, in *RecordRequest, opts ...grpc.CallOption) (*RecordResponse, error) {
	out := new(RecordResponse)
	err := c.cc.Invoke(ctx, "/heimdallv2.clerk.Query/GetRecordById", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) GetRecordList(ctx context.Context, in *RecordListRequest, opts ...grpc.CallOption) (*RecordListResponse, error) {
	out := new(RecordListResponse)
	err := c.cc.Invoke(ctx, "/heimdallv2.clerk.Query/GetRecordList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) GetRecordListWithTime(ctx context.Context, in *RecordListWithTimeRequest, opts ...grpc.CallOption) (*RecordListWithTimeResponse, error) {
	out := new(RecordListWithTimeResponse)
	err := c.cc.Invoke(ctx, "/heimdallv2.clerk.Query/GetRecordListWithTime", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) GetRecordSequence(ctx context.Context, in *RecordSequenceRequest, opts ...grpc.CallOption) (*RecordSequenceResponse, error) {
	out := new(RecordSequenceResponse)
	err := c.cc.Invoke(ctx, "/heimdallv2.clerk.Query/GetRecordSequence", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// QueryServer is the server API for Query service.
type QueryServer interface {
	// GetRecordById retrieves a record by its id
	GetRecordById(context.Context, *RecordRequest) (*RecordResponse, error)
	// GetRecordList queries a list of records
	GetRecordList(context.Context, *RecordListRequest) (*RecordListResponse, error)
	// GetRecordListWithTime queries a list of records with time
	GetRecordListWithTime(context.Context, *RecordListWithTimeRequest) (*RecordListWithTimeResponse, error)
	// GetRecordSequence queries the sequence of the record
	GetRecordSequence(context.Context, *RecordSequenceRequest) (*RecordSequenceResponse, error)
}

// UnimplementedQueryServer can be embedded to have forward compatible implementations.
type UnimplementedQueryServer struct {
}

func (*UnimplementedQueryServer) GetRecordById(ctx context.Context, req *RecordRequest) (*RecordResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRecordById not implemented")
}
func (*UnimplementedQueryServer) GetRecordList(ctx context.Context, req *RecordListRequest) (*RecordListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRecordList not implemented")
}
func (*UnimplementedQueryServer) GetRecordListWithTime(ctx context.Context, req *RecordListWithTimeRequest) (*RecordListWithTimeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRecordListWithTime not implemented")
}
func (*UnimplementedQueryServer) GetRecordSequence(ctx context.Context, req *RecordSequenceRequest) (*RecordSequenceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRecordSequence not implemented")
}

func RegisterQueryServer(s grpc1.Server, srv QueryServer) {
	s.RegisterService(&_Query_serviceDesc, srv)
}

func _Query_GetRecordById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RecordRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).GetRecordById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/heimdallv2.clerk.Query/GetRecordById",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).GetRecordById(ctx, req.(*RecordRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_GetRecordList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RecordListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).GetRecordList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/heimdallv2.clerk.Query/GetRecordList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).GetRecordList(ctx, req.(*RecordListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_GetRecordListWithTime_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RecordListWithTimeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).GetRecordListWithTime(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/heimdallv2.clerk.Query/GetRecordListWithTime",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).GetRecordListWithTime(ctx, req.(*RecordListWithTimeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_GetRecordSequence_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RecordSequenceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).GetRecordSequence(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/heimdallv2.clerk.Query/GetRecordSequence",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).GetRecordSequence(ctx, req.(*RecordSequenceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Query_serviceDesc = grpc.ServiceDesc{
	ServiceName: "heimdallv2.clerk.Query",
	HandlerType: (*QueryServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetRecordById",
			Handler:    _Query_GetRecordById_Handler,
		},
		{
			MethodName: "GetRecordList",
			Handler:    _Query_GetRecordList_Handler,
		},
		{
			MethodName: "GetRecordListWithTime",
			Handler:    _Query_GetRecordListWithTime_Handler,
		},
		{
			MethodName: "GetRecordSequence",
			Handler:    _Query_GetRecordSequence_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "heimdallv2/clerk/query.proto",
}

func (m *RecordRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RecordRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RecordRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.RecordId != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.RecordId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *RecordResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RecordResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RecordResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.Record.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *RecordListRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RecordListRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RecordListRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Limit != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.Limit))
		i--
		dAtA[i] = 0x10
	}
	if m.Page != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.Page))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *RecordListResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RecordListResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RecordListResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.EventRecords) > 0 {
		for iNdEx := len(m.EventRecords) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.EventRecords[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *RecordListWithTimeRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RecordListWithTimeRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RecordListWithTimeRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Limit != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.Limit))
		i--
		dAtA[i] = 0x20
	}
	if m.Page != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.Page))
		i--
		dAtA[i] = 0x18
	}
	n2, err2 := github_com_cosmos_gogoproto_types.StdTimeMarshalTo(m.ToTime, dAtA[i-github_com_cosmos_gogoproto_types.SizeOfStdTime(m.ToTime):])
	if err2 != nil {
		return 0, err2
	}
	i -= n2
	i = encodeVarintQuery(dAtA, i, uint64(n2))
	i--
	dAtA[i] = 0x12
	n3, err3 := github_com_cosmos_gogoproto_types.StdTimeMarshalTo(m.FromTime, dAtA[i-github_com_cosmos_gogoproto_types.SizeOfStdTime(m.FromTime):])
	if err3 != nil {
		return 0, err3
	}
	i -= n3
	i = encodeVarintQuery(dAtA, i, uint64(n3))
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *RecordListWithTimeResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RecordListWithTimeResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RecordListWithTimeResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.EventRecords) > 0 {
		for iNdEx := len(m.EventRecords) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.EventRecords[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *RecordSequenceRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RecordSequenceRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RecordSequenceRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.LogIndex != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.LogIndex))
		i--
		dAtA[i] = 0x10
	}
	if len(m.TxHash) > 0 {
		i -= len(m.TxHash)
		copy(dAtA[i:], m.TxHash)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.TxHash)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *RecordSequenceResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RecordSequenceResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RecordSequenceResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Sequence != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.Sequence))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintQuery(dAtA []byte, offset int, v uint64) int {
	offset -= sovQuery(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *RecordRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.RecordId != 0 {
		n += 1 + sovQuery(uint64(m.RecordId))
	}
	return n
}

func (m *RecordResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Record.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *RecordListRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Page != 0 {
		n += 1 + sovQuery(uint64(m.Page))
	}
	if m.Limit != 0 {
		n += 1 + sovQuery(uint64(m.Limit))
	}
	return n
}

func (m *RecordListResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.EventRecords) > 0 {
		for _, e := range m.EventRecords {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	return n
}

func (m *RecordListWithTimeRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = github_com_cosmos_gogoproto_types.SizeOfStdTime(m.FromTime)
	n += 1 + l + sovQuery(uint64(l))
	l = github_com_cosmos_gogoproto_types.SizeOfStdTime(m.ToTime)
	n += 1 + l + sovQuery(uint64(l))
	if m.Page != 0 {
		n += 1 + sovQuery(uint64(m.Page))
	}
	if m.Limit != 0 {
		n += 1 + sovQuery(uint64(m.Limit))
	}
	return n
}

func (m *RecordListWithTimeResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.EventRecords) > 0 {
		for _, e := range m.EventRecords {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	return n
}

func (m *RecordSequenceRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.TxHash)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	if m.LogIndex != 0 {
		n += 1 + sovQuery(uint64(m.LogIndex))
	}
	return n
}

func (m *RecordSequenceResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Sequence != 0 {
		n += 1 + sovQuery(uint64(m.Sequence))
	}
	return n
}

func sovQuery(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozQuery(x uint64) (n int) {
	return sovQuery(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *RecordRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RecordRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RecordRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RecordId", wireType)
			}
			m.RecordId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RecordId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RecordResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RecordResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RecordResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Record", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Record.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RecordListRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RecordListRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RecordListRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Page", wireType)
			}
			m.Page = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Page |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Limit", wireType)
			}
			m.Limit = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Limit |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RecordListResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RecordListResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RecordListResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EventRecords", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.EventRecords = append(m.EventRecords, EventRecord{})
			if err := m.EventRecords[len(m.EventRecords)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RecordListWithTimeRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RecordListWithTimeRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RecordListWithTimeRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FromTime", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := github_com_cosmos_gogoproto_types.StdTimeUnmarshal(&m.FromTime, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ToTime", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := github_com_cosmos_gogoproto_types.StdTimeUnmarshal(&m.ToTime, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Page", wireType)
			}
			m.Page = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Page |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Limit", wireType)
			}
			m.Limit = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Limit |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RecordListWithTimeResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RecordListWithTimeResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RecordListWithTimeResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EventRecords", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.EventRecords = append(m.EventRecords, EventRecord{})
			if err := m.EventRecords[len(m.EventRecords)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RecordSequenceRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RecordSequenceRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RecordSequenceRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TxHash", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TxHash = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LogIndex", wireType)
			}
			m.LogIndex = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.LogIndex |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RecordSequenceResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RecordSequenceResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RecordSequenceResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sequence", wireType)
			}
			m.Sequence = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Sequence |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipQuery(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthQuery
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupQuery
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthQuery
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthQuery        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowQuery          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupQuery = fmt.Errorf("proto: unexpected end of group")
)
