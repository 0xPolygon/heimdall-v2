// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: heimdallv2/milestone/query.proto

package types

import (
	context "context"
	fmt "fmt"
	_ "github.com/cosmos/cosmos-sdk/types/query"
	_ "github.com/cosmos/cosmos-sdk/types/tx/amino"
	_ "github.com/cosmos/gogoproto/gogoproto"
	grpc1 "github.com/cosmos/gogoproto/grpc"
	proto "github.com/cosmos/gogoproto/proto"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type QueryParamsRequest struct {
}

func (m *QueryParamsRequest) Reset()         { *m = QueryParamsRequest{} }
func (m *QueryParamsRequest) String() string { return proto.CompactTextString(m) }
func (*QueryParamsRequest) ProtoMessage()    {}
func (*QueryParamsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_2569eb9c5aa780c5, []int{0}
}
func (m *QueryParamsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryParamsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryParamsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryParamsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryParamsRequest.Merge(m, src)
}
func (m *QueryParamsRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryParamsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryParamsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryParamsRequest proto.InternalMessageInfo

type QueryParamsResponse struct {
	Params Params `protobuf:"bytes,1,opt,name=params,proto3" json:"params"`
}

func (m *QueryParamsResponse) Reset()         { *m = QueryParamsResponse{} }
func (m *QueryParamsResponse) String() string { return proto.CompactTextString(m) }
func (*QueryParamsResponse) ProtoMessage()    {}
func (*QueryParamsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_2569eb9c5aa780c5, []int{1}
}
func (m *QueryParamsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryParamsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryParamsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryParamsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryParamsResponse.Merge(m, src)
}
func (m *QueryParamsResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryParamsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryParamsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryParamsResponse proto.InternalMessageInfo

func (m *QueryParamsResponse) GetParams() Params {
	if m != nil {
		return m.Params
	}
	return Params{}
}

type QueryCountRequest struct {
}

func (m *QueryCountRequest) Reset()         { *m = QueryCountRequest{} }
func (m *QueryCountRequest) String() string { return proto.CompactTextString(m) }
func (*QueryCountRequest) ProtoMessage()    {}
func (*QueryCountRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_2569eb9c5aa780c5, []int{2}
}
func (m *QueryCountRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryCountRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryCountRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryCountRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryCountRequest.Merge(m, src)
}
func (m *QueryCountRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryCountRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryCountRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryCountRequest proto.InternalMessageInfo

type QueryCountResponse struct {
	Count uint64 `protobuf:"varint,1,opt,name=count,proto3" json:"count,omitempty"`
}

func (m *QueryCountResponse) Reset()         { *m = QueryCountResponse{} }
func (m *QueryCountResponse) String() string { return proto.CompactTextString(m) }
func (*QueryCountResponse) ProtoMessage()    {}
func (*QueryCountResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_2569eb9c5aa780c5, []int{3}
}
func (m *QueryCountResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryCountResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryCountResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryCountResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryCountResponse.Merge(m, src)
}
func (m *QueryCountResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryCountResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryCountResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryCountResponse proto.InternalMessageInfo

func (m *QueryCountResponse) GetCount() uint64 {
	if m != nil {
		return m.Count
	}
	return 0
}

type QueryLatestMilestoneRequest struct {
}

func (m *QueryLatestMilestoneRequest) Reset()         { *m = QueryLatestMilestoneRequest{} }
func (m *QueryLatestMilestoneRequest) String() string { return proto.CompactTextString(m) }
func (*QueryLatestMilestoneRequest) ProtoMessage()    {}
func (*QueryLatestMilestoneRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_2569eb9c5aa780c5, []int{4}
}
func (m *QueryLatestMilestoneRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryLatestMilestoneRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryLatestMilestoneRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryLatestMilestoneRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryLatestMilestoneRequest.Merge(m, src)
}
func (m *QueryLatestMilestoneRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryLatestMilestoneRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryLatestMilestoneRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryLatestMilestoneRequest proto.InternalMessageInfo

type QueryLatestMilestoneResponse struct {
	Milestone Milestone `protobuf:"bytes,1,opt,name=milestone,proto3" json:"milestone"`
}

func (m *QueryLatestMilestoneResponse) Reset()         { *m = QueryLatestMilestoneResponse{} }
func (m *QueryLatestMilestoneResponse) String() string { return proto.CompactTextString(m) }
func (*QueryLatestMilestoneResponse) ProtoMessage()    {}
func (*QueryLatestMilestoneResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_2569eb9c5aa780c5, []int{5}
}
func (m *QueryLatestMilestoneResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryLatestMilestoneResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryLatestMilestoneResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryLatestMilestoneResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryLatestMilestoneResponse.Merge(m, src)
}
func (m *QueryLatestMilestoneResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryLatestMilestoneResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryLatestMilestoneResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryLatestMilestoneResponse proto.InternalMessageInfo

func (m *QueryLatestMilestoneResponse) GetMilestone() Milestone {
	if m != nil {
		return m.Milestone
	}
	return Milestone{}
}

type QueryMilestoneRequest struct {
	Number uint64 `protobuf:"varint,1,opt,name=number,proto3" json:"number,omitempty"`
}

func (m *QueryMilestoneRequest) Reset()         { *m = QueryMilestoneRequest{} }
func (m *QueryMilestoneRequest) String() string { return proto.CompactTextString(m) }
func (*QueryMilestoneRequest) ProtoMessage()    {}
func (*QueryMilestoneRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_2569eb9c5aa780c5, []int{6}
}
func (m *QueryMilestoneRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryMilestoneRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryMilestoneRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryMilestoneRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryMilestoneRequest.Merge(m, src)
}
func (m *QueryMilestoneRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryMilestoneRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryMilestoneRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryMilestoneRequest proto.InternalMessageInfo

func (m *QueryMilestoneRequest) GetNumber() uint64 {
	if m != nil {
		return m.Number
	}
	return 0
}

type QueryMilestoneResponse struct {
	Milestone Milestone `protobuf:"bytes,1,opt,name=milestone,proto3" json:"milestone"`
}

func (m *QueryMilestoneResponse) Reset()         { *m = QueryMilestoneResponse{} }
func (m *QueryMilestoneResponse) String() string { return proto.CompactTextString(m) }
func (*QueryMilestoneResponse) ProtoMessage()    {}
func (*QueryMilestoneResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_2569eb9c5aa780c5, []int{7}
}
func (m *QueryMilestoneResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryMilestoneResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryMilestoneResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryMilestoneResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryMilestoneResponse.Merge(m, src)
}
func (m *QueryMilestoneResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryMilestoneResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryMilestoneResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryMilestoneResponse proto.InternalMessageInfo

func (m *QueryMilestoneResponse) GetMilestone() Milestone {
	if m != nil {
		return m.Milestone
	}
	return Milestone{}
}

func init() {
	proto.RegisterType((*QueryParamsRequest)(nil), "heimdallv2.milestone.QueryParamsRequest")
	proto.RegisterType((*QueryParamsResponse)(nil), "heimdallv2.milestone.QueryParamsResponse")
	proto.RegisterType((*QueryCountRequest)(nil), "heimdallv2.milestone.QueryCountRequest")
	proto.RegisterType((*QueryCountResponse)(nil), "heimdallv2.milestone.QueryCountResponse")
	proto.RegisterType((*QueryLatestMilestoneRequest)(nil), "heimdallv2.milestone.QueryLatestMilestoneRequest")
	proto.RegisterType((*QueryLatestMilestoneResponse)(nil), "heimdallv2.milestone.QueryLatestMilestoneResponse")
	proto.RegisterType((*QueryMilestoneRequest)(nil), "heimdallv2.milestone.QueryMilestoneRequest")
	proto.RegisterType((*QueryMilestoneResponse)(nil), "heimdallv2.milestone.QueryMilestoneResponse")
}

func init() { proto.RegisterFile("heimdallv2/milestone/query.proto", fileDescriptor_2569eb9c5aa780c5) }

var fileDescriptor_2569eb9c5aa780c5 = []byte{
	// 526 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xac, 0x94, 0x4f, 0x8b, 0xd3, 0x40,
	0x18, 0xc6, 0x3b, 0xb2, 0x2d, 0xec, 0x78, 0xea, 0x34, 0x2e, 0x92, 0x76, 0xd3, 0x35, 0x08, 0xd6,
	0x7f, 0x19, 0x1b, 0xc1, 0xab, 0x50, 0x0f, 0x7a, 0x58, 0x65, 0xdd, 0x83, 0x07, 0x6f, 0x69, 0x1d,
	0xd2, 0x40, 0x32, 0x6f, 0xb6, 0x33, 0x29, 0x5b, 0xc4, 0x8b, 0x07, 0x11, 0x4f, 0x82, 0x1e, 0xfd,
	0x00, 0x1e, 0xfd, 0x18, 0x7b, 0x5c, 0xd8, 0x8b, 0x27, 0x91, 0x56, 0xf0, 0x6b, 0x48, 0x67, 0xa6,
	0x4d, 0xb6, 0x1b, 0xba, 0x2b, 0xec, 0x25, 0x0c, 0x6f, 0xde, 0xe7, 0x7d, 0x7e, 0xf3, 0xe6, 0x21,
	0x78, 0x67, 0xc8, 0xa2, 0xe4, 0x4d, 0x10, 0xc7, 0x63, 0x9f, 0x26, 0x51, 0xcc, 0x84, 0x04, 0xce,
	0xe8, 0x41, 0xc6, 0x46, 0x13, 0x2f, 0x1d, 0x81, 0x04, 0x62, 0xe5, 0x1d, 0xde, 0xb2, 0xc3, 0xae,
	0x07, 0x49, 0xc4, 0x81, 0xaa, 0xa7, 0x6e, 0xb4, 0x9b, 0x03, 0x10, 0x09, 0x08, 0x2d, 0xa6, 0xe3,
	0x6e, 0x71, 0x8a, 0x6d, 0x85, 0x10, 0x82, 0x3a, 0xd2, 0xf9, 0xc9, 0x54, 0x5b, 0x21, 0x40, 0x18,
	0x33, 0x1a, 0xa4, 0x11, 0x0d, 0x38, 0x07, 0x19, 0xc8, 0x08, 0xb8, 0x30, 0x6f, 0x6f, 0x96, 0xb2,
	0x2d, 0x4f, 0xba, 0xcb, 0xb5, 0x30, 0x79, 0x39, 0x37, 0xda, 0x0b, 0x46, 0x41, 0x22, 0xf6, 0xd9,
	0x41, 0xc6, 0x84, 0x74, 0x5f, 0xe1, 0xc6, 0xa9, 0xaa, 0x48, 0x81, 0x0b, 0x46, 0x1e, 0xe3, 0x5a,
	0xaa, 0x2a, 0xd7, 0xd1, 0x0e, 0xea, 0x5c, 0xf5, 0x5b, 0x5e, 0xd9, 0xed, 0x3c, 0xad, 0xea, 0x6d,
	0x1e, 0xfd, 0x6a, 0x57, 0xbe, 0xff, 0xfd, 0x71, 0x07, 0xed, 0x1b, 0x99, 0xdb, 0xc0, 0x75, 0x35,
	0xf7, 0x09, 0x64, 0x5c, 0x2e, 0xcc, 0xba, 0x06, 0xc1, 0x14, 0x8d, 0x57, 0x13, 0x57, 0x07, 0xf3,
	0x82, 0xb2, 0xda, 0xe8, 0x55, 0xf5, 0x20, 0x5d, 0x73, 0xb7, 0x71, 0x53, 0x49, 0x76, 0x03, 0xc9,
	0x84, 0x7c, 0xbe, 0x70, 0x5e, 0x4c, 0x1c, 0xe2, 0x56, 0xf9, 0x6b, 0x33, 0xfb, 0x19, 0xde, 0x5c,
	0xd2, 0x9a, 0xab, 0xb4, 0xcb, 0xaf, 0xb2, 0xd4, 0x16, 0x6f, 0x93, 0x8b, 0xdd, 0x47, 0xf8, 0x9a,
	0x72, 0x5a, 0x45, 0x20, 0xdb, 0xb8, 0xc6, 0xb3, 0xa4, 0xcf, 0x46, 0xa7, 0xf9, 0x4d, 0xd1, 0xed,
	0xe3, 0xad, 0x55, 0xdd, 0x65, 0xb3, 0xf9, 0x27, 0x1b, 0xb8, 0xaa, 0x4c, 0xc8, 0x27, 0x84, 0xc9,
	0x53, 0x96, 0x2f, 0x42, 0x7f, 0x20, 0xd2, 0x29, 0x9f, 0x7b, 0x36, 0x0f, 0xf6, 0xed, 0x0b, 0x74,
	0x6a, 0x7e, 0xb7, 0xfd, 0x71, 0xce, 0xf1, 0xfe, 0xe4, 0xcf, 0x97, 0x2b, 0x16, 0x21, 0x79, 0xde,
	0x04, 0xd5, 0x19, 0x20, 0x1f, 0x10, 0xae, 0x17, 0x61, 0xd4, 0x67, 0x27, 0xb7, 0xd6, 0x38, 0x14,
	0xd3, 0x62, 0x77, 0xce, 0x6f, 0x34, 0x24, 0x4e, 0x4e, 0xd2, 0x20, 0xf5, 0x22, 0x89, 0x0a, 0x11,
	0xf9, 0xa6, 0xb7, 0xb2, 0x12, 0x12, 0xd2, 0x5d, 0x63, 0x50, 0x9e, 0x37, 0xdb, 0xff, 0x1f, 0xc9,
	0xb9, 0x7b, 0x8a, 0x95, 0x82, 0x7c, 0x45, 0xd8, 0x2a, 0xee, 0xa9, 0x37, 0x79, 0xa1, 0xb2, 0x43,
	0xee, 0xae, 0x71, 0x3b, 0x83, 0x76, 0xef, 0x62, 0xcd, 0x06, 0xea, 0x46, 0x0e, 0xb5, 0x45, 0xac,
	0x22, 0xd4, 0x5b, 0x1d, 0xdc, 0x77, 0xbd, 0xdd, 0xa3, 0xa9, 0x83, 0x8e, 0xa7, 0x0e, 0xfa, 0x3d,
	0x75, 0xd0, 0xe7, 0x99, 0x53, 0x39, 0x9e, 0x39, 0x95, 0x9f, 0x33, 0xa7, 0xf2, 0xda, 0x0f, 0x23,
	0x39, 0xcc, 0xfa, 0xde, 0x00, 0x12, 0xfa, 0xe0, 0x70, 0x0f, 0xe2, 0x49, 0x08, 0x9c, 0x2e, 0xec,
	0xef, 0x8f, 0x7d, 0x7a, 0x58, 0xf8, 0x11, 0xc9, 0x49, 0xca, 0x44, 0xbf, 0xa6, 0xfe, 0x42, 0x0f,
	0xff, 0x05, 0x00, 0x00, 0xff, 0xff, 0x1d, 0xc2, 0x12, 0xdc, 0x49, 0x05, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// QueryClient is the client API for Query service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type QueryClient interface {
	// GetMilestoneParams queries for the x/milestone parameters
	GetMilestoneParams(ctx context.Context, in *QueryParamsRequest, opts ...grpc.CallOption) (*QueryParamsResponse, error)
	// GetMilestoneCount queries for the milestone count
	GetMilestoneCount(ctx context.Context, in *QueryCountRequest, opts ...grpc.CallOption) (*QueryCountResponse, error)
	// GetLatestMilestone queries for the latest milestone
	GetLatestMilestone(ctx context.Context, in *QueryLatestMilestoneRequest, opts ...grpc.CallOption) (*QueryLatestMilestoneResponse, error)
	// GetMilestoneByNumber queries for the milestone based on the number
	GetMilestoneByNumber(ctx context.Context, in *QueryMilestoneRequest, opts ...grpc.CallOption) (*QueryMilestoneResponse, error)
}

type queryClient struct {
	cc grpc1.ClientConn
}

func NewQueryClient(cc grpc1.ClientConn) QueryClient {
	return &queryClient{cc}
}

func (c *queryClient) GetMilestoneParams(ctx context.Context, in *QueryParamsRequest, opts ...grpc.CallOption) (*QueryParamsResponse, error) {
	out := new(QueryParamsResponse)
	err := c.cc.Invoke(ctx, "/heimdallv2.milestone.Query/GetMilestoneParams", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) GetMilestoneCount(ctx context.Context, in *QueryCountRequest, opts ...grpc.CallOption) (*QueryCountResponse, error) {
	out := new(QueryCountResponse)
	err := c.cc.Invoke(ctx, "/heimdallv2.milestone.Query/GetMilestoneCount", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) GetLatestMilestone(ctx context.Context, in *QueryLatestMilestoneRequest, opts ...grpc.CallOption) (*QueryLatestMilestoneResponse, error) {
	out := new(QueryLatestMilestoneResponse)
	err := c.cc.Invoke(ctx, "/heimdallv2.milestone.Query/GetLatestMilestone", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) GetMilestoneByNumber(ctx context.Context, in *QueryMilestoneRequest, opts ...grpc.CallOption) (*QueryMilestoneResponse, error) {
	out := new(QueryMilestoneResponse)
	err := c.cc.Invoke(ctx, "/heimdallv2.milestone.Query/GetMilestoneByNumber", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// QueryServer is the server API for Query service.
type QueryServer interface {
	// GetMilestoneParams queries for the x/milestone parameters
	GetMilestoneParams(context.Context, *QueryParamsRequest) (*QueryParamsResponse, error)
	// GetMilestoneCount queries for the milestone count
	GetMilestoneCount(context.Context, *QueryCountRequest) (*QueryCountResponse, error)
	// GetLatestMilestone queries for the latest milestone
	GetLatestMilestone(context.Context, *QueryLatestMilestoneRequest) (*QueryLatestMilestoneResponse, error)
	// GetMilestoneByNumber queries for the milestone based on the number
	GetMilestoneByNumber(context.Context, *QueryMilestoneRequest) (*QueryMilestoneResponse, error)
}

// UnimplementedQueryServer can be embedded to have forward compatible implementations.
type UnimplementedQueryServer struct {
}

func (*UnimplementedQueryServer) GetMilestoneParams(ctx context.Context, req *QueryParamsRequest) (*QueryParamsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMilestoneParams not implemented")
}
func (*UnimplementedQueryServer) GetMilestoneCount(ctx context.Context, req *QueryCountRequest) (*QueryCountResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMilestoneCount not implemented")
}
func (*UnimplementedQueryServer) GetLatestMilestone(ctx context.Context, req *QueryLatestMilestoneRequest) (*QueryLatestMilestoneResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetLatestMilestone not implemented")
}
func (*UnimplementedQueryServer) GetMilestoneByNumber(ctx context.Context, req *QueryMilestoneRequest) (*QueryMilestoneResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMilestoneByNumber not implemented")
}

func RegisterQueryServer(s grpc1.Server, srv QueryServer) {
	s.RegisterService(&_Query_serviceDesc, srv)
}

func _Query_GetMilestoneParams_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryParamsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).GetMilestoneParams(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/heimdallv2.milestone.Query/GetMilestoneParams",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).GetMilestoneParams(ctx, req.(*QueryParamsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_GetMilestoneCount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryCountRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).GetMilestoneCount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/heimdallv2.milestone.Query/GetMilestoneCount",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).GetMilestoneCount(ctx, req.(*QueryCountRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_GetLatestMilestone_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryLatestMilestoneRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).GetLatestMilestone(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/heimdallv2.milestone.Query/GetLatestMilestone",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).GetLatestMilestone(ctx, req.(*QueryLatestMilestoneRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_GetMilestoneByNumber_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryMilestoneRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).GetMilestoneByNumber(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/heimdallv2.milestone.Query/GetMilestoneByNumber",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).GetMilestoneByNumber(ctx, req.(*QueryMilestoneRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Query_serviceDesc = grpc.ServiceDesc{
	ServiceName: "heimdallv2.milestone.Query",
	HandlerType: (*QueryServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetMilestoneParams",
			Handler:    _Query_GetMilestoneParams_Handler,
		},
		{
			MethodName: "GetMilestoneCount",
			Handler:    _Query_GetMilestoneCount_Handler,
		},
		{
			MethodName: "GetLatestMilestone",
			Handler:    _Query_GetLatestMilestone_Handler,
		},
		{
			MethodName: "GetMilestoneByNumber",
			Handler:    _Query_GetMilestoneByNumber_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "heimdallv2/milestone/query.proto",
}

func (m *QueryParamsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryParamsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryParamsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *QueryParamsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryParamsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryParamsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.Params.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryCountRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryCountRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryCountRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *QueryCountResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryCountResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryCountResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Count != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.Count))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *QueryLatestMilestoneRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryLatestMilestoneRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryLatestMilestoneRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *QueryLatestMilestoneResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryLatestMilestoneResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryLatestMilestoneResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.Milestone.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryMilestoneRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryMilestoneRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryMilestoneRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Number != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.Number))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *QueryMilestoneResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryMilestoneResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryMilestoneResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.Milestone.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func encodeVarintQuery(dAtA []byte, offset int, v uint64) int {
	offset -= sovQuery(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *QueryParamsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *QueryParamsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Params.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryCountRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *QueryCountResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Count != 0 {
		n += 1 + sovQuery(uint64(m.Count))
	}
	return n
}

func (m *QueryLatestMilestoneRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *QueryLatestMilestoneResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Milestone.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryMilestoneRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Number != 0 {
		n += 1 + sovQuery(uint64(m.Number))
	}
	return n
}

func (m *QueryMilestoneResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Milestone.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func sovQuery(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozQuery(x uint64) (n int) {
	return sovQuery(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *QueryParamsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryParamsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryParamsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryParamsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryParamsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryParamsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Params", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Params.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryCountRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryCountRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryCountRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryCountResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryCountResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryCountResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Count", wireType)
			}
			m.Count = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Count |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryLatestMilestoneRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryLatestMilestoneRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryLatestMilestoneRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryLatestMilestoneResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryLatestMilestoneResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryLatestMilestoneResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Milestone", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Milestone.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryMilestoneRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryMilestoneRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryMilestoneRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Number", wireType)
			}
			m.Number = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Number |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryMilestoneResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryMilestoneResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryMilestoneResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Milestone", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Milestone.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipQuery(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthQuery
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupQuery
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthQuery
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthQuery        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowQuery          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupQuery = fmt.Errorf("proto: unexpected end of group")
)
