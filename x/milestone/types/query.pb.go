// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: heimdallv2/milestone/query.proto

package types

import (
	context "context"
	fmt "fmt"
	types "github.com/0xPolygon/heimdall-v2/x/stake/types"
	_ "github.com/cosmos/cosmos-sdk/types/query"
	_ "github.com/cosmos/cosmos-sdk/types/tx/amino"
	_ "github.com/cosmos/gogoproto/gogoproto"
	grpc1 "github.com/cosmos/gogoproto/grpc"
	proto "github.com/cosmos/gogoproto/proto"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// QueryParamsRequest is request type for Params
// RPC method.
type QueryParamsRequest struct {
}

func (m *QueryParamsRequest) Reset()         { *m = QueryParamsRequest{} }
func (m *QueryParamsRequest) String() string { return proto.CompactTextString(m) }
func (*QueryParamsRequest) ProtoMessage()    {}
func (*QueryParamsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_2569eb9c5aa780c5, []int{0}
}
func (m *QueryParamsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryParamsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryParamsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryParamsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryParamsRequest.Merge(m, src)
}
func (m *QueryParamsRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryParamsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryParamsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryParamsRequest proto.InternalMessageInfo

// QueryParamsResponse is response type for the Params
// RPC method
type QueryParamsResponse struct {
	Params Params `protobuf:"bytes,1,opt,name=params,proto3" json:"params"`
}

func (m *QueryParamsResponse) Reset()         { *m = QueryParamsResponse{} }
func (m *QueryParamsResponse) String() string { return proto.CompactTextString(m) }
func (*QueryParamsResponse) ProtoMessage()    {}
func (*QueryParamsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_2569eb9c5aa780c5, []int{1}
}
func (m *QueryParamsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryParamsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryParamsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryParamsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryParamsResponse.Merge(m, src)
}
func (m *QueryParamsResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryParamsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryParamsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryParamsResponse proto.InternalMessageInfo

func (m *QueryParamsResponse) GetParams() Params {
	if m != nil {
		return m.Params
	}
	return Params{}
}

// QueryCountRequest is request type for the Count RPC method
type QueryCountRequest struct {
}

func (m *QueryCountRequest) Reset()         { *m = QueryCountRequest{} }
func (m *QueryCountRequest) String() string { return proto.CompactTextString(m) }
func (*QueryCountRequest) ProtoMessage()    {}
func (*QueryCountRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_2569eb9c5aa780c5, []int{2}
}
func (m *QueryCountRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryCountRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryCountRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryCountRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryCountRequest.Merge(m, src)
}
func (m *QueryCountRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryCountRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryCountRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryCountRequest proto.InternalMessageInfo

// QueryCountResponse is response type for the Count RPC method
type QueryCountResponse struct {
	Count uint64 `protobuf:"varint,1,opt,name=count,proto3" json:"count,omitempty"`
}

func (m *QueryCountResponse) Reset()         { *m = QueryCountResponse{} }
func (m *QueryCountResponse) String() string { return proto.CompactTextString(m) }
func (*QueryCountResponse) ProtoMessage()    {}
func (*QueryCountResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_2569eb9c5aa780c5, []int{3}
}
func (m *QueryCountResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryCountResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryCountResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryCountResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryCountResponse.Merge(m, src)
}
func (m *QueryCountResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryCountResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryCountResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryCountResponse proto.InternalMessageInfo

func (m *QueryCountResponse) GetCount() uint64 {
	if m != nil {
		return m.Count
	}
	return 0
}

// QueryLastNoAckRequest is request type for the LastNoAckCount RPC
// method
type QueryLastNoAckRequest struct {
}

func (m *QueryLastNoAckRequest) Reset()         { *m = QueryLastNoAckRequest{} }
func (m *QueryLastNoAckRequest) String() string { return proto.CompactTextString(m) }
func (*QueryLastNoAckRequest) ProtoMessage()    {}
func (*QueryLastNoAckRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_2569eb9c5aa780c5, []int{4}
}
func (m *QueryLastNoAckRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryLastNoAckRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryLastNoAckRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryLastNoAckRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryLastNoAckRequest.Merge(m, src)
}
func (m *QueryLastNoAckRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryLastNoAckRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryLastNoAckRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryLastNoAckRequest proto.InternalMessageInfo

// QueryLastNoAckResponse is response type for the LastNoAckCount RPC
// method
type QueryLastNoAckResponse struct {
	Result uint64 `protobuf:"varint,1,opt,name=result,proto3" json:"result,omitempty"`
}

func (m *QueryLastNoAckResponse) Reset()         { *m = QueryLastNoAckResponse{} }
func (m *QueryLastNoAckResponse) String() string { return proto.CompactTextString(m) }
func (*QueryLastNoAckResponse) ProtoMessage()    {}
func (*QueryLastNoAckResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_2569eb9c5aa780c5, []int{5}
}
func (m *QueryLastNoAckResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryLastNoAckResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryLastNoAckResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryLastNoAckResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryLastNoAckResponse.Merge(m, src)
}
func (m *QueryLastNoAckResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryLastNoAckResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryLastNoAckResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryLastNoAckResponse proto.InternalMessageInfo

func (m *QueryLastNoAckResponse) GetResult() uint64 {
	if m != nil {
		return m.Result
	}
	return 0
}

// QueryLatestMilestoneRequest is request type for the LatestMilestone
// RPC method
type QueryLatestMilestoneRequest struct {
}

func (m *QueryLatestMilestoneRequest) Reset()         { *m = QueryLatestMilestoneRequest{} }
func (m *QueryLatestMilestoneRequest) String() string { return proto.CompactTextString(m) }
func (*QueryLatestMilestoneRequest) ProtoMessage()    {}
func (*QueryLatestMilestoneRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_2569eb9c5aa780c5, []int{6}
}
func (m *QueryLatestMilestoneRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryLatestMilestoneRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryLatestMilestoneRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryLatestMilestoneRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryLatestMilestoneRequest.Merge(m, src)
}
func (m *QueryLatestMilestoneRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryLatestMilestoneRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryLatestMilestoneRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryLatestMilestoneRequest proto.InternalMessageInfo

// QueryLatestMilestoneResponse is response type for the LatestMilestone
// RPC method
type QueryLatestMilestoneResponse struct {
	Milestone Milestone `protobuf:"bytes,1,opt,name=milestone,proto3" json:"milestone"`
}

func (m *QueryLatestMilestoneResponse) Reset()         { *m = QueryLatestMilestoneResponse{} }
func (m *QueryLatestMilestoneResponse) String() string { return proto.CompactTextString(m) }
func (*QueryLatestMilestoneResponse) ProtoMessage()    {}
func (*QueryLatestMilestoneResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_2569eb9c5aa780c5, []int{7}
}
func (m *QueryLatestMilestoneResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryLatestMilestoneResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryLatestMilestoneResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryLatestMilestoneResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryLatestMilestoneResponse.Merge(m, src)
}
func (m *QueryLatestMilestoneResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryLatestMilestoneResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryLatestMilestoneResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryLatestMilestoneResponse proto.InternalMessageInfo

func (m *QueryLatestMilestoneResponse) GetMilestone() Milestone {
	if m != nil {
		return m.Milestone
	}
	return Milestone{}
}

// QueryMilestoneRequest is request type for the Milestone  RPC
// method
type QueryMilestoneRequest struct {
	Number uint64 `protobuf:"varint,1,opt,name=number,proto3" json:"number,omitempty"`
}

func (m *QueryMilestoneRequest) Reset()         { *m = QueryMilestoneRequest{} }
func (m *QueryMilestoneRequest) String() string { return proto.CompactTextString(m) }
func (*QueryMilestoneRequest) ProtoMessage()    {}
func (*QueryMilestoneRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_2569eb9c5aa780c5, []int{8}
}
func (m *QueryMilestoneRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryMilestoneRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryMilestoneRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryMilestoneRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryMilestoneRequest.Merge(m, src)
}
func (m *QueryMilestoneRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryMilestoneRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryMilestoneRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryMilestoneRequest proto.InternalMessageInfo

func (m *QueryMilestoneRequest) GetNumber() uint64 {
	if m != nil {
		return m.Number
	}
	return 0
}

// QueryMilestoneResponse is response type for the Milestone
// RPC method
type QueryMilestoneResponse struct {
	Milestone Milestone `protobuf:"bytes,1,opt,name=milestone,proto3" json:"milestone"`
}

func (m *QueryMilestoneResponse) Reset()         { *m = QueryMilestoneResponse{} }
func (m *QueryMilestoneResponse) String() string { return proto.CompactTextString(m) }
func (*QueryMilestoneResponse) ProtoMessage()    {}
func (*QueryMilestoneResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_2569eb9c5aa780c5, []int{9}
}
func (m *QueryMilestoneResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryMilestoneResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryMilestoneResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryMilestoneResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryMilestoneResponse.Merge(m, src)
}
func (m *QueryMilestoneResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryMilestoneResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryMilestoneResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryMilestoneResponse proto.InternalMessageInfo

func (m *QueryMilestoneResponse) GetMilestone() Milestone {
	if m != nil {
		return m.Milestone
	}
	return Milestone{}
}

// QueryLatestNoAckMilestoneRequest is request type for the
// LatestNoAckMilestone RPC method
type QueryLatestNoAckMilestoneRequest struct {
}

func (m *QueryLatestNoAckMilestoneRequest) Reset()         { *m = QueryLatestNoAckMilestoneRequest{} }
func (m *QueryLatestNoAckMilestoneRequest) String() string { return proto.CompactTextString(m) }
func (*QueryLatestNoAckMilestoneRequest) ProtoMessage()    {}
func (*QueryLatestNoAckMilestoneRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_2569eb9c5aa780c5, []int{10}
}
func (m *QueryLatestNoAckMilestoneRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryLatestNoAckMilestoneRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryLatestNoAckMilestoneRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryLatestNoAckMilestoneRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryLatestNoAckMilestoneRequest.Merge(m, src)
}
func (m *QueryLatestNoAckMilestoneRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryLatestNoAckMilestoneRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryLatestNoAckMilestoneRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryLatestNoAckMilestoneRequest proto.InternalMessageInfo

// QueryLatestNoAckMilestoneResponse is response type for the
// LatestNoAckMilestone RPC method
type QueryLatestNoAckMilestoneResponse struct {
	Result string `protobuf:"bytes,1,opt,name=result,proto3" json:"result,omitempty"`
}

func (m *QueryLatestNoAckMilestoneResponse) Reset()         { *m = QueryLatestNoAckMilestoneResponse{} }
func (m *QueryLatestNoAckMilestoneResponse) String() string { return proto.CompactTextString(m) }
func (*QueryLatestNoAckMilestoneResponse) ProtoMessage()    {}
func (*QueryLatestNoAckMilestoneResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_2569eb9c5aa780c5, []int{11}
}
func (m *QueryLatestNoAckMilestoneResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryLatestNoAckMilestoneResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryLatestNoAckMilestoneResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryLatestNoAckMilestoneResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryLatestNoAckMilestoneResponse.Merge(m, src)
}
func (m *QueryLatestNoAckMilestoneResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryLatestNoAckMilestoneResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryLatestNoAckMilestoneResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryLatestNoAckMilestoneResponse proto.InternalMessageInfo

func (m *QueryLatestNoAckMilestoneResponse) GetResult() string {
	if m != nil {
		return m.Result
	}
	return ""
}

// QueryNoAckMilestoneByIDRequest is request type for the
// NoAckMilestoneByID RPC method
type QueryNoAckMilestoneByIDRequest struct {
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (m *QueryNoAckMilestoneByIDRequest) Reset()         { *m = QueryNoAckMilestoneByIDRequest{} }
func (m *QueryNoAckMilestoneByIDRequest) String() string { return proto.CompactTextString(m) }
func (*QueryNoAckMilestoneByIDRequest) ProtoMessage()    {}
func (*QueryNoAckMilestoneByIDRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_2569eb9c5aa780c5, []int{12}
}
func (m *QueryNoAckMilestoneByIDRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryNoAckMilestoneByIDRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryNoAckMilestoneByIDRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryNoAckMilestoneByIDRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryNoAckMilestoneByIDRequest.Merge(m, src)
}
func (m *QueryNoAckMilestoneByIDRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryNoAckMilestoneByIDRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryNoAckMilestoneByIDRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryNoAckMilestoneByIDRequest proto.InternalMessageInfo

func (m *QueryNoAckMilestoneByIDRequest) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

// QueryNoAckMilestoneByIDResponse is response type for the
// NoAckMilestoneByID RPC method
type QueryNoAckMilestoneByIDResponse struct {
	Result bool `protobuf:"varint,1,opt,name=result,proto3" json:"result,omitempty"`
}

func (m *QueryNoAckMilestoneByIDResponse) Reset()         { *m = QueryNoAckMilestoneByIDResponse{} }
func (m *QueryNoAckMilestoneByIDResponse) String() string { return proto.CompactTextString(m) }
func (*QueryNoAckMilestoneByIDResponse) ProtoMessage()    {}
func (*QueryNoAckMilestoneByIDResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_2569eb9c5aa780c5, []int{13}
}
func (m *QueryNoAckMilestoneByIDResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryNoAckMilestoneByIDResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryNoAckMilestoneByIDResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryNoAckMilestoneByIDResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryNoAckMilestoneByIDResponse.Merge(m, src)
}
func (m *QueryNoAckMilestoneByIDResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryNoAckMilestoneByIDResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryNoAckMilestoneByIDResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryNoAckMilestoneByIDResponse proto.InternalMessageInfo

func (m *QueryNoAckMilestoneByIDResponse) GetResult() bool {
	if m != nil {
		return m.Result
	}
	return false
}

// QueryMilestoneProposerRequest is request type for the
// MilestoneProposer RPC method
type QueryMilestoneProposerRequest struct {
	// times represents the number of subsequent milestone's proposers
	Times uint64 `protobuf:"varint,1,opt,name=times,proto3" json:"times,omitempty"`
}

func (m *QueryMilestoneProposerRequest) Reset()         { *m = QueryMilestoneProposerRequest{} }
func (m *QueryMilestoneProposerRequest) String() string { return proto.CompactTextString(m) }
func (*QueryMilestoneProposerRequest) ProtoMessage()    {}
func (*QueryMilestoneProposerRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_2569eb9c5aa780c5, []int{14}
}
func (m *QueryMilestoneProposerRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryMilestoneProposerRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryMilestoneProposerRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryMilestoneProposerRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryMilestoneProposerRequest.Merge(m, src)
}
func (m *QueryMilestoneProposerRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryMilestoneProposerRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryMilestoneProposerRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryMilestoneProposerRequest proto.InternalMessageInfo

func (m *QueryMilestoneProposerRequest) GetTimes() uint64 {
	if m != nil {
		return m.Times
	}
	return 0
}

// QueryMilestoneProposerResponse is response type for the
// Query/MilestoneProposer RPC method
type QueryMilestoneProposerResponse struct {
	// proposers defines the validator info.
	Proposers []types.Validator `protobuf:"bytes,1,rep,name=proposers,proto3" json:"proposers"`
}

func (m *QueryMilestoneProposerResponse) Reset()         { *m = QueryMilestoneProposerResponse{} }
func (m *QueryMilestoneProposerResponse) String() string { return proto.CompactTextString(m) }
func (*QueryMilestoneProposerResponse) ProtoMessage()    {}
func (*QueryMilestoneProposerResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_2569eb9c5aa780c5, []int{15}
}
func (m *QueryMilestoneProposerResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryMilestoneProposerResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryMilestoneProposerResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryMilestoneProposerResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryMilestoneProposerResponse.Merge(m, src)
}
func (m *QueryMilestoneProposerResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryMilestoneProposerResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryMilestoneProposerResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryMilestoneProposerResponse proto.InternalMessageInfo

func (m *QueryMilestoneProposerResponse) GetProposers() []types.Validator {
	if m != nil {
		return m.Proposers
	}
	return nil
}

func init() {
	proto.RegisterType((*QueryParamsRequest)(nil), "heimdallv2.milestone.QueryParamsRequest")
	proto.RegisterType((*QueryParamsResponse)(nil), "heimdallv2.milestone.QueryParamsResponse")
	proto.RegisterType((*QueryCountRequest)(nil), "heimdallv2.milestone.QueryCountRequest")
	proto.RegisterType((*QueryCountResponse)(nil), "heimdallv2.milestone.QueryCountResponse")
	proto.RegisterType((*QueryLastNoAckRequest)(nil), "heimdallv2.milestone.QueryLastNoAckRequest")
	proto.RegisterType((*QueryLastNoAckResponse)(nil), "heimdallv2.milestone.QueryLastNoAckResponse")
	proto.RegisterType((*QueryLatestMilestoneRequest)(nil), "heimdallv2.milestone.QueryLatestMilestoneRequest")
	proto.RegisterType((*QueryLatestMilestoneResponse)(nil), "heimdallv2.milestone.QueryLatestMilestoneResponse")
	proto.RegisterType((*QueryMilestoneRequest)(nil), "heimdallv2.milestone.QueryMilestoneRequest")
	proto.RegisterType((*QueryMilestoneResponse)(nil), "heimdallv2.milestone.QueryMilestoneResponse")
	proto.RegisterType((*QueryLatestNoAckMilestoneRequest)(nil), "heimdallv2.milestone.QueryLatestNoAckMilestoneRequest")
	proto.RegisterType((*QueryLatestNoAckMilestoneResponse)(nil), "heimdallv2.milestone.QueryLatestNoAckMilestoneResponse")
	proto.RegisterType((*QueryNoAckMilestoneByIDRequest)(nil), "heimdallv2.milestone.QueryNoAckMilestoneByIDRequest")
	proto.RegisterType((*QueryNoAckMilestoneByIDResponse)(nil), "heimdallv2.milestone.QueryNoAckMilestoneByIDResponse")
	proto.RegisterType((*QueryMilestoneProposerRequest)(nil), "heimdallv2.milestone.QueryMilestoneProposerRequest")
	proto.RegisterType((*QueryMilestoneProposerResponse)(nil), "heimdallv2.milestone.QueryMilestoneProposerResponse")
}

func init() { proto.RegisterFile("heimdallv2/milestone/query.proto", fileDescriptor_2569eb9c5aa780c5) }

var fileDescriptor_2569eb9c5aa780c5 = []byte{
	// 759 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xb4, 0x56, 0xcd, 0x6e, 0xd3, 0x4a,
	0x14, 0x8e, 0x7b, 0x6f, 0xa2, 0xe6, 0x74, 0x71, 0x6f, 0x26, 0x69, 0x6f, 0xe5, 0x34, 0x6e, 0xae,
	0x41, 0x22, 0xfc, 0x34, 0xa6, 0x6e, 0x69, 0x37, 0x48, 0x40, 0xe8, 0x02, 0xa4, 0x82, 0x4a, 0x17,
	0x5d, 0xb0, 0x73, 0x92, 0x21, 0xb5, 0x6a, 0x7b, 0x5c, 0xcf, 0x24, 0x6a, 0x54, 0x65, 0xc3, 0xaa,
	0x4b, 0x24, 0x36, 0x3c, 0x01, 0xaa, 0x10, 0x0b, 0x1e, 0xa3, 0xcb, 0x4a, 0x6c, 0x58, 0x21, 0xd4,
	0x22, 0xf1, 0x1a, 0x28, 0xe3, 0x71, 0xec, 0x38, 0x6e, 0xd2, 0x2c, 0xd8, 0x54, 0xd6, 0x99, 0xf3,
	0xfd, 0x9c, 0x33, 0xfd, 0x46, 0x81, 0xf2, 0x3e, 0x36, 0xed, 0xa6, 0x61, 0x59, 0x1d, 0x5d, 0xb3,
	0x4d, 0x0b, 0x53, 0x46, 0x1c, 0xac, 0x1d, 0xb6, 0xb1, 0xd7, 0xad, 0xba, 0x1e, 0x61, 0x04, 0x15,
	0xc2, 0x8e, 0xea, 0xa0, 0x43, 0x2e, 0xb4, 0x48, 0x8b, 0xf0, 0x06, 0xad, 0xff, 0xe5, 0xf7, 0xca,
	0x4b, 0x2d, 0x42, 0x5a, 0x16, 0xd6, 0x0c, 0xd7, 0xd4, 0x0c, 0xc7, 0x21, 0xcc, 0x60, 0x26, 0x71,
	0xa8, 0x38, 0x2d, 0x36, 0x08, 0xb5, 0x09, 0xf5, 0xd9, 0xb5, 0xce, 0x6a, 0x54, 0x46, 0xce, 0x19,
	0xb6, 0xe9, 0x10, 0x8d, 0xff, 0x15, 0xa5, 0x9b, 0x89, 0xde, 0x06, 0x5f, 0xa2, 0x2b, 0x3a, 0x01,
	0x65, 0xc6, 0x01, 0xd6, 0x3a, 0x86, 0x65, 0x36, 0x0d, 0x46, 0x3c, 0xbf, 0x43, 0x2d, 0x00, 0x7a,
	0xd5, 0x57, 0xda, 0x31, 0x3c, 0xc3, 0xa6, 0xbb, 0xf8, 0xb0, 0x8d, 0x29, 0x53, 0xf7, 0x20, 0x3f,
	0x54, 0xa5, 0x2e, 0x71, 0x28, 0x46, 0x8f, 0x20, 0xe3, 0xf2, 0xca, 0xa2, 0x54, 0x96, 0x2a, 0x73,
	0xfa, 0x52, 0x35, 0x69, 0xfe, 0xaa, 0x8f, 0xaa, 0x65, 0xcf, 0xbe, 0x2f, 0xa7, 0x4e, 0x7f, 0x7d,
	0xb9, 0x23, 0xed, 0x0a, 0x98, 0x9a, 0x87, 0x1c, 0xe7, 0x7d, 0x4a, 0xda, 0x0e, 0x0b, 0xc4, 0x56,
	0x85, 0x05, 0x51, 0x14, 0x5a, 0x45, 0x48, 0x37, 0xfa, 0x05, 0x2e, 0xf5, 0x77, 0x2d, 0xed, 0x13,
	0xf9, 0x35, 0xf5, 0x3f, 0x98, 0xe7, 0x90, 0x6d, 0x83, 0xb2, 0x97, 0xe4, 0x49, 0xe3, 0x20, 0xe0,
	0xda, 0x84, 0x85, 0xf8, 0x81, 0xe0, 0x2b, 0x41, 0xc6, 0xc3, 0xb4, 0x6d, 0xc5, 0x08, 0x45, 0x51,
	0x2d, 0x41, 0x51, 0x00, 0x19, 0xa6, 0xec, 0x45, 0x30, 0x4b, 0xc0, 0xbb, 0x0f, 0x4b, 0xc9, 0xc7,
	0x82, 0xfd, 0x19, 0x64, 0x07, 0xf3, 0x8b, 0xe5, 0x2c, 0x27, 0x2f, 0x67, 0x80, 0x8d, 0xee, 0x27,
	0x04, 0xab, 0x1b, 0x62, 0xb4, 0xb8, 0x85, 0xfe, 0x00, 0x4e, 0xdb, 0xae, 0x63, 0x2f, 0x36, 0x80,
	0x5f, 0x54, 0xeb, 0x62, 0xf2, 0x3f, 0xe9, 0x4d, 0x85, 0x72, 0x64, 0x0b, 0x7c, 0xbf, 0x23, 0x9b,
	0xaa, 0xc1, 0xff, 0x63, 0x7a, 0x12, 0x2f, 0x23, 0x1b, 0xbf, 0x8c, 0x4d, 0x50, 0x38, 0xc7, 0x30,
	0xba, 0xd6, 0x7d, 0xbe, 0x15, 0x2c, 0x63, 0x1e, 0x66, 0xcc, 0xe6, 0x30, 0x78, 0xc6, 0x6c, 0xaa,
	0x8f, 0x61, 0xf9, 0x4a, 0x60, 0xa2, 0xf4, 0x6c, 0x5c, 0xfa, 0x21, 0x94, 0x86, 0xd7, 0xb8, 0xe3,
	0x11, 0x97, 0x50, 0xec, 0x05, 0xca, 0x45, 0x48, 0x33, 0xd3, 0xc6, 0x34, 0xf6, 0x7f, 0xc9, 0x6b,
	0xea, 0x1b, 0x61, 0x3c, 0x01, 0x2d, 0xe4, 0xb7, 0x20, 0xeb, 0x8a, 0x5a, 0x9f, 0xe2, 0xaf, 0xca,
	0x9c, 0x5e, 0x8c, 0x5e, 0x06, 0x4f, 0x69, 0x75, 0x2f, 0x48, 0xe9, 0xd0, 0x45, 0x0c, 0x80, 0xfa,
	0xa7, 0x59, 0x48, 0x73, 0x21, 0xd4, 0x83, 0x8c, 0x1f, 0x37, 0x54, 0x49, 0xbe, 0xd3, 0xd1, 0x74,
	0xcb, 0xb7, 0xaf, 0xd1, 0xe9, 0xdb, 0x55, 0x95, 0x93, 0xbe, 0xf4, 0xdb, 0xaf, 0x3f, 0xdf, 0xcf,
	0xe4, 0x51, 0x2e, 0xf2, 0xd2, 0xf8, 0x81, 0x46, 0x5d, 0x48, 0xf3, 0xd8, 0xa2, 0x5b, 0x63, 0x38,
	0xa3, 0x69, 0x97, 0x2b, 0x93, 0x1b, 0x85, 0x76, 0x29, 0xd4, 0x46, 0xe8, 0xdf, 0x88, 0x36, 0x7f,
	0x03, 0xd0, 0x07, 0x09, 0xfe, 0x89, 0xc5, 0x11, 0xad, 0x8e, 0x21, 0x4f, 0x4e, 0xb6, 0xac, 0x4f,
	0x03, 0x99, 0xb4, 0x15, 0x8b, 0x03, 0xd0, 0x89, 0x04, 0xd9, 0xd0, 0xd4, 0xdd, 0x31, 0x0a, 0x23,
	0x76, 0xee, 0x5d, 0xaf, 0x59, 0x18, 0x29, 0x87, 0x46, 0xe6, 0x51, 0x3e, 0x62, 0xe4, 0xd8, 0x7f,
	0x15, 0x7a, 0xe8, 0xb3, 0x04, 0x85, 0xa4, 0x28, 0xa2, 0x8d, 0x89, 0x73, 0x27, 0xe6, 0x5b, 0xde,
	0x9c, 0x1a, 0x27, 0xbc, 0xde, 0x08, 0xbd, 0x2e, 0xa2, 0x85, 0xa1, 0xa5, 0x51, 0xb6, 0xe2, 0x90,
	0x15, 0xa3, 0x71, 0x80, 0x3e, 0x4a, 0x80, 0x46, 0xc3, 0x8b, 0xd6, 0xc7, 0x88, 0x5e, 0xf9, 0x48,
	0xc8, 0x0f, 0xa6, 0x44, 0x4d, 0x32, 0xea, 0x7b, 0xd4, 0x8e, 0xcd, 0x66, 0x0f, 0x9d, 0x4a, 0x90,
	0x1b, 0x49, 0x39, 0x5a, 0xbb, 0xce, 0xed, 0xc5, 0x5e, 0x14, 0x79, 0x7d, 0x3a, 0x90, 0x70, 0x59,
	0x09, 0x5d, 0x96, 0x50, 0x31, 0x9a, 0x4c, 0xd1, 0xa9, 0x1d, 0xf3, 0x37, 0xa9, 0x57, 0xdb, 0x3e,
	0xbb, 0x50, 0xa4, 0xf3, 0x0b, 0x45, 0xfa, 0x71, 0xa1, 0x48, 0xef, 0x2e, 0x95, 0xd4, 0xf9, 0xa5,
	0x92, 0xfa, 0x76, 0xa9, 0xa4, 0x5e, 0xeb, 0x2d, 0x93, 0xed, 0xb7, 0xeb, 0xd5, 0x06, 0xb1, 0xb5,
	0xfb, 0x47, 0x3b, 0xc4, 0xea, 0xb6, 0x88, 0xa3, 0x05, 0x6e, 0x56, 0x3a, 0xba, 0x76, 0x14, 0x21,
	0x66, 0x5d, 0x17, 0xd3, 0x7a, 0x86, 0xff, 0x6e, 0x58, 0xfb, 0x1d, 0x00, 0x00, 0xff, 0xff, 0x85,
	0xda, 0x7e, 0xde, 0x1d, 0x09, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// QueryClient is the client API for Query service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type QueryClient interface {
	// Params queries for the milestone parameters
	Params(ctx context.Context, in *QueryParamsRequest, opts ...grpc.CallOption) (*QueryParamsResponse, error)
	// Count queries for the milestone count
	Count(ctx context.Context, in *QueryCountRequest, opts ...grpc.CallOption) (*QueryCountResponse, error)
	// LatestMilestone queries for the latest milestone
	LatestMilestone(ctx context.Context, in *QueryLatestMilestoneRequest, opts ...grpc.CallOption) (*QueryLatestMilestoneResponse, error)
	// Milestone queries for the milestone based on the number
	Milestone(ctx context.Context, in *QueryMilestoneRequest, opts ...grpc.CallOption) (*QueryMilestoneResponse, error)
	// LatestNoAckMilestone query for the LatestNoAck
	LatestNoAckMilestone(ctx context.Context, in *QueryLatestNoAckMilestoneRequest, opts ...grpc.CallOption) (*QueryLatestNoAckMilestoneResponse, error)
	// NoAckMilestoneByID query for the no-ack by ID
	NoAckMilestoneByID(ctx context.Context, in *QueryNoAckMilestoneByIDRequest, opts ...grpc.CallOption) (*QueryNoAckMilestoneByIDResponse, error)
	// MilestoneProposer queries for the milestone proposer
	MilestoneProposer(ctx context.Context, in *QueryMilestoneProposerRequest, opts ...grpc.CallOption) (*QueryMilestoneProposerResponse, error)
}

type queryClient struct {
	cc grpc1.ClientConn
}

func NewQueryClient(cc grpc1.ClientConn) QueryClient {
	return &queryClient{cc}
}

func (c *queryClient) Params(ctx context.Context, in *QueryParamsRequest, opts ...grpc.CallOption) (*QueryParamsResponse, error) {
	out := new(QueryParamsResponse)
	err := c.cc.Invoke(ctx, "/heimdallv2.milestone.Query/Params", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) Count(ctx context.Context, in *QueryCountRequest, opts ...grpc.CallOption) (*QueryCountResponse, error) {
	out := new(QueryCountResponse)
	err := c.cc.Invoke(ctx, "/heimdallv2.milestone.Query/Count", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) LatestMilestone(ctx context.Context, in *QueryLatestMilestoneRequest, opts ...grpc.CallOption) (*QueryLatestMilestoneResponse, error) {
	out := new(QueryLatestMilestoneResponse)
	err := c.cc.Invoke(ctx, "/heimdallv2.milestone.Query/LatestMilestone", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) Milestone(ctx context.Context, in *QueryMilestoneRequest, opts ...grpc.CallOption) (*QueryMilestoneResponse, error) {
	out := new(QueryMilestoneResponse)
	err := c.cc.Invoke(ctx, "/heimdallv2.milestone.Query/Milestone", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) LatestNoAckMilestone(ctx context.Context, in *QueryLatestNoAckMilestoneRequest, opts ...grpc.CallOption) (*QueryLatestNoAckMilestoneResponse, error) {
	out := new(QueryLatestNoAckMilestoneResponse)
	err := c.cc.Invoke(ctx, "/heimdallv2.milestone.Query/LatestNoAckMilestone", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) NoAckMilestoneByID(ctx context.Context, in *QueryNoAckMilestoneByIDRequest, opts ...grpc.CallOption) (*QueryNoAckMilestoneByIDResponse, error) {
	out := new(QueryNoAckMilestoneByIDResponse)
	err := c.cc.Invoke(ctx, "/heimdallv2.milestone.Query/NoAckMilestoneByID", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) MilestoneProposer(ctx context.Context, in *QueryMilestoneProposerRequest, opts ...grpc.CallOption) (*QueryMilestoneProposerResponse, error) {
	out := new(QueryMilestoneProposerResponse)
	err := c.cc.Invoke(ctx, "/heimdallv2.milestone.Query/MilestoneProposer", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// QueryServer is the server API for Query service.
type QueryServer interface {
	// Params queries for the milestone parameters
	Params(context.Context, *QueryParamsRequest) (*QueryParamsResponse, error)
	// Count queries for the milestone count
	Count(context.Context, *QueryCountRequest) (*QueryCountResponse, error)
	// LatestMilestone queries for the latest milestone
	LatestMilestone(context.Context, *QueryLatestMilestoneRequest) (*QueryLatestMilestoneResponse, error)
	// Milestone queries for the milestone based on the number
	Milestone(context.Context, *QueryMilestoneRequest) (*QueryMilestoneResponse, error)
	// LatestNoAckMilestone query for the LatestNoAck
	LatestNoAckMilestone(context.Context, *QueryLatestNoAckMilestoneRequest) (*QueryLatestNoAckMilestoneResponse, error)
	// NoAckMilestoneByID query for the no-ack by ID
	NoAckMilestoneByID(context.Context, *QueryNoAckMilestoneByIDRequest) (*QueryNoAckMilestoneByIDResponse, error)
	// MilestoneProposer queries for the milestone proposer
	MilestoneProposer(context.Context, *QueryMilestoneProposerRequest) (*QueryMilestoneProposerResponse, error)
}

// UnimplementedQueryServer can be embedded to have forward compatible implementations.
type UnimplementedQueryServer struct {
}

func (*UnimplementedQueryServer) Params(ctx context.Context, req *QueryParamsRequest) (*QueryParamsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Params not implemented")
}
func (*UnimplementedQueryServer) Count(ctx context.Context, req *QueryCountRequest) (*QueryCountResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Count not implemented")
}
func (*UnimplementedQueryServer) LatestMilestone(ctx context.Context, req *QueryLatestMilestoneRequest) (*QueryLatestMilestoneResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LatestMilestone not implemented")
}
func (*UnimplementedQueryServer) Milestone(ctx context.Context, req *QueryMilestoneRequest) (*QueryMilestoneResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Milestone not implemented")
}
func (*UnimplementedQueryServer) LatestNoAckMilestone(ctx context.Context, req *QueryLatestNoAckMilestoneRequest) (*QueryLatestNoAckMilestoneResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LatestNoAckMilestone not implemented")
}
func (*UnimplementedQueryServer) NoAckMilestoneByID(ctx context.Context, req *QueryNoAckMilestoneByIDRequest) (*QueryNoAckMilestoneByIDResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method NoAckMilestoneByID not implemented")
}
func (*UnimplementedQueryServer) MilestoneProposer(ctx context.Context, req *QueryMilestoneProposerRequest) (*QueryMilestoneProposerResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MilestoneProposer not implemented")
}

func RegisterQueryServer(s grpc1.Server, srv QueryServer) {
	s.RegisterService(&_Query_serviceDesc, srv)
}

func _Query_Params_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryParamsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).Params(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/heimdallv2.milestone.Query/Params",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).Params(ctx, req.(*QueryParamsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_Count_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryCountRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).Count(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/heimdallv2.milestone.Query/Count",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).Count(ctx, req.(*QueryCountRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_LatestMilestone_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryLatestMilestoneRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).LatestMilestone(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/heimdallv2.milestone.Query/LatestMilestone",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).LatestMilestone(ctx, req.(*QueryLatestMilestoneRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_Milestone_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryMilestoneRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).Milestone(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/heimdallv2.milestone.Query/Milestone",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).Milestone(ctx, req.(*QueryMilestoneRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_LatestNoAckMilestone_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryLatestNoAckMilestoneRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).LatestNoAckMilestone(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/heimdallv2.milestone.Query/LatestNoAckMilestone",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).LatestNoAckMilestone(ctx, req.(*QueryLatestNoAckMilestoneRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_NoAckMilestoneByID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryNoAckMilestoneByIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).NoAckMilestoneByID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/heimdallv2.milestone.Query/NoAckMilestoneByID",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).NoAckMilestoneByID(ctx, req.(*QueryNoAckMilestoneByIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_MilestoneProposer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryMilestoneProposerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).MilestoneProposer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/heimdallv2.milestone.Query/MilestoneProposer",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).MilestoneProposer(ctx, req.(*QueryMilestoneProposerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Query_serviceDesc = grpc.ServiceDesc{
	ServiceName: "heimdallv2.milestone.Query",
	HandlerType: (*QueryServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Params",
			Handler:    _Query_Params_Handler,
		},
		{
			MethodName: "Count",
			Handler:    _Query_Count_Handler,
		},
		{
			MethodName: "LatestMilestone",
			Handler:    _Query_LatestMilestone_Handler,
		},
		{
			MethodName: "Milestone",
			Handler:    _Query_Milestone_Handler,
		},
		{
			MethodName: "LatestNoAckMilestone",
			Handler:    _Query_LatestNoAckMilestone_Handler,
		},
		{
			MethodName: "NoAckMilestoneByID",
			Handler:    _Query_NoAckMilestoneByID_Handler,
		},
		{
			MethodName: "MilestoneProposer",
			Handler:    _Query_MilestoneProposer_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "heimdallv2/milestone/query.proto",
}

func (m *QueryParamsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryParamsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryParamsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *QueryParamsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryParamsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryParamsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.Params.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryCountRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryCountRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryCountRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *QueryCountResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryCountResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryCountResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Count != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.Count))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *QueryLastNoAckRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryLastNoAckRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryLastNoAckRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *QueryLastNoAckResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryLastNoAckResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryLastNoAckResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Result != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.Result))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *QueryLatestMilestoneRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryLatestMilestoneRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryLatestMilestoneRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *QueryLatestMilestoneResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryLatestMilestoneResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryLatestMilestoneResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.Milestone.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryMilestoneRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryMilestoneRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryMilestoneRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Number != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.Number))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *QueryMilestoneResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryMilestoneResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryMilestoneResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.Milestone.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintQuery(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *QueryLatestNoAckMilestoneRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryLatestNoAckMilestoneRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryLatestNoAckMilestoneRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *QueryLatestNoAckMilestoneResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryLatestNoAckMilestoneResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryLatestNoAckMilestoneResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Result) > 0 {
		i -= len(m.Result)
		copy(dAtA[i:], m.Result)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Result)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryNoAckMilestoneByIDRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryNoAckMilestoneByIDRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryNoAckMilestoneByIDRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Id) > 0 {
		i -= len(m.Id)
		copy(dAtA[i:], m.Id)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.Id)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryNoAckMilestoneByIDResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryNoAckMilestoneByIDResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryNoAckMilestoneByIDResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Result {
		i--
		if m.Result {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *QueryMilestoneProposerRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryMilestoneProposerRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryMilestoneProposerRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Times != 0 {
		i = encodeVarintQuery(dAtA, i, uint64(m.Times))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *QueryMilestoneProposerResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryMilestoneProposerResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryMilestoneProposerResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Proposers) > 0 {
		for iNdEx := len(m.Proposers) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Proposers[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func encodeVarintQuery(dAtA []byte, offset int, v uint64) int {
	offset -= sovQuery(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *QueryParamsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *QueryParamsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Params.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryCountRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *QueryCountResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Count != 0 {
		n += 1 + sovQuery(uint64(m.Count))
	}
	return n
}

func (m *QueryLastNoAckRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *QueryLastNoAckResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Result != 0 {
		n += 1 + sovQuery(uint64(m.Result))
	}
	return n
}

func (m *QueryLatestMilestoneRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *QueryLatestMilestoneResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Milestone.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryMilestoneRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Number != 0 {
		n += 1 + sovQuery(uint64(m.Number))
	}
	return n
}

func (m *QueryMilestoneResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Milestone.Size()
	n += 1 + l + sovQuery(uint64(l))
	return n
}

func (m *QueryLatestNoAckMilestoneRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *QueryLatestNoAckMilestoneResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Result)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryNoAckMilestoneByIDRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Id)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryNoAckMilestoneByIDResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Result {
		n += 2
	}
	return n
}

func (m *QueryMilestoneProposerRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Times != 0 {
		n += 1 + sovQuery(uint64(m.Times))
	}
	return n
}

func (m *QueryMilestoneProposerResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Proposers) > 0 {
		for _, e := range m.Proposers {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	return n
}

func sovQuery(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozQuery(x uint64) (n int) {
	return sovQuery(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *QueryParamsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryParamsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryParamsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryParamsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryParamsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryParamsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Params", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Params.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryCountRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryCountRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryCountRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryCountResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryCountResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryCountResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Count", wireType)
			}
			m.Count = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Count |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryLastNoAckRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryLastNoAckRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryLastNoAckRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryLastNoAckResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryLastNoAckResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryLastNoAckResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Result", wireType)
			}
			m.Result = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Result |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryLatestMilestoneRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryLatestMilestoneRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryLatestMilestoneRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryLatestMilestoneResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryLatestMilestoneResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryLatestMilestoneResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Milestone", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Milestone.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryMilestoneRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryMilestoneRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryMilestoneRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Number", wireType)
			}
			m.Number = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Number |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryMilestoneResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryMilestoneResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryMilestoneResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Milestone", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Milestone.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryLatestNoAckMilestoneRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryLatestNoAckMilestoneRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryLatestNoAckMilestoneRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryLatestNoAckMilestoneResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryLatestNoAckMilestoneResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryLatestNoAckMilestoneResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Result", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Result = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryNoAckMilestoneByIDRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryNoAckMilestoneByIDRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryNoAckMilestoneByIDRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Id = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryNoAckMilestoneByIDResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryNoAckMilestoneByIDResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryNoAckMilestoneByIDResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Result", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Result = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryMilestoneProposerRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryMilestoneProposerRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryMilestoneProposerRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Times", wireType)
			}
			m.Times = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Times |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryMilestoneProposerResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryMilestoneProposerResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryMilestoneProposerResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Proposers", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Proposers = append(m.Proposers, types.Validator{})
			if err := m.Proposers[len(m.Proposers)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipQuery(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthQuery
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupQuery
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthQuery
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthQuery        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowQuery          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupQuery = fmt.Errorf("proto: unexpected end of group")
)
