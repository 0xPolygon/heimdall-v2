// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: heimdallv2/milestone/milestone.proto

package types

import (
	bytes "bytes"
	fmt "fmt"
	_ "github.com/cosmos/cosmos-proto"
	_ "github.com/cosmos/cosmos-sdk/types/tx/amino"
	_ "github.com/cosmos/gogoproto/gogoproto"
	proto "github.com/cosmos/gogoproto/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type Milestone struct {
	Proposer        string `protobuf:"bytes,1,opt,name=proposer,proto3" json:"proposer,omitempty"`
	StartBlock      uint64 `protobuf:"varint,2,opt,name=start_block,json=startBlock,proto3" json:"start_block,omitempty"`
	EndBlock        uint64 `protobuf:"varint,3,opt,name=end_block,json=endBlock,proto3" json:"end_block,omitempty"`
	Hash            []byte `protobuf:"bytes,4,opt,name=hash,proto3" json:"hash,omitempty"`
	BorChainId      string `protobuf:"bytes,5,opt,name=bor_chain_id,json=borChainId,proto3" json:"bor_chain_id,omitempty"`
	MilestoneId     string `protobuf:"bytes,6,opt,name=milestone_id,json=milestoneId,proto3" json:"milestone_id,omitempty"`
	Timestamp       uint64 `protobuf:"varint,7,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	TotalDifficulty uint64 `protobuf:"varint,8,opt,name=total_difficulty,json=totalDifficulty,proto3" json:"total_difficulty,omitempty"`
}

func (m *Milestone) Reset()         { *m = Milestone{} }
func (m *Milestone) String() string { return proto.CompactTextString(m) }
func (*Milestone) ProtoMessage()    {}
func (*Milestone) Descriptor() ([]byte, []int) {
	return fileDescriptor_6d06b2e981472ef5, []int{0}
}
func (m *Milestone) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Milestone) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Milestone.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Milestone) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Milestone.Merge(m, src)
}
func (m *Milestone) XXX_Size() int {
	return m.Size()
}
func (m *Milestone) XXX_DiscardUnknown() {
	xxx_messageInfo_Milestone.DiscardUnknown(m)
}

var xxx_messageInfo_Milestone proto.InternalMessageInfo

func (m *Milestone) GetProposer() string {
	if m != nil {
		return m.Proposer
	}
	return ""
}

func (m *Milestone) GetStartBlock() uint64 {
	if m != nil {
		return m.StartBlock
	}
	return 0
}

func (m *Milestone) GetEndBlock() uint64 {
	if m != nil {
		return m.EndBlock
	}
	return 0
}

func (m *Milestone) GetHash() []byte {
	if m != nil {
		return m.Hash
	}
	return nil
}

func (m *Milestone) GetBorChainId() string {
	if m != nil {
		return m.BorChainId
	}
	return ""
}

func (m *Milestone) GetMilestoneId() string {
	if m != nil {
		return m.MilestoneId
	}
	return ""
}

func (m *Milestone) GetTimestamp() uint64 {
	if m != nil {
		return m.Timestamp
	}
	return 0
}

func (m *Milestone) GetTotalDifficulty() uint64 {
	if m != nil {
		return m.TotalDifficulty
	}
	return 0
}

type MilestoneCount struct {
	Count uint64 `protobuf:"varint,1,opt,name=count,proto3" json:"count,omitempty"`
}

func (m *MilestoneCount) Reset()         { *m = MilestoneCount{} }
func (m *MilestoneCount) String() string { return proto.CompactTextString(m) }
func (*MilestoneCount) ProtoMessage()    {}
func (*MilestoneCount) Descriptor() ([]byte, []int) {
	return fileDescriptor_6d06b2e981472ef5, []int{1}
}
func (m *MilestoneCount) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MilestoneCount) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MilestoneCount.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MilestoneCount) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MilestoneCount.Merge(m, src)
}
func (m *MilestoneCount) XXX_Size() int {
	return m.Size()
}
func (m *MilestoneCount) XXX_DiscardUnknown() {
	xxx_messageInfo_MilestoneCount.DiscardUnknown(m)
}

var xxx_messageInfo_MilestoneCount proto.InternalMessageInfo

func (m *MilestoneCount) GetCount() uint64 {
	if m != nil {
		return m.Count
	}
	return 0
}

type MilestoneProposition struct {
	BlockHashes      [][]byte `protobuf:"bytes,1,rep,name=block_hashes,json=blockHashes,proto3" json:"block_hashes,omitempty"`
	StartBlockNumber uint64   `protobuf:"varint,2,opt,name=start_block_number,json=startBlockNumber,proto3" json:"start_block_number,omitempty"`
	ParentHash       []byte   `protobuf:"bytes,3,opt,name=parent_hash,json=parentHash,proto3" json:"parent_hash,omitempty"`
	TotalDifficulty  uint64   `protobuf:"varint,4,opt,name=total_difficulty,json=totalDifficulty,proto3" json:"total_difficulty,omitempty"`
}

func (m *MilestoneProposition) Reset()         { *m = MilestoneProposition{} }
func (m *MilestoneProposition) String() string { return proto.CompactTextString(m) }
func (*MilestoneProposition) ProtoMessage()    {}
func (*MilestoneProposition) Descriptor() ([]byte, []int) {
	return fileDescriptor_6d06b2e981472ef5, []int{2}
}
func (m *MilestoneProposition) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MilestoneProposition) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MilestoneProposition.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MilestoneProposition) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MilestoneProposition.Merge(m, src)
}
func (m *MilestoneProposition) XXX_Size() int {
	return m.Size()
}
func (m *MilestoneProposition) XXX_DiscardUnknown() {
	xxx_messageInfo_MilestoneProposition.DiscardUnknown(m)
}

var xxx_messageInfo_MilestoneProposition proto.InternalMessageInfo

func (m *MilestoneProposition) GetBlockHashes() [][]byte {
	if m != nil {
		return m.BlockHashes
	}
	return nil
}

func (m *MilestoneProposition) GetStartBlockNumber() uint64 {
	if m != nil {
		return m.StartBlockNumber
	}
	return 0
}

func (m *MilestoneProposition) GetParentHash() []byte {
	if m != nil {
		return m.ParentHash
	}
	return nil
}

func (m *MilestoneProposition) GetTotalDifficulty() uint64 {
	if m != nil {
		return m.TotalDifficulty
	}
	return 0
}

type Params struct {
	MaxMilestonePropositionLength uint64 `protobuf:"varint,1,opt,name=max_milestone_proposition_length,json=maxMilestonePropositionLength,proto3" json:"max_milestone_proposition_length,omitempty"`
	FfMilestoneThreshold          uint64 `protobuf:"varint,2,opt,name=ff_milestone_threshold,json=ffMilestoneThreshold,proto3" json:"ff_milestone_threshold,omitempty"`
	FfMilestoneBlockInterval      uint64 `protobuf:"varint,3,opt,name=ff_milestone_block_interval,json=ffMilestoneBlockInterval,proto3" json:"ff_milestone_block_interval,omitempty"`
}

func (m *Params) Reset()         { *m = Params{} }
func (m *Params) String() string { return proto.CompactTextString(m) }
func (*Params) ProtoMessage()    {}
func (*Params) Descriptor() ([]byte, []int) {
	return fileDescriptor_6d06b2e981472ef5, []int{3}
}
func (m *Params) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Params) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Params.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Params) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Params.Merge(m, src)
}
func (m *Params) XXX_Size() int {
	return m.Size()
}
func (m *Params) XXX_DiscardUnknown() {
	xxx_messageInfo_Params.DiscardUnknown(m)
}

var xxx_messageInfo_Params proto.InternalMessageInfo

func (m *Params) GetMaxMilestonePropositionLength() uint64 {
	if m != nil {
		return m.MaxMilestonePropositionLength
	}
	return 0
}

func (m *Params) GetFfMilestoneThreshold() uint64 {
	if m != nil {
		return m.FfMilestoneThreshold
	}
	return 0
}

func (m *Params) GetFfMilestoneBlockInterval() uint64 {
	if m != nil {
		return m.FfMilestoneBlockInterval
	}
	return 0
}

func init() {
	proto.RegisterType((*Milestone)(nil), "heimdallv2.milestone.Milestone")
	proto.RegisterType((*MilestoneCount)(nil), "heimdallv2.milestone.MilestoneCount")
	proto.RegisterType((*MilestoneProposition)(nil), "heimdallv2.milestone.MilestoneProposition")
	proto.RegisterType((*Params)(nil), "heimdallv2.milestone.Params")
}

func init() {
	proto.RegisterFile("heimdallv2/milestone/milestone.proto", fileDescriptor_6d06b2e981472ef5)
}

var fileDescriptor_6d06b2e981472ef5 = []byte{
	// 574 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x8c, 0x94, 0xc1, 0x6e, 0xd3, 0x30,
	0x18, 0xc7, 0xe7, 0xad, 0x2d, 0xad, 0x5b, 0xc1, 0xb0, 0x2a, 0x94, 0x6d, 0x5a, 0x56, 0x15, 0x04,
	0x15, 0xd2, 0x9a, 0xa9, 0x3b, 0x20, 0xe0, 0x44, 0xb7, 0x03, 0x95, 0xc6, 0x54, 0x01, 0x27, 0x2e,
	0x91, 0x93, 0x38, 0x89, 0x45, 0x62, 0x47, 0xb6, 0x5b, 0xb5, 0x6f, 0xc0, 0x91, 0x47, 0xd8, 0x91,
	0x23, 0x07, 0x1e, 0x82, 0xe3, 0xc4, 0x09, 0x6e, 0xd0, 0x0a, 0xc1, 0x63, 0xa0, 0x38, 0x6d, 0x92,
	0x4a, 0x3b, 0x70, 0xa9, 0xec, 0xef, 0xff, 0xf7, 0xbf, 0xfe, 0x7e, 0x5f, 0x5d, 0xf8, 0x20, 0x24,
	0x34, 0xf6, 0x70, 0x14, 0x4d, 0x07, 0x56, 0x4c, 0x23, 0x22, 0x15, 0x67, 0xa4, 0x58, 0xf5, 0x13,
	0xc1, 0x15, 0x47, 0xed, 0xc2, 0xd5, 0xcf, 0xb5, 0xfd, 0xbb, 0x38, 0xa6, 0x8c, 0x5b, 0xfa, 0x33,
	0x33, 0xee, 0xef, 0xb9, 0x5c, 0xc6, 0x5c, 0xda, 0x7a, 0x67, 0x65, 0x9b, 0x95, 0xd4, 0x0e, 0x78,
	0xc0, 0xb3, 0x7a, 0xba, 0xca, 0xaa, 0xdd, 0x5f, 0xdb, 0xb0, 0xf1, 0x6a, 0x9d, 0x88, 0x9e, 0xc2,
	0x7a, 0x22, 0x78, 0xc2, 0x25, 0x11, 0x06, 0xe8, 0x80, 0x5e, 0x63, 0x78, 0xf8, 0xed, 0xcb, 0x71,
	0x7b, 0x95, 0xf3, 0xc2, 0xf3, 0x04, 0x91, 0xf2, 0x8d, 0x12, 0x94, 0x05, 0x9f, 0xfe, 0x7c, 0x7e,
	0x0c, 0x5e, 0xe7, 0x76, 0xf4, 0x10, 0x36, 0xa5, 0xc2, 0x42, 0xd9, 0x4e, 0xc4, 0xdd, 0xf7, 0xc6,
	0x76, 0x07, 0xf4, 0x2a, 0xc3, 0x6a, 0xe6, 0x82, 0x5a, 0x19, 0xa6, 0x02, 0xea, 0xc2, 0x06, 0x61,
	0xde, 0xca, 0xb5, 0x53, 0x76, 0xd5, 0x09, 0xf3, 0x32, 0xcf, 0x1e, 0xac, 0x84, 0x58, 0x86, 0x46,
	0xa5, 0x03, 0x7a, 0xad, 0xb5, 0xac, 0x4b, 0xe8, 0x11, 0x6c, 0x39, 0x5c, 0xd8, 0x6e, 0x88, 0x29,
	0xb3, 0xa9, 0x67, 0x54, 0xf5, 0x2d, 0xd7, 0xdf, 0xe3, 0x70, 0x71, 0x96, 0x2a, 0x23, 0x0f, 0xf5,
	0x60, 0x2b, 0x27, 0x95, 0x1a, 0x6b, 0x65, 0x63, 0x33, 0x97, 0x46, 0x1e, 0xba, 0x0f, 0x1b, 0x8a,
	0xc6, 0x44, 0x2a, 0x1c, 0x27, 0xc6, 0xad, 0xf2, 0x8d, 0x8a, 0x3a, 0x3a, 0x81, 0xbb, 0x8a, 0x2b,
	0x1c, 0xd9, 0x1e, 0xf5, 0x7d, 0xea, 0x4e, 0x22, 0x35, 0x37, 0xea, 0x65, 0xef, 0x1d, 0x2d, 0x9f,
	0xe7, 0xea, 0xb3, 0xfa, 0x87, 0xab, 0x23, 0xf0, 0xf7, 0xea, 0x08, 0x74, 0x9f, 0xc0, 0xdb, 0x39,
	0xe2, 0x33, 0x3e, 0x61, 0x0a, 0x1d, 0xc0, 0xaa, 0x9b, 0x2e, 0x34, 0xe4, 0x3c, 0x22, 0xab, 0x95,
	0x0e, 0xfe, 0x00, 0xb0, 0x9d, 0x9f, 0x1c, 0x6b, 0xd2, 0x54, 0x51, 0xce, 0xd2, 0xe6, 0x34, 0x40,
	0x3b, 0x65, 0x42, 0xa4, 0x01, 0x3a, 0x3b, 0x05, 0xa8, 0xa6, 0x96, 0x5e, 0x6a, 0x05, 0x9d, 0x42,
	0x54, 0x1a, 0x8b, 0xcd, 0x26, 0xb1, 0x43, 0xc4, 0xe6, 0x74, 0x76, 0x8b, 0xe9, 0x5c, 0x6a, 0x39,
	0x9d, 0x65, 0x82, 0x05, 0x61, 0x4a, 0xe7, 0xeb, 0x29, 0xe5, 0xe9, 0x30, 0x53, 0xd2, 0xf8, 0x1b,
	0xa1, 0x54, 0xfe, 0x13, 0xca, 0x6f, 0x00, 0x6b, 0x63, 0x2c, 0x70, 0x2c, 0xd1, 0x25, 0xec, 0xc4,
	0x78, 0x66, 0x17, 0xe3, 0x4a, 0x8a, 0x56, 0xed, 0x88, 0xb0, 0x40, 0x85, 0x9b, 0xa0, 0x0e, 0x63,
	0x3c, 0xbb, 0x89, 0xcb, 0x85, 0xf6, 0xa2, 0xe7, 0xf0, 0x9e, 0xef, 0x97, 0xe2, 0x54, 0x28, 0x88,
	0x0c, 0x79, 0xe4, 0x6d, 0xf6, 0xdd, 0xf6, 0xfd, 0x3c, 0xe4, 0xed, 0xda, 0x82, 0xce, 0xe1, 0xc1,
	0xc6, 0xe1, 0x8c, 0x1b, 0x65, 0x8a, 0x88, 0x29, 0x8e, 0x36, 0x7f, 0xb1, 0x46, 0x29, 0x41, 0xf3,
	0x1b, 0xad, 0x6c, 0x45, 0x9f, 0xc3, 0x8b, 0xaf, 0x0b, 0x13, 0x5c, 0x2f, 0x4c, 0xf0, 0x73, 0x61,
	0x82, 0x8f, 0x4b, 0x73, 0xeb, 0x7a, 0x69, 0x6e, 0x7d, 0x5f, 0x9a, 0x5b, 0xef, 0x06, 0x01, 0x55,
	0xe1, 0xc4, 0xe9, 0xbb, 0x3c, 0xb6, 0x4e, 0x66, 0x63, 0x1e, 0xcd, 0x03, 0xce, 0xac, 0xf5, 0x4b,
	0x3f, 0x9e, 0x0e, 0xac, 0x59, 0xe9, 0x2f, 0x41, 0xcd, 0x13, 0x22, 0x9d, 0x9a, 0x7e, 0xb5, 0xa7,
	0xff, 0x02, 0x00, 0x00, 0xff, 0xff, 0x3f, 0xf8, 0x15, 0xb7, 0x37, 0x04, 0x00, 0x00,
}

func (this *Milestone) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Milestone)
	if !ok {
		that2, ok := that.(Milestone)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Proposer != that1.Proposer {
		return false
	}
	if this.StartBlock != that1.StartBlock {
		return false
	}
	if this.EndBlock != that1.EndBlock {
		return false
	}
	if !bytes.Equal(this.Hash, that1.Hash) {
		return false
	}
	if this.BorChainId != that1.BorChainId {
		return false
	}
	if this.MilestoneId != that1.MilestoneId {
		return false
	}
	if this.Timestamp != that1.Timestamp {
		return false
	}
	if this.TotalDifficulty != that1.TotalDifficulty {
		return false
	}
	return true
}
func (this *MilestoneCount) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*MilestoneCount)
	if !ok {
		that2, ok := that.(MilestoneCount)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Count != that1.Count {
		return false
	}
	return true
}
func (this *MilestoneProposition) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*MilestoneProposition)
	if !ok {
		that2, ok := that.(MilestoneProposition)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.BlockHashes) != len(that1.BlockHashes) {
		return false
	}
	for i := range this.BlockHashes {
		if !bytes.Equal(this.BlockHashes[i], that1.BlockHashes[i]) {
			return false
		}
	}
	if this.StartBlockNumber != that1.StartBlockNumber {
		return false
	}
	if !bytes.Equal(this.ParentHash, that1.ParentHash) {
		return false
	}
	if this.TotalDifficulty != that1.TotalDifficulty {
		return false
	}
	return true
}
func (this *Params) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Params)
	if !ok {
		that2, ok := that.(Params)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.MaxMilestonePropositionLength != that1.MaxMilestonePropositionLength {
		return false
	}
	if this.FfMilestoneThreshold != that1.FfMilestoneThreshold {
		return false
	}
	if this.FfMilestoneBlockInterval != that1.FfMilestoneBlockInterval {
		return false
	}
	return true
}
func (m *Milestone) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Milestone) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Milestone) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.TotalDifficulty != 0 {
		i = encodeVarintMilestone(dAtA, i, uint64(m.TotalDifficulty))
		i--
		dAtA[i] = 0x40
	}
	if m.Timestamp != 0 {
		i = encodeVarintMilestone(dAtA, i, uint64(m.Timestamp))
		i--
		dAtA[i] = 0x38
	}
	if len(m.MilestoneId) > 0 {
		i -= len(m.MilestoneId)
		copy(dAtA[i:], m.MilestoneId)
		i = encodeVarintMilestone(dAtA, i, uint64(len(m.MilestoneId)))
		i--
		dAtA[i] = 0x32
	}
	if len(m.BorChainId) > 0 {
		i -= len(m.BorChainId)
		copy(dAtA[i:], m.BorChainId)
		i = encodeVarintMilestone(dAtA, i, uint64(len(m.BorChainId)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.Hash) > 0 {
		i -= len(m.Hash)
		copy(dAtA[i:], m.Hash)
		i = encodeVarintMilestone(dAtA, i, uint64(len(m.Hash)))
		i--
		dAtA[i] = 0x22
	}
	if m.EndBlock != 0 {
		i = encodeVarintMilestone(dAtA, i, uint64(m.EndBlock))
		i--
		dAtA[i] = 0x18
	}
	if m.StartBlock != 0 {
		i = encodeVarintMilestone(dAtA, i, uint64(m.StartBlock))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Proposer) > 0 {
		i -= len(m.Proposer)
		copy(dAtA[i:], m.Proposer)
		i = encodeVarintMilestone(dAtA, i, uint64(len(m.Proposer)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MilestoneCount) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MilestoneCount) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MilestoneCount) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Count != 0 {
		i = encodeVarintMilestone(dAtA, i, uint64(m.Count))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *MilestoneProposition) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MilestoneProposition) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MilestoneProposition) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.TotalDifficulty != 0 {
		i = encodeVarintMilestone(dAtA, i, uint64(m.TotalDifficulty))
		i--
		dAtA[i] = 0x20
	}
	if len(m.ParentHash) > 0 {
		i -= len(m.ParentHash)
		copy(dAtA[i:], m.ParentHash)
		i = encodeVarintMilestone(dAtA, i, uint64(len(m.ParentHash)))
		i--
		dAtA[i] = 0x1a
	}
	if m.StartBlockNumber != 0 {
		i = encodeVarintMilestone(dAtA, i, uint64(m.StartBlockNumber))
		i--
		dAtA[i] = 0x10
	}
	if len(m.BlockHashes) > 0 {
		for iNdEx := len(m.BlockHashes) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.BlockHashes[iNdEx])
			copy(dAtA[i:], m.BlockHashes[iNdEx])
			i = encodeVarintMilestone(dAtA, i, uint64(len(m.BlockHashes[iNdEx])))
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *Params) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Params) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Params) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.FfMilestoneBlockInterval != 0 {
		i = encodeVarintMilestone(dAtA, i, uint64(m.FfMilestoneBlockInterval))
		i--
		dAtA[i] = 0x18
	}
	if m.FfMilestoneThreshold != 0 {
		i = encodeVarintMilestone(dAtA, i, uint64(m.FfMilestoneThreshold))
		i--
		dAtA[i] = 0x10
	}
	if m.MaxMilestonePropositionLength != 0 {
		i = encodeVarintMilestone(dAtA, i, uint64(m.MaxMilestonePropositionLength))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintMilestone(dAtA []byte, offset int, v uint64) int {
	offset -= sovMilestone(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *Milestone) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Proposer)
	if l > 0 {
		n += 1 + l + sovMilestone(uint64(l))
	}
	if m.StartBlock != 0 {
		n += 1 + sovMilestone(uint64(m.StartBlock))
	}
	if m.EndBlock != 0 {
		n += 1 + sovMilestone(uint64(m.EndBlock))
	}
	l = len(m.Hash)
	if l > 0 {
		n += 1 + l + sovMilestone(uint64(l))
	}
	l = len(m.BorChainId)
	if l > 0 {
		n += 1 + l + sovMilestone(uint64(l))
	}
	l = len(m.MilestoneId)
	if l > 0 {
		n += 1 + l + sovMilestone(uint64(l))
	}
	if m.Timestamp != 0 {
		n += 1 + sovMilestone(uint64(m.Timestamp))
	}
	if m.TotalDifficulty != 0 {
		n += 1 + sovMilestone(uint64(m.TotalDifficulty))
	}
	return n
}

func (m *MilestoneCount) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Count != 0 {
		n += 1 + sovMilestone(uint64(m.Count))
	}
	return n
}

func (m *MilestoneProposition) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.BlockHashes) > 0 {
		for _, b := range m.BlockHashes {
			l = len(b)
			n += 1 + l + sovMilestone(uint64(l))
		}
	}
	if m.StartBlockNumber != 0 {
		n += 1 + sovMilestone(uint64(m.StartBlockNumber))
	}
	l = len(m.ParentHash)
	if l > 0 {
		n += 1 + l + sovMilestone(uint64(l))
	}
	if m.TotalDifficulty != 0 {
		n += 1 + sovMilestone(uint64(m.TotalDifficulty))
	}
	return n
}

func (m *Params) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.MaxMilestonePropositionLength != 0 {
		n += 1 + sovMilestone(uint64(m.MaxMilestonePropositionLength))
	}
	if m.FfMilestoneThreshold != 0 {
		n += 1 + sovMilestone(uint64(m.FfMilestoneThreshold))
	}
	if m.FfMilestoneBlockInterval != 0 {
		n += 1 + sovMilestone(uint64(m.FfMilestoneBlockInterval))
	}
	return n
}

func sovMilestone(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozMilestone(x uint64) (n int) {
	return sovMilestone(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Milestone) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMilestone
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Milestone: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Milestone: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Proposer", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMilestone
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMilestone
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMilestone
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Proposer = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field StartBlock", wireType)
			}
			m.StartBlock = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMilestone
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.StartBlock |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EndBlock", wireType)
			}
			m.EndBlock = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMilestone
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.EndBlock |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Hash", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMilestone
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthMilestone
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthMilestone
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Hash = append(m.Hash[:0], dAtA[iNdEx:postIndex]...)
			if m.Hash == nil {
				m.Hash = []byte{}
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BorChainId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMilestone
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMilestone
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMilestone
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BorChainId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MilestoneId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMilestone
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMilestone
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMilestone
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MilestoneId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Timestamp", wireType)
			}
			m.Timestamp = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMilestone
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Timestamp |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TotalDifficulty", wireType)
			}
			m.TotalDifficulty = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMilestone
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TotalDifficulty |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipMilestone(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMilestone
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MilestoneCount) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMilestone
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MilestoneCount: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MilestoneCount: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Count", wireType)
			}
			m.Count = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMilestone
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Count |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipMilestone(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMilestone
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MilestoneProposition) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMilestone
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MilestoneProposition: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MilestoneProposition: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BlockHashes", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMilestone
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthMilestone
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthMilestone
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BlockHashes = append(m.BlockHashes, make([]byte, postIndex-iNdEx))
			copy(m.BlockHashes[len(m.BlockHashes)-1], dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field StartBlockNumber", wireType)
			}
			m.StartBlockNumber = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMilestone
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.StartBlockNumber |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ParentHash", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMilestone
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthMilestone
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthMilestone
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ParentHash = append(m.ParentHash[:0], dAtA[iNdEx:postIndex]...)
			if m.ParentHash == nil {
				m.ParentHash = []byte{}
			}
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TotalDifficulty", wireType)
			}
			m.TotalDifficulty = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMilestone
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TotalDifficulty |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipMilestone(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMilestone
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Params) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMilestone
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Params: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Params: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MaxMilestonePropositionLength", wireType)
			}
			m.MaxMilestonePropositionLength = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMilestone
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MaxMilestonePropositionLength |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FfMilestoneThreshold", wireType)
			}
			m.FfMilestoneThreshold = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMilestone
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.FfMilestoneThreshold |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FfMilestoneBlockInterval", wireType)
			}
			m.FfMilestoneBlockInterval = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMilestone
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.FfMilestoneBlockInterval |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipMilestone(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthMilestone
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipMilestone(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowMilestone
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowMilestone
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowMilestone
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthMilestone
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupMilestone
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthMilestone
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthMilestone        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowMilestone          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupMilestone = fmt.Errorf("proto: unexpected end of group")
)
