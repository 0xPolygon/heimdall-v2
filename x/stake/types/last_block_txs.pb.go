// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: heimdallv2/stake/last_block_txs.proto

package types

import (
	fmt "fmt"
	_ "github.com/cosmos/cosmos-sdk/types/tx/amino"
	proto "github.com/cosmos/gogoproto/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// LastBlockTxs define the last block's transactions
type LastBlockTxs struct {
	Txs [][]byte `protobuf:"bytes,1,rep,name=txs,proto3" json:"txs,omitempty"`
}

func (m *LastBlockTxs) Reset()         { *m = LastBlockTxs{} }
func (m *LastBlockTxs) String() string { return proto.CompactTextString(m) }
func (*LastBlockTxs) ProtoMessage()    {}
func (*LastBlockTxs) Descriptor() ([]byte, []int) {
	return fileDescriptor_3409b60451c0033e, []int{0}
}
func (m *LastBlockTxs) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *LastBlockTxs) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_LastBlockTxs.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *LastBlockTxs) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LastBlockTxs.Merge(m, src)
}
func (m *LastBlockTxs) XXX_Size() int {
	return m.Size()
}
func (m *LastBlockTxs) XXX_DiscardUnknown() {
	xxx_messageInfo_LastBlockTxs.DiscardUnknown(m)
}

var xxx_messageInfo_LastBlockTxs proto.InternalMessageInfo

func (m *LastBlockTxs) GetTxs() [][]byte {
	if m != nil {
		return m.Txs
	}
	return nil
}

func init() {
	proto.RegisterType((*LastBlockTxs)(nil), "heimdallv2.stake.LastBlockTxs")
}

func init() {
	proto.RegisterFile("heimdallv2/stake/last_block_txs.proto", fileDescriptor_3409b60451c0033e)
}

var fileDescriptor_3409b60451c0033e = []byte{
	// 189 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0x52, 0xcd, 0x48, 0xcd, 0xcc,
	0x4d, 0x49, 0xcc, 0xc9, 0x29, 0x33, 0xd2, 0x2f, 0x2e, 0x49, 0xcc, 0x4e, 0xd5, 0xcf, 0x49, 0x2c,
	0x2e, 0x89, 0x4f, 0xca, 0xc9, 0x4f, 0xce, 0x8e, 0x2f, 0xa9, 0x28, 0xd6, 0x2b, 0x28, 0xca, 0x2f,
	0xc9, 0x17, 0x12, 0x40, 0x28, 0xd3, 0x03, 0x2b, 0x93, 0x12, 0x4c, 0xcc, 0xcd, 0xcc, 0xcb, 0xd7,
	0x07, 0x93, 0x10, 0x45, 0x4a, 0xea, 0x5c, 0x3c, 0x3e, 0x89, 0xc5, 0x25, 0x4e, 0x20, 0xbd, 0x21,
	0x15, 0xc5, 0x42, 0xe2, 0x5c, 0xcc, 0x25, 0x15, 0xc5, 0x12, 0x8c, 0x0a, 0xcc, 0x1a, 0x3c, 0x4e,
	0xac, 0x2b, 0x9e, 0x6f, 0xd0, 0x62, 0x0c, 0x02, 0x89, 0x38, 0x79, 0x9c, 0x78, 0x24, 0xc7, 0x78,
	0xe1, 0x91, 0x1c, 0xe3, 0x83, 0x47, 0x72, 0x8c, 0x13, 0x1e, 0xcb, 0x31, 0x5c, 0x78, 0x2c, 0xc7,
	0x70, 0xe3, 0xb1, 0x1c, 0x43, 0x94, 0x5e, 0x7a, 0x66, 0x49, 0x46, 0x69, 0x92, 0x5e, 0x72, 0x7e,
	0xae, 0xbe, 0x41, 0x45, 0x40, 0x7e, 0x4e, 0x65, 0x7a, 0x7e, 0x9e, 0x3e, 0xcc, 0x72, 0xdd, 0x32,
	0x23, 0xfd, 0x0a, 0xa8, 0x33, 0x4b, 0x2a, 0x0b, 0x52, 0x8b, 0x93, 0xd8, 0xc0, 0x36, 0x1b, 0x03,
	0x02, 0x00, 0x00, 0xff, 0xff, 0xba, 0x3d, 0xed, 0xd4, 0xc7, 0x00, 0x00, 0x00,
}

func (m *LastBlockTxs) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *LastBlockTxs) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *LastBlockTxs) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Txs) > 0 {
		for iNdEx := len(m.Txs) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Txs[iNdEx])
			copy(dAtA[i:], m.Txs[iNdEx])
			i = encodeVarintLastBlockTxs(dAtA, i, uint64(len(m.Txs[iNdEx])))
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func encodeVarintLastBlockTxs(dAtA []byte, offset int, v uint64) int {
	offset -= sovLastBlockTxs(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *LastBlockTxs) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Txs) > 0 {
		for _, b := range m.Txs {
			l = len(b)
			n += 1 + l + sovLastBlockTxs(uint64(l))
		}
	}
	return n
}

func sovLastBlockTxs(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozLastBlockTxs(x uint64) (n int) {
	return sovLastBlockTxs(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *LastBlockTxs) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLastBlockTxs
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: LastBlockTxs: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: LastBlockTxs: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Txs", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLastBlockTxs
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthLastBlockTxs
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthLastBlockTxs
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Txs = append(m.Txs, make([]byte, postIndex-iNdEx))
			copy(m.Txs[len(m.Txs)-1], dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipLastBlockTxs(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthLastBlockTxs
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipLastBlockTxs(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowLastBlockTxs
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowLastBlockTxs
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowLastBlockTxs
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthLastBlockTxs
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupLastBlockTxs
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthLastBlockTxs
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthLastBlockTxs        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowLastBlockTxs          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupLastBlockTxs = fmt.Errorf("proto: unexpected end of group")
)
