// Code generated by MockGen. DO NOT EDIT.
// Source: x/stake/types/expected_keepers.go

// Package testutil is a generated GoMock package.
package testutil

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockCheckpointKeeper is a mock of CheckpointKeeper interface.
type MockCheckpointKeeper struct {
	ctrl     *gomock.Controller
	recorder *MockCheckpointKeeperMockRecorder
}

// MockCheckpointKeeperMockRecorder is the mock recorder for MockCheckpointKeeper.
type MockCheckpointKeeperMockRecorder struct {
	mock *MockCheckpointKeeper
}

// NewMockCheckpointKeeper creates a new mock instance.
func NewMockCheckpointKeeper(ctrl *gomock.Controller) *MockCheckpointKeeper {
	mock := &MockCheckpointKeeper{ctrl: ctrl}
	mock.recorder = &MockCheckpointKeeperMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCheckpointKeeper) EXPECT() *MockCheckpointKeeperMockRecorder {
	return m.recorder
}

// GetACKCount mocks base method.
func (m *MockCheckpointKeeper) GetACKCount(ctx context.Context) uint64 {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetACKCount", ctx)
	ret0, _ := ret[0].(uint64)
	return ret0
}

// GetACKCount indicates an expected call of GetACKCount.
func (mr *MockCheckpointKeeperMockRecorder) GetACKCount(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetACKCount", reflect.TypeOf((*MockCheckpointKeeper)(nil).GetACKCount), ctx)
}
