// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: heimdallv2/chainmanager/chainmanager.proto

package types

import (
	fmt "fmt"
	_ "github.com/cosmos/cosmos-sdk/types/tx/amino"
	_ "github.com/cosmos/gogoproto/gogoproto"
	proto "github.com/cosmos/gogoproto/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// ChainParams contains contract addresses and other chain specific parameters
type ChainParams struct {
	BorChainId string `protobuf:"bytes,1,opt,name=bor_chain_id,json=borChainId,proto3" json:"bor_chain_id,omitempty"`
	// L1 Chain Contracts
	PolygonPosTokenAddress string `protobuf:"bytes,2,opt,name=polygon_pos_token_address,json=polygonPosTokenAddress,proto3" json:"polygon_pos_token_address,omitempty"`
	StakingManagerAddress  string `protobuf:"bytes,3,opt,name=staking_manager_address,json=stakingManagerAddress,proto3" json:"staking_manager_address,omitempty"`
	SlashManagerAddress    string `protobuf:"bytes,4,opt,name=slash_manager_address,json=slashManagerAddress,proto3" json:"slash_manager_address,omitempty"`
	RootChainAddress       string `protobuf:"bytes,5,opt,name=root_chain_address,json=rootChainAddress,proto3" json:"root_chain_address,omitempty"`
	StakingInfoAddress     string `protobuf:"bytes,6,opt,name=staking_info_address,json=stakingInfoAddress,proto3" json:"staking_info_address,omitempty"`
	StateSenderAddress     string `protobuf:"bytes,7,opt,name=state_sender_address,json=stateSenderAddress,proto3" json:"state_sender_address,omitempty"`
	// Bor Chain Contracts
	StateReceiverAddress string `protobuf:"bytes,8,opt,name=state_receiver_address,json=stateReceiverAddress,proto3" json:"state_receiver_address,omitempty"`
	ValidatorSetAddress  string `protobuf:"bytes,9,opt,name=validator_set_address,json=validatorSetAddress,proto3" json:"validator_set_address,omitempty"`
}

func (m *ChainParams) Reset()         { *m = ChainParams{} }
func (m *ChainParams) String() string { return proto.CompactTextString(m) }
func (*ChainParams) ProtoMessage()    {}
func (*ChainParams) Descriptor() ([]byte, []int) {
	return fileDescriptor_81d5c74e35ef83d3, []int{0}
}
func (m *ChainParams) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ChainParams) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ChainParams.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ChainParams) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ChainParams.Merge(m, src)
}
func (m *ChainParams) XXX_Size() int {
	return m.Size()
}
func (m *ChainParams) XXX_DiscardUnknown() {
	xxx_messageInfo_ChainParams.DiscardUnknown(m)
}

var xxx_messageInfo_ChainParams proto.InternalMessageInfo

func (m *ChainParams) GetBorChainId() string {
	if m != nil {
		return m.BorChainId
	}
	return ""
}

func (m *ChainParams) GetPolygonPosTokenAddress() string {
	if m != nil {
		return m.PolygonPosTokenAddress
	}
	return ""
}

func (m *ChainParams) GetStakingManagerAddress() string {
	if m != nil {
		return m.StakingManagerAddress
	}
	return ""
}

func (m *ChainParams) GetSlashManagerAddress() string {
	if m != nil {
		return m.SlashManagerAddress
	}
	return ""
}

func (m *ChainParams) GetRootChainAddress() string {
	if m != nil {
		return m.RootChainAddress
	}
	return ""
}

func (m *ChainParams) GetStakingInfoAddress() string {
	if m != nil {
		return m.StakingInfoAddress
	}
	return ""
}

func (m *ChainParams) GetStateSenderAddress() string {
	if m != nil {
		return m.StateSenderAddress
	}
	return ""
}

func (m *ChainParams) GetStateReceiverAddress() string {
	if m != nil {
		return m.StateReceiverAddress
	}
	return ""
}

func (m *ChainParams) GetValidatorSetAddress() string {
	if m != nil {
		return m.ValidatorSetAddress
	}
	return ""
}

// Params contains the chain params for chainmanager module
type Params struct {
	ChainParams              ChainParams `protobuf:"bytes,1,opt,name=chain_params,json=chainParams,proto3" json:"chain_params"`
	MainChainTxConfirmations uint64      `protobuf:"varint,2,opt,name=main_chain_tx_confirmations,json=mainChainTxConfirmations,proto3" json:"main_chain_tx_confirmations,omitempty"`
	BorChainTxConfirmations  uint64      `protobuf:"varint,3,opt,name=bor_chain_tx_confirmations,json=borChainTxConfirmations,proto3" json:"bor_chain_tx_confirmations,omitempty"`
}

func (m *Params) Reset()         { *m = Params{} }
func (m *Params) String() string { return proto.CompactTextString(m) }
func (*Params) ProtoMessage()    {}
func (*Params) Descriptor() ([]byte, []int) {
	return fileDescriptor_81d5c74e35ef83d3, []int{1}
}
func (m *Params) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Params) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Params.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Params) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Params.Merge(m, src)
}
func (m *Params) XXX_Size() int {
	return m.Size()
}
func (m *Params) XXX_DiscardUnknown() {
	xxx_messageInfo_Params.DiscardUnknown(m)
}

var xxx_messageInfo_Params proto.InternalMessageInfo

func (m *Params) GetChainParams() ChainParams {
	if m != nil {
		return m.ChainParams
	}
	return ChainParams{}
}

func (m *Params) GetMainChainTxConfirmations() uint64 {
	if m != nil {
		return m.MainChainTxConfirmations
	}
	return 0
}

func (m *Params) GetBorChainTxConfirmations() uint64 {
	if m != nil {
		return m.BorChainTxConfirmations
	}
	return 0
}

func init() {
	proto.RegisterType((*ChainParams)(nil), "heimdallv2.chainmanager.ChainParams")
	proto.RegisterType((*Params)(nil), "heimdallv2.chainmanager.Params")
}

func init() {
	proto.RegisterFile("heimdallv2/chainmanager/chainmanager.proto", fileDescriptor_81d5c74e35ef83d3)
}

var fileDescriptor_81d5c74e35ef83d3 = []byte{
	// 495 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x74, 0x93, 0x31, 0x6f, 0xd3, 0x40,
	0x18, 0x86, 0x63, 0x9a, 0x06, 0x72, 0xe9, 0x00, 0xa6, 0x6d, 0x42, 0x90, 0x5c, 0x54, 0x21, 0x81,
	0x2a, 0x61, 0xa3, 0x54, 0x08, 0x01, 0x42, 0x82, 0x94, 0xa5, 0x03, 0x22, 0x4a, 0x3b, 0xb1, 0x9c,
	0x2e, 0xf6, 0xc5, 0x39, 0xd5, 0xbe, 0xcf, 0xba, 0x3b, 0xa2, 0xf4, 0x5f, 0xb0, 0xb1, 0x32, 0x32,
	0xf2, 0x33, 0x3a, 0x76, 0x64, 0x42, 0x28, 0x19, 0x60, 0xe0, 0x47, 0x20, 0xdf, 0xf9, 0xd2, 0x4b,
	0x2a, 0x96, 0x28, 0x4e, 0x9e, 0xe7, 0xf5, 0xf7, 0x9d, 0xde, 0x43, 0x07, 0x13, 0xca, 0xf2, 0x84,
	0x64, 0xd9, 0xb4, 0x17, 0xc5, 0x13, 0xc2, 0x78, 0x4e, 0x38, 0x49, 0xa9, 0x58, 0x79, 0x08, 0x0b,
	0x01, 0x0a, 0xfc, 0xf6, 0x15, 0x1b, 0xba, 0x7f, 0x77, 0xb7, 0x53, 0x48, 0x41, 0x33, 0x51, 0xf9,
	0xcd, 0xe0, 0xdd, 0x3b, 0x24, 0x67, 0x1c, 0x22, 0xfd, 0x69, 0x7e, 0xda, 0xff, 0x52, 0x47, 0xad,
	0xa3, 0xd2, 0x1c, 0x10, 0x41, 0x72, 0xe9, 0x3f, 0x42, 0x5b, 0x23, 0x10, 0x58, 0x87, 0x61, 0x96,
	0x74, 0xbc, 0x07, 0xde, 0xe3, 0x66, 0x7f, 0xf3, 0xdb, 0xef, 0xef, 0x07, 0xde, 0x10, 0x8d, 0x40,
	0x68, 0xf8, 0x38, 0xf1, 0xdf, 0xa0, 0x7b, 0x05, 0x64, 0xe7, 0x29, 0x70, 0x5c, 0x80, 0xc4, 0x0a,
	0xce, 0x28, 0xc7, 0x24, 0x49, 0x04, 0x95, 0xb2, 0x73, 0xc3, 0xb5, 0x76, 0x2b, 0x6e, 0x00, 0xf2,
	0xb4, 0xa4, 0xde, 0x1a, 0xc8, 0x7f, 0x8d, 0xda, 0x52, 0x91, 0x33, 0xc6, 0x53, 0x5c, 0x8d, 0xbd,
	0xf4, 0x37, 0x5c, 0x7f, 0xa7, 0xa2, 0xde, 0x1b, 0xc8, 0xea, 0x2f, 0xd0, 0x8e, 0xcc, 0x88, 0x9c,
	0x5c, 0x93, 0xeb, 0xae, 0x7c, 0x57, 0x33, 0x6b, 0xea, 0x21, 0xf2, 0x05, 0x80, 0xaa, 0xb6, 0xb4,
	0xde, 0xa6, 0xeb, 0xdd, 0x2e, 0x01, 0xbd, 0xab, 0x95, 0x9e, 0xa3, 0x6d, 0x3b, 0x2e, 0xe3, 0x63,
	0x58, 0x6a, 0x0d, 0x57, 0xf3, 0x2b, 0xe4, 0x98, 0x8f, 0x61, 0x55, 0x54, 0x14, 0x4b, 0xca, 0x13,
	0x67, 0xce, 0x9b, 0xeb, 0xa2, 0xa2, 0x27, 0x9a, 0xb0, 0xe2, 0x2b, 0xb4, 0x6b, 0x44, 0x41, 0x63,
	0xca, 0xa6, 0x8e, 0x7a, 0xcb, 0x55, 0x4d, 0xfa, 0xb0, 0x62, 0x9c, 0xe3, 0x99, 0x92, 0x8c, 0x25,
	0x44, 0x81, 0xc0, 0x92, 0xaa, 0xa5, 0xdb, 0x5c, 0x39, 0x9e, 0x25, 0x73, 0x42, 0x55, 0xa5, 0xbe,
	0xac, 0xff, 0xf9, 0xba, 0xe7, 0xed, 0xff, 0xf5, 0x50, 0xa3, 0x2a, 0xc5, 0x10, 0x6d, 0x99, 0xa3,
	0x2a, 0xf4, 0xb3, 0x2e, 0x45, 0xab, 0xf7, 0x30, 0xfc, 0x4f, 0xfb, 0x42, 0xa7, 0x50, 0xfd, 0xe6,
	0xc5, 0xcf, 0xbd, 0x9a, 0x79, 0x59, 0x2b, 0x76, 0x8a, 0xf6, 0x0e, 0xdd, 0xcf, 0xcb, 0x48, 0x13,
	0xac, 0x66, 0x38, 0x06, 0x3e, 0x66, 0x22, 0x27, 0x8a, 0x01, 0x37, 0x0d, 0xaa, 0xdb, 0x29, 0x3b,
	0x25, 0xa9, 0x43, 0x4f, 0x67, 0x47, 0x2e, 0xe6, 0xf7, 0x51, 0xf7, 0xaa, 0xae, 0xd7, 0x42, 0x36,
	0xdc, 0x90, 0xb6, 0x2d, 0xef, 0x5a, 0x86, 0x59, 0xb7, 0xff, 0xe1, 0x62, 0x1e, 0x78, 0x97, 0xf3,
	0xc0, 0xfb, 0x35, 0x0f, 0xbc, 0xcf, 0x8b, 0xa0, 0x76, 0xb9, 0x08, 0x6a, 0x3f, 0x16, 0x41, 0xed,
	0xe3, 0xb3, 0x94, 0xa9, 0xc9, 0xa7, 0x51, 0x18, 0x43, 0x1e, 0x3d, 0x9d, 0x0d, 0x4c, 0x99, 0x23,
	0xbb, 0xfb, 0x93, 0x69, 0x2f, 0x9a, 0xad, 0x5e, 0x54, 0x75, 0x5e, 0x50, 0x39, 0x6a, 0xe8, 0x0b,
	0x76, 0xf8, 0x2f, 0x00, 0x00, 0xff, 0xff, 0x51, 0xbd, 0xfb, 0x44, 0xd0, 0x03, 0x00, 0x00,
}

func (this *ChainParams) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*ChainParams)
	if !ok {
		that2, ok := that.(ChainParams)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.BorChainId != that1.BorChainId {
		return false
	}
	if this.PolygonPosTokenAddress != that1.PolygonPosTokenAddress {
		return false
	}
	if this.StakingManagerAddress != that1.StakingManagerAddress {
		return false
	}
	if this.SlashManagerAddress != that1.SlashManagerAddress {
		return false
	}
	if this.RootChainAddress != that1.RootChainAddress {
		return false
	}
	if this.StakingInfoAddress != that1.StakingInfoAddress {
		return false
	}
	if this.StateSenderAddress != that1.StateSenderAddress {
		return false
	}
	if this.StateReceiverAddress != that1.StateReceiverAddress {
		return false
	}
	if this.ValidatorSetAddress != that1.ValidatorSetAddress {
		return false
	}
	return true
}
func (this *Params) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Params)
	if !ok {
		that2, ok := that.(Params)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.ChainParams.Equal(&that1.ChainParams) {
		return false
	}
	if this.MainChainTxConfirmations != that1.MainChainTxConfirmations {
		return false
	}
	if this.BorChainTxConfirmations != that1.BorChainTxConfirmations {
		return false
	}
	return true
}
func (m *ChainParams) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ChainParams) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ChainParams) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.ValidatorSetAddress) > 0 {
		i -= len(m.ValidatorSetAddress)
		copy(dAtA[i:], m.ValidatorSetAddress)
		i = encodeVarintChainmanager(dAtA, i, uint64(len(m.ValidatorSetAddress)))
		i--
		dAtA[i] = 0x4a
	}
	if len(m.StateReceiverAddress) > 0 {
		i -= len(m.StateReceiverAddress)
		copy(dAtA[i:], m.StateReceiverAddress)
		i = encodeVarintChainmanager(dAtA, i, uint64(len(m.StateReceiverAddress)))
		i--
		dAtA[i] = 0x42
	}
	if len(m.StateSenderAddress) > 0 {
		i -= len(m.StateSenderAddress)
		copy(dAtA[i:], m.StateSenderAddress)
		i = encodeVarintChainmanager(dAtA, i, uint64(len(m.StateSenderAddress)))
		i--
		dAtA[i] = 0x3a
	}
	if len(m.StakingInfoAddress) > 0 {
		i -= len(m.StakingInfoAddress)
		copy(dAtA[i:], m.StakingInfoAddress)
		i = encodeVarintChainmanager(dAtA, i, uint64(len(m.StakingInfoAddress)))
		i--
		dAtA[i] = 0x32
	}
	if len(m.RootChainAddress) > 0 {
		i -= len(m.RootChainAddress)
		copy(dAtA[i:], m.RootChainAddress)
		i = encodeVarintChainmanager(dAtA, i, uint64(len(m.RootChainAddress)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.SlashManagerAddress) > 0 {
		i -= len(m.SlashManagerAddress)
		copy(dAtA[i:], m.SlashManagerAddress)
		i = encodeVarintChainmanager(dAtA, i, uint64(len(m.SlashManagerAddress)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.StakingManagerAddress) > 0 {
		i -= len(m.StakingManagerAddress)
		copy(dAtA[i:], m.StakingManagerAddress)
		i = encodeVarintChainmanager(dAtA, i, uint64(len(m.StakingManagerAddress)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.PolygonPosTokenAddress) > 0 {
		i -= len(m.PolygonPosTokenAddress)
		copy(dAtA[i:], m.PolygonPosTokenAddress)
		i = encodeVarintChainmanager(dAtA, i, uint64(len(m.PolygonPosTokenAddress)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.BorChainId) > 0 {
		i -= len(m.BorChainId)
		copy(dAtA[i:], m.BorChainId)
		i = encodeVarintChainmanager(dAtA, i, uint64(len(m.BorChainId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *Params) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Params) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Params) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.BorChainTxConfirmations != 0 {
		i = encodeVarintChainmanager(dAtA, i, uint64(m.BorChainTxConfirmations))
		i--
		dAtA[i] = 0x18
	}
	if m.MainChainTxConfirmations != 0 {
		i = encodeVarintChainmanager(dAtA, i, uint64(m.MainChainTxConfirmations))
		i--
		dAtA[i] = 0x10
	}
	{
		size, err := m.ChainParams.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintChainmanager(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func encodeVarintChainmanager(dAtA []byte, offset int, v uint64) int {
	offset -= sovChainmanager(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *ChainParams) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.BorChainId)
	if l > 0 {
		n += 1 + l + sovChainmanager(uint64(l))
	}
	l = len(m.PolygonPosTokenAddress)
	if l > 0 {
		n += 1 + l + sovChainmanager(uint64(l))
	}
	l = len(m.StakingManagerAddress)
	if l > 0 {
		n += 1 + l + sovChainmanager(uint64(l))
	}
	l = len(m.SlashManagerAddress)
	if l > 0 {
		n += 1 + l + sovChainmanager(uint64(l))
	}
	l = len(m.RootChainAddress)
	if l > 0 {
		n += 1 + l + sovChainmanager(uint64(l))
	}
	l = len(m.StakingInfoAddress)
	if l > 0 {
		n += 1 + l + sovChainmanager(uint64(l))
	}
	l = len(m.StateSenderAddress)
	if l > 0 {
		n += 1 + l + sovChainmanager(uint64(l))
	}
	l = len(m.StateReceiverAddress)
	if l > 0 {
		n += 1 + l + sovChainmanager(uint64(l))
	}
	l = len(m.ValidatorSetAddress)
	if l > 0 {
		n += 1 + l + sovChainmanager(uint64(l))
	}
	return n
}

func (m *Params) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.ChainParams.Size()
	n += 1 + l + sovChainmanager(uint64(l))
	if m.MainChainTxConfirmations != 0 {
		n += 1 + sovChainmanager(uint64(m.MainChainTxConfirmations))
	}
	if m.BorChainTxConfirmations != 0 {
		n += 1 + sovChainmanager(uint64(m.BorChainTxConfirmations))
	}
	return n
}

func sovChainmanager(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozChainmanager(x uint64) (n int) {
	return sovChainmanager(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *ChainParams) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowChainmanager
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ChainParams: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ChainParams: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BorChainId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChainmanager
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthChainmanager
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthChainmanager
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.BorChainId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PolygonPosTokenAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChainmanager
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthChainmanager
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthChainmanager
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PolygonPosTokenAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StakingManagerAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChainmanager
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthChainmanager
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthChainmanager
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.StakingManagerAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SlashManagerAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChainmanager
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthChainmanager
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthChainmanager
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SlashManagerAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RootChainAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChainmanager
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthChainmanager
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthChainmanager
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RootChainAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StakingInfoAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChainmanager
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthChainmanager
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthChainmanager
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.StakingInfoAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StateSenderAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChainmanager
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthChainmanager
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthChainmanager
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.StateSenderAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StateReceiverAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChainmanager
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthChainmanager
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthChainmanager
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.StateReceiverAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ValidatorSetAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChainmanager
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthChainmanager
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthChainmanager
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ValidatorSetAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipChainmanager(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthChainmanager
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Params) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowChainmanager
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Params: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Params: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChainParams", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChainmanager
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthChainmanager
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthChainmanager
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.ChainParams.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MainChainTxConfirmations", wireType)
			}
			m.MainChainTxConfirmations = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChainmanager
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MainChainTxConfirmations |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BorChainTxConfirmations", wireType)
			}
			m.BorChainTxConfirmations = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowChainmanager
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BorChainTxConfirmations |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipChainmanager(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthChainmanager
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipChainmanager(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowChainmanager
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowChainmanager
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowChainmanager
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthChainmanager
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupChainmanager
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthChainmanager
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthChainmanager        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowChainmanager          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupChainmanager = fmt.Errorf("proto: unexpected end of group")
)
