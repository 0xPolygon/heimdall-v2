// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: heimdallv2/module/vote_ext.proto

package module

import (
	fmt "fmt"
	proto "github.com/cosmos/gogoproto/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type Vote int32

const (
	// TODO HV2: should we have an UNSPECIFIED value 0 tag as suggested here:
	// https://protobuf.dev/programming-guides/dos-donts/#unspecified-enum ?
	// currently the zero value of the enum would be interpreted as VOTE_SKIP
	Vote_VOTE_SKIP Vote = 0
	Vote_VOTE_YES  Vote = 1
	Vote_VOTE_NO   Vote = 2
)

var Vote_name = map[int32]string{
	0: "VOTE_SKIP",
	1: "VOTE_YES",
	2: "VOTE_NO",
}

var Vote_value = map[string]int32{
	"VOTE_SKIP": 0,
	"VOTE_YES":  1,
	"VOTE_NO":   2,
}

func (x Vote) String() string {
	return proto.EnumName(Vote_name, int32(x))
}

func (Vote) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_df8afc5d0551ea8b, []int{0}
}

type CanonicalSideTxResponse struct {
	SideTxResponses []*SideTxResponse `protobuf:"bytes,1,rep,name=side_tx_responses,json=sideTxResponses,proto3" json:"side_tx_responses,omitempty"`
	Hash            []byte            `protobuf:"bytes,2,opt,name=hash,proto3" json:"hash,omitempty"`
	Height          int64             `protobuf:"varint,3,opt,name=height,proto3" json:"height,omitempty"`
}

func (m *CanonicalSideTxResponse) Reset()         { *m = CanonicalSideTxResponse{} }
func (m *CanonicalSideTxResponse) String() string { return proto.CompactTextString(m) }
func (*CanonicalSideTxResponse) ProtoMessage()    {}
func (*CanonicalSideTxResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_df8afc5d0551ea8b, []int{0}
}
func (m *CanonicalSideTxResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CanonicalSideTxResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CanonicalSideTxResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CanonicalSideTxResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CanonicalSideTxResponse.Merge(m, src)
}
func (m *CanonicalSideTxResponse) XXX_Size() int {
	return m.Size()
}
func (m *CanonicalSideTxResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_CanonicalSideTxResponse.DiscardUnknown(m)
}

var xxx_messageInfo_CanonicalSideTxResponse proto.InternalMessageInfo

func (m *CanonicalSideTxResponse) GetSideTxResponses() []*SideTxResponse {
	if m != nil {
		return m.SideTxResponses
	}
	return nil
}

func (m *CanonicalSideTxResponse) GetHash() []byte {
	if m != nil {
		return m.Hash
	}
	return nil
}

func (m *CanonicalSideTxResponse) GetHeight() int64 {
	if m != nil {
		return m.Height
	}
	return 0
}

type SideTxResponse struct {
	TxHash []byte `protobuf:"bytes,1,opt,name=tx_hash,json=txHash,proto3" json:"tx_hash,omitempty"`
	Result Vote   `protobuf:"varint,4,opt,name=result,proto3,enum=heimdallv2.module.Vote" json:"result,omitempty"`
}

func (m *SideTxResponse) Reset()         { *m = SideTxResponse{} }
func (m *SideTxResponse) String() string { return proto.CompactTextString(m) }
func (*SideTxResponse) ProtoMessage()    {}
func (*SideTxResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_df8afc5d0551ea8b, []int{1}
}
func (m *SideTxResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SideTxResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SideTxResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SideTxResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SideTxResponse.Merge(m, src)
}
func (m *SideTxResponse) XXX_Size() int {
	return m.Size()
}
func (m *SideTxResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_SideTxResponse.DiscardUnknown(m)
}

var xxx_messageInfo_SideTxResponse proto.InternalMessageInfo

func (m *SideTxResponse) GetTxHash() []byte {
	if m != nil {
		return m.TxHash
	}
	return nil
}

func (m *SideTxResponse) GetResult() Vote {
	if m != nil {
		return m.Result
	}
	return Vote_VOTE_SKIP
}

func init() {
	proto.RegisterEnum("heimdallv2.module.Vote", Vote_name, Vote_value)
	proto.RegisterType((*CanonicalSideTxResponse)(nil), "heimdallv2.module.CanonicalSideTxResponse")
	proto.RegisterType((*SideTxResponse)(nil), "heimdallv2.module.SideTxResponse")
}

func init() { proto.RegisterFile("heimdallv2/module/vote_ext.proto", fileDescriptor_df8afc5d0551ea8b) }

var fileDescriptor_df8afc5d0551ea8b = []byte{
	// 316 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x6c, 0x91, 0x41, 0x4b, 0x32, 0x41,
	0x1c, 0xc6, 0x77, 0x54, 0xd6, 0xf7, 0xfd, 0x6b, 0xa6, 0x73, 0xc8, 0x3d, 0x2d, 0x9b, 0x97, 0x96,
	0xa0, 0x5d, 0xb1, 0x4f, 0x50, 0x21, 0x14, 0x51, 0xca, 0x2a, 0x42, 0x5e, 0x96, 0xd5, 0x1d, 0x9c,
	0x81, 0x71, 0x47, 0x9c, 0x51, 0xa6, 0x6f, 0xd1, 0xa1, 0x0f, 0xd5, 0xd1, 0x63, 0xc7, 0xd0, 0x2f,
	0x12, 0x4e, 0x56, 0x58, 0xdd, 0xe6, 0x37, 0x3c, 0xff, 0x1f, 0x0f, 0x3c, 0xe0, 0x51, 0xc2, 0xa6,
	0x69, 0xc2, 0xf9, 0xb2, 0x15, 0x4e, 0x45, 0xba, 0xe0, 0x24, 0x5c, 0x0a, 0x45, 0x62, 0xa2, 0x55,
	0x30, 0x9b, 0x0b, 0x25, 0x70, 0xed, 0x3b, 0x11, 0x7c, 0x24, 0x1a, 0xcf, 0x08, 0xea, 0x57, 0x49,
	0x26, 0x32, 0x36, 0x4e, 0x78, 0x8f, 0xa5, 0xa4, 0xaf, 0x23, 0x22, 0x67, 0x22, 0x93, 0x04, 0xdf,
	0x41, 0x4d, 0xb2, 0x94, 0xc4, 0x4a, 0xc7, 0xf3, 0xdd, 0x9f, 0x74, 0x90, 0x97, 0xf7, 0x4b, 0xad,
	0xe3, 0xe0, 0x97, 0x2a, 0xd8, 0xbf, 0x8e, 0x0e, 0xe5, 0x1e, 0x4b, 0x8c, 0xa1, 0x40, 0x13, 0x49,
	0x9d, 0x9c, 0x87, 0xfc, 0x72, 0x64, 0xde, 0xf8, 0x08, 0x6c, 0x4a, 0xd8, 0x84, 0x2a, 0x27, 0xef,
	0x21, 0x3f, 0x1f, 0xed, 0xa8, 0x31, 0x84, 0xca, 0x8f, 0x32, 0x75, 0x28, 0x2a, 0x1d, 0x1b, 0x01,
	0x32, 0x02, 0x5b, 0xe9, 0xeb, 0xad, 0x22, 0x04, 0x7b, 0x4e, 0xe4, 0x82, 0x2b, 0xa7, 0xe0, 0x21,
	0xbf, 0xd2, 0xaa, 0xff, 0x51, 0x6d, 0x20, 0x14, 0x89, 0x76, 0xb1, 0xd3, 0x26, 0x14, 0xb6, 0x8c,
	0x0f, 0xe0, 0xff, 0xa0, 0xd3, 0x6f, 0xc7, 0xbd, 0xdb, 0x9b, 0x6e, 0xd5, 0xc2, 0x65, 0xf8, 0x67,
	0xf0, 0xa1, 0xdd, 0xab, 0x22, 0x5c, 0x82, 0xa2, 0xa1, 0xfb, 0x4e, 0x35, 0x77, 0x79, 0xf1, 0xb2,
	0x76, 0xd1, 0x6a, 0xed, 0xa2, 0xb7, 0xb5, 0x8b, 0x9e, 0x36, 0xae, 0xb5, 0xda, 0xb8, 0xd6, 0xeb,
	0xc6, 0xb5, 0x86, 0x27, 0x13, 0xa6, 0xe8, 0x62, 0x14, 0x8c, 0xc5, 0x34, 0x6c, 0xea, 0xae, 0xe0,
	0x8f, 0x13, 0x91, 0x85, 0x9f, 0x05, 0xce, 0xbe, 0x96, 0x18, 0xd9, 0x66, 0x81, 0xf3, 0xf7, 0x00,
	0x00, 0x00, 0xff, 0xff, 0xde, 0x1e, 0x88, 0xe3, 0xa5, 0x01, 0x00, 0x00,
}

func (m *CanonicalSideTxResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CanonicalSideTxResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CanonicalSideTxResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Height != 0 {
		i = encodeVarintVoteExt(dAtA, i, uint64(m.Height))
		i--
		dAtA[i] = 0x18
	}
	if len(m.Hash) > 0 {
		i -= len(m.Hash)
		copy(dAtA[i:], m.Hash)
		i = encodeVarintVoteExt(dAtA, i, uint64(len(m.Hash)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.SideTxResponses) > 0 {
		for iNdEx := len(m.SideTxResponses) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.SideTxResponses[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintVoteExt(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *SideTxResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SideTxResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SideTxResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Result != 0 {
		i = encodeVarintVoteExt(dAtA, i, uint64(m.Result))
		i--
		dAtA[i] = 0x20
	}
	if len(m.TxHash) > 0 {
		i -= len(m.TxHash)
		copy(dAtA[i:], m.TxHash)
		i = encodeVarintVoteExt(dAtA, i, uint64(len(m.TxHash)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintVoteExt(dAtA []byte, offset int, v uint64) int {
	offset -= sovVoteExt(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *CanonicalSideTxResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.SideTxResponses) > 0 {
		for _, e := range m.SideTxResponses {
			l = e.Size()
			n += 1 + l + sovVoteExt(uint64(l))
		}
	}
	l = len(m.Hash)
	if l > 0 {
		n += 1 + l + sovVoteExt(uint64(l))
	}
	if m.Height != 0 {
		n += 1 + sovVoteExt(uint64(m.Height))
	}
	return n
}

func (m *SideTxResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.TxHash)
	if l > 0 {
		n += 1 + l + sovVoteExt(uint64(l))
	}
	if m.Result != 0 {
		n += 1 + sovVoteExt(uint64(m.Result))
	}
	return n
}

func sovVoteExt(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozVoteExt(x uint64) (n int) {
	return sovVoteExt(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *CanonicalSideTxResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowVoteExt
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CanonicalSideTxResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CanonicalSideTxResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SideTxResponses", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVoteExt
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthVoteExt
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthVoteExt
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SideTxResponses = append(m.SideTxResponses, &SideTxResponse{})
			if err := m.SideTxResponses[len(m.SideTxResponses)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Hash", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVoteExt
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthVoteExt
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthVoteExt
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Hash = append(m.Hash[:0], dAtA[iNdEx:postIndex]...)
			if m.Hash == nil {
				m.Hash = []byte{}
			}
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Height", wireType)
			}
			m.Height = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVoteExt
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Height |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipVoteExt(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthVoteExt
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SideTxResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowVoteExt
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SideTxResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SideTxResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TxHash", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVoteExt
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthVoteExt
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthVoteExt
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TxHash = append(m.TxHash[:0], dAtA[iNdEx:postIndex]...)
			if m.TxHash == nil {
				m.TxHash = []byte{}
			}
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Result", wireType)
			}
			m.Result = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVoteExt
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Result |= Vote(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipVoteExt(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthVoteExt
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipVoteExt(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowVoteExt
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowVoteExt
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowVoteExt
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthVoteExt
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupVoteExt
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthVoteExt
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthVoteExt        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowVoteExt          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupVoteExt = fmt.Errorf("proto: unexpected end of group")
)
